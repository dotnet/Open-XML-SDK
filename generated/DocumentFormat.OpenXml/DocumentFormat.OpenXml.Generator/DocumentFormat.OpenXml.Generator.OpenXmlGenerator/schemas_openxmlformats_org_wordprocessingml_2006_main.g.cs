// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.CustomXmlSchemaReferences;
using DocumentFormat.OpenXml.Drawing.Wordprocessing;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Math;
using DocumentFormat.OpenXml.Office2010.Word;
using DocumentFormat.OpenXml.Office2013.Word;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.Validation.Semantic;
using DocumentFormat.OpenXml.Vml;
using DocumentFormat.OpenXml.Vml.Office;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Wordprocessing
{
    /// <summary>
    /// <para>Table Cell Insertion.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cellIns.</para>
    /// </summary>
    public partial class CellInsertion : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CellInsertion class.
        /// </summary>
        public CellInsertion() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cellIns");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellInsertion>(deep);
    }

    /// <summary>
    /// <para>Table Cell Deletion.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cellDel.</para>
    /// </summary>
    public partial class CellDeletion : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CellDeletion class.
        /// </summary>
        public CellDeletion() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cellDel");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellDeletion>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlInsRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlInsRangeStart.</para>
    /// </summary>
    public partial class CustomXmlInsRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlInsRangeStart class.
        /// </summary>
        public CustomXmlInsRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlInsRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlInsRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlDelRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlDelRangeStart.</para>
    /// </summary>
    public partial class CustomXmlDelRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlDelRangeStart class.
        /// </summary>
        public CustomXmlDelRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlDelRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), false, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlDelRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveFromRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveFromRangeStart.</para>
    /// </summary>
    public partial class CustomXmlMoveFromRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveFromRangeStart class.
        /// </summary>
        public CustomXmlMoveFromRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlMoveFromRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveFromRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveToRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveToRangeStart.</para>
    /// </summary>
    public partial class CustomXmlMoveToRangeStart : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveToRangeStart class.
        /// </summary>
        public CustomXmlMoveToRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlMoveToRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveToRangeStart>(deep);
    }

    /// <summary>
    /// <para>Inserted Paragraph.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ins.</para>
    /// </summary>
    public partial class Inserted : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the Inserted class.
        /// </summary>
        public Inserted() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ins");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inserted>(deep);
    }

    /// <summary>
    /// <para>Deleted Paragraph.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:del.</para>
    /// </summary>
    public partial class Deleted : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the Deleted class.
        /// </summary>
        public Deleted() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:del");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Deleted>(deep);
    }

    /// <summary>
    /// <para>Move Source Paragraph.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFrom.</para>
    /// </summary>
    public partial class MoveFrom : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFrom class.
        /// </summary>
        public MoveFrom() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveFrom");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFrom>(deep);
    }

    /// <summary>
    /// <para>Move Destination Paragraph.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveTo.</para>
    /// </summary>
    public partial class MoveTo : TrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveTo class.
        /// </summary>
        public MoveTo() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveTo");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveTo>(deep);
    }

    /// <summary>
    /// <para>Defines the TrackChangeType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TrackChangeType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TrackChangeType class.
        /// </summary>
        protected TrackChangeType() : base()
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TrackChangeType>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Vertically Merged/Split Table Cells.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cellMerge.</para>
    /// </summary>
    public partial class CellMerge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CellMerge class.
        /// </summary>
        public CellMerge() : base()
        {
        }

        /// <summary>
        /// <para>vMerge</para>
        /// <para>Represents the following attribute in the schema: w:vMerge</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalMergeRevisionValues>? VerticalMerge
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalMergeRevisionValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>vMergeOrig</para>
        /// <para>Represents the following attribute in the schema: w:vMergeOrig</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalMergeRevisionValues>? VerticalMergeOriginal
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalMergeRevisionValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cellMerge");
            builder.AddElement<CellMerge>()
                .AddAttribute("w:vMerge", a => a.VerticalMerge)
                .AddAttribute("w:vMergeOrig", a => a.VerticalMergeOriginal)
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CellMerge>(deep);
    }

    /// <summary>
    /// <para>Defines the BookmarkStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookmarkStart.</para>
    /// </summary>
    public partial class BookmarkStart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BookmarkStart class.
        /// </summary>
        public BookmarkStart() : base()
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>colFirst</para>
        /// <para>Represents the following attribute in the schema: w:colFirst</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? ColumnFirst
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>colLast</para>
        /// <para>Represents the following attribute in the schema: w:colLast</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? ColumnLast
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>displacedByCustomXml</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>? DisplacedByCustomXml
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bookmarkStart");
            builder.AddElement<BookmarkStart>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (40L) });
                })
                .AddAttribute("w:colFirst", a => a.ColumnFirst)
                .AddAttribute("w:colLast", a => a.ColumnLast)
                .AddAttribute("w:displacedByCustomXml", a => a.DisplacedByCustomXml)
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookmarkStart>(deep);
    }

    /// <summary>
    /// <para>Defines the BookmarkEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookmarkEnd.</para>
    /// </summary>
    public partial class BookmarkEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the BookmarkEnd class.
        /// </summary>
        public BookmarkEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bookmarkEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookmarkEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CommentRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:commentRangeStart.</para>
    /// </summary>
    public partial class CommentRangeStart : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the CommentRangeStart class.
        /// </summary>
        public CommentRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:commentRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "WordprocessingCommentsPart", builder.CreateQName("w:comment"), "w:comment", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the CommentRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:commentRangeEnd.</para>
    /// </summary>
    public partial class CommentRangeEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the CommentRangeEnd class.
        /// </summary>
        public CommentRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:commentRangeEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "WordprocessingCommentsPart", builder.CreateQName("w:comment"), "w:comment", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveFromRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFromRangeEnd.</para>
    /// </summary>
    public partial class MoveFromRangeEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromRangeEnd class.
        /// </summary>
        public MoveFromRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveFromRangeEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveToRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveToRangeEnd.</para>
    /// </summary>
    public partial class MoveToRangeEnd : MarkupRangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToRangeEnd class.
        /// </summary>
        public MoveToRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveToRangeEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the MarkupRangeType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MarkupRangeType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MarkupRangeType class.
        /// </summary>
        protected MarkupRangeType() : base()
        {
        }

        /// <summary>
        /// <para>displacedByCustomXml</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>? DisplacedByCustomXml
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<MarkupRangeType>()
                .AddAttribute("w:displacedByCustomXml", a => a.DisplacedByCustomXml)
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Defines the MoveFromRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFromRangeStart.</para>
    /// </summary>
    public partial class MoveFromRangeStart : MoveBookmarkType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromRangeStart class.
        /// </summary>
        public MoveFromRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveFromRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveToRangeStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveToRangeStart.</para>
    /// </summary>
    public partial class MoveToRangeStart : MoveBookmarkType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToRangeStart class.
        /// </summary>
        public MoveToRangeStart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveToRangeStart");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), false, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToRangeStart>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveBookmarkType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MoveBookmarkType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MoveBookmarkType class.
        /// </summary>
        protected MoveBookmarkType() : base()
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>colFirst</para>
        /// <para>Represents the following attribute in the schema: w:colFirst</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? ColumnFirst
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>colLast</para>
        /// <para>Represents the following attribute in the schema: w:colLast</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? ColumnLast
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>displacedByCustomXml</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>? DisplacedByCustomXml
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<MoveBookmarkType>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:date", a => a.Date, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (40L) });
                })
                .AddAttribute("w:colFirst", a => a.ColumnFirst)
                .AddAttribute("w:colLast", a => a.ColumnLast)
                .AddAttribute("w:displacedByCustomXml", a => a.DisplacedByCustomXml)
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Defines the CustomXmlInsRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlInsRangeEnd.</para>
    /// </summary>
    public partial class CustomXmlInsRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlInsRangeEnd class.
        /// </summary>
        public CustomXmlInsRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlInsRangeEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlInsRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlDelRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlDelRangeEnd.</para>
    /// </summary>
    public partial class CustomXmlDelRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlDelRangeEnd class.
        /// </summary>
        public CustomXmlDelRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlDelRangeEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), false, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlDelRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveFromRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveFromRangeEnd.</para>
    /// </summary>
    public partial class CustomXmlMoveFromRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveFromRangeEnd class.
        /// </summary>
        public CustomXmlMoveFromRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlMoveFromRangeEnd");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveFromRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlMoveToRangeEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlMoveToRangeEnd.</para>
    /// </summary>
    public partial class CustomXmlMoveToRangeEnd : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlMoveToRangeEnd class.
        /// </summary>
        public CustomXmlMoveToRangeEnd() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlMoveToRangeEnd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlMoveToRangeEnd>(deep);
    }

    /// <summary>
    /// <para>Comment Content Reference Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:commentReference.</para>
    /// </summary>
    public partial class CommentReference : MarkupType
    {
        /// <summary>
        /// Initializes a new instance of the CommentReference class.
        /// </summary>
        public CommentReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:commentReference");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "WordprocessingCommentsPart", builder.CreateQName("w:comment"), "w:comment", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CommentReference>(deep);
    }

    /// <summary>
    /// <para>Defines the MarkupType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MarkupType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MarkupType class.
        /// </summary>
        protected MarkupType() : base()
        {
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<MarkupType>()
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Defines the ParagraphStyleId Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pStyle.</para>
    /// </summary>
    public partial class ParagraphStyleId : StringType
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphStyleId class.
        /// </summary>
        public ParagraphStyleId() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pStyle");
            builder.AddConstraint(new AttributeValueLengthConstraint(builder.CreateQName("w:val"), 0, 253) { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphStyleId>(deep);
    }

    /// <summary>
    /// <para>Date Display Mask.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dateFormat.</para>
    /// </summary>
    public partial class DateFormat : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DateFormat class.
        /// </summary>
        public DateFormat() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dateFormat");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DateFormat>(deep);
    }

    /// <summary>
    /// <para>Document Part Gallery Filter.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartGallery.</para>
    /// </summary>
    public partial class DocPartGallery : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartGallery class.
        /// </summary>
        public DocPartGallery() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartGallery");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartGallery>(deep);
    }

    /// <summary>
    /// <para>Document Part Category Filter.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartCategory.</para>
    /// </summary>
    public partial class DocPartCategory : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartCategory class.
        /// </summary>
        public DocPartCategory() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartCategory");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartCategory>(deep);
    }

    /// <summary>
    /// <para>Document Part Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPart.</para>
    /// </summary>
    public partial class DocPartReference : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartReference class.
        /// </summary>
        public DocPartReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPart");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartReference>(deep);
    }

    /// <summary>
    /// <para>Custom XML Element Placeholder Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:placeholder.</para>
    /// </summary>
    public partial class CustomXmlPlaceholder : StringType
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlPlaceholder class.
        /// </summary>
        public CustomXmlPlaceholder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:placeholder");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlPlaceholder>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCaption Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblCaption.</para>
    /// </summary>
    public partial class TableCaption : StringType
    {
        /// <summary>
        /// Initializes a new instance of the TableCaption class.
        /// </summary>
        public TableCaption() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblCaption");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCaption>(deep);
    }

    /// <summary>
    /// <para>Defines the TableDescription Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblDescription.</para>
    /// </summary>
    public partial class TableDescription : StringType
    {
        /// <summary>
        /// Initializes a new instance of the TableDescription class.
        /// </summary>
        public TableDescription() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblDescription");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableDescription>(deep);
    }

    /// <summary>
    /// <para>Data Source Name for Column.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    public partial class Name : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Name class.
        /// </summary>
        public Name() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:name");
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @"[^,]*") { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Name>(deep);
    }

    /// <summary>
    /// <para>Predefined Merge Field Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mappedName.</para>
    /// </summary>
    public partial class MappedName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the MappedName class.
        /// </summary>
        public MappedName() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mappedName");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MappedName>(deep);
    }

    /// <summary>
    /// <para>UDL Connection String.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:udl.</para>
    /// </summary>
    public partial class UdlConnectionString : StringType
    {
        /// <summary>
        /// Initializes a new instance of the UdlConnectionString class.
        /// </summary>
        public UdlConnectionString() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:udl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UdlConnectionString>(deep);
    }

    /// <summary>
    /// <para>Data Source Table Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:table.</para>
    /// </summary>
    public partial class DataSourceTableName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceTableName class.
        /// </summary>
        public DataSourceTableName() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:table");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataSourceTableName>(deep);
    }

    /// <summary>
    /// <para>Data Source Connection String.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:connectString.</para>
    /// </summary>
    public partial class ConnectString : StringType
    {
        /// <summary>
        /// Initializes a new instance of the ConnectString class.
        /// </summary>
        public ConnectString() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:connectString");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConnectString>(deep);
    }

    /// <summary>
    /// <para>Query For Data Source Records To Merge.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:query.</para>
    /// </summary>
    public partial class Query : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Query class.
        /// </summary>
        public Query() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:query");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Query>(deep);
    }

    /// <summary>
    /// <para>Column Containing E-mail Address.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:addressFieldName.</para>
    /// </summary>
    public partial class AddressFieldName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the AddressFieldName class.
        /// </summary>
        public AddressFieldName() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:addressFieldName");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AddressFieldName>(deep);
    }

    /// <summary>
    /// <para>Merged E-mail or Fax Subject Line.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mailSubject.</para>
    /// </summary>
    public partial class MailSubject : StringType
    {
        /// <summary>
        /// Initializes a new instance of the MailSubject class.
        /// </summary>
        public MailSubject() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mailSubject");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailSubject>(deep);
    }

    /// <summary>
    /// <para>Frame Size.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sz.</para>
    /// </summary>
    public partial class FrameSize : StringType
    {
        /// <summary>
        /// Initializes a new instance of the FrameSize class.
        /// </summary>
        public FrameSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sz");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameSize>(deep);
    }

    /// <summary>
    /// <para>Associated Paragraph Style Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:style.</para>
    /// </summary>
    public partial class StyleId : StringType
    {
        /// <summary>
        /// Initializes a new instance of the StyleId class.
        /// </summary>
        public StyleId() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:style");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:styleId"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleId>(deep);
    }

    /// <summary>
    /// <para>Description for Entry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:description.</para>
    /// </summary>
    public partial class Description : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Description class.
        /// </summary>
        public Description() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:description");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Description>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtAlias Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alias.</para>
    /// </summary>
    public partial class SdtAlias : StringType
    {
        /// <summary>
        /// Initializes a new instance of the SdtAlias class.
        /// </summary>
        public SdtAlias() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:alias");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtAlias>(deep);
    }

    /// <summary>
    /// <para>Defines the Tag Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tag.</para>
    /// </summary>
    public partial class Tag : StringType
    {
        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        public Tag() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tag");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tag>(deep);
    }

    /// <summary>
    /// <para>Attached Custom XML Schema.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:attachedSchema.</para>
    /// </summary>
    public partial class AttachedSchema : StringType
    {
        /// <summary>
        /// Initializes a new instance of the AttachedSchema class.
        /// </summary>
        public AttachedSchema() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:attachedSchema");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AttachedSchema>(deep);
    }

    /// <summary>
    /// <para>Radix Point for Field Code Evaluation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:decimalSymbol.</para>
    /// </summary>
    public partial class DecimalSymbol : StringType
    {
        /// <summary>
        /// Initializes a new instance of the DecimalSymbol class.
        /// </summary>
        public DecimalSymbol() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:decimalSymbol");
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @".{1}"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DecimalSymbol>(deep);
    }

    /// <summary>
    /// <para>List Separator for Field Code Evaluation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:listSeparator.</para>
    /// </summary>
    public partial class ListSeparator : StringType
    {
        /// <summary>
        /// Initializes a new instance of the ListSeparator class.
        /// </summary>
        public ListSeparator() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:listSeparator");
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @".{1}"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListSeparator>(deep);
    }

    /// <summary>
    /// <para>Defines the WebPageEncoding Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:encoding.</para>
    /// </summary>
    public partial class WebPageEncoding : StringType
    {
        /// <summary>
        /// Initializes a new instance of the WebPageEncoding class.
        /// </summary>
        public WebPageEncoding() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:encoding");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebPageEncoding>(deep);
    }

    /// <summary>
    /// <para>Defines the AltName Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:altName.</para>
    /// </summary>
    public partial class AltName : StringType
    {
        /// <summary>
        /// Initializes a new instance of the AltName class.
        /// </summary>
        public AltName() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:altName");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AltName>(deep);
    }

    /// <summary>
    /// <para>Defines the StringType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class StringType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StringType class.
        /// </summary>
        protected StringType() : base()
        {
        }

        /// <summary>
        /// <para>String Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<StringType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Defines the KeepNext Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:keepNext.</para>
    /// </summary>
    public partial class KeepNext : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the KeepNext class.
        /// </summary>
        public KeepNext() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:keepNext");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<KeepNext>(deep);
    }

    /// <summary>
    /// <para>Defines the KeepLines Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:keepLines.</para>
    /// </summary>
    public partial class KeepLines : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the KeepLines class.
        /// </summary>
        public KeepLines() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:keepLines");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<KeepLines>(deep);
    }

    /// <summary>
    /// <para>Defines the PageBreakBefore Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pageBreakBefore.</para>
    /// </summary>
    public partial class PageBreakBefore : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PageBreakBefore class.
        /// </summary>
        public PageBreakBefore() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pageBreakBefore");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageBreakBefore>(deep);
    }

    /// <summary>
    /// <para>Defines the WidowControl Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:widowControl.</para>
    /// </summary>
    public partial class WidowControl : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WidowControl class.
        /// </summary>
        public WidowControl() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:widowControl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WidowControl>(deep);
    }

    /// <summary>
    /// <para>Defines the SuppressLineNumbers Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressLineNumbers.</para>
    /// </summary>
    public partial class SuppressLineNumbers : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressLineNumbers class.
        /// </summary>
        public SuppressLineNumbers() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressLineNumbers");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressLineNumbers>(deep);
    }

    /// <summary>
    /// <para>Defines the SuppressAutoHyphens Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressAutoHyphens.</para>
    /// </summary>
    public partial class SuppressAutoHyphens : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressAutoHyphens class.
        /// </summary>
        public SuppressAutoHyphens() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressAutoHyphens");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressAutoHyphens>(deep);
    }

    /// <summary>
    /// <para>Defines the Kinsoku Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:kinsoku.</para>
    /// </summary>
    public partial class Kinsoku : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Kinsoku class.
        /// </summary>
        public Kinsoku() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:kinsoku");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Kinsoku>(deep);
    }

    /// <summary>
    /// <para>Defines the WordWrap Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wordWrap.</para>
    /// </summary>
    public partial class WordWrap : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WordWrap class.
        /// </summary>
        public WordWrap() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:wordWrap");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WordWrap>(deep);
    }

    /// <summary>
    /// <para>Defines the OverflowPunctuation Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:overflowPunct.</para>
    /// </summary>
    public partial class OverflowPunctuation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the OverflowPunctuation class.
        /// </summary>
        public OverflowPunctuation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:overflowPunct");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OverflowPunctuation>(deep);
    }

    /// <summary>
    /// <para>Defines the TopLinePunctuation Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:topLinePunct.</para>
    /// </summary>
    public partial class TopLinePunctuation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TopLinePunctuation class.
        /// </summary>
        public TopLinePunctuation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:topLinePunct");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLinePunctuation>(deep);
    }

    /// <summary>
    /// <para>Defines the AutoSpaceDE Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoSpaceDE.</para>
    /// </summary>
    public partial class AutoSpaceDE : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoSpaceDE class.
        /// </summary>
        public AutoSpaceDE() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoSpaceDE");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSpaceDE>(deep);
    }

    /// <summary>
    /// <para>Defines the AutoSpaceDN Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoSpaceDN.</para>
    /// </summary>
    public partial class AutoSpaceDN : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoSpaceDN class.
        /// </summary>
        public AutoSpaceDN() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoSpaceDN");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSpaceDN>(deep);
    }

    /// <summary>
    /// <para>Defines the BiDi Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bidi.</para>
    /// </summary>
    public partial class BiDi : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BiDi class.
        /// </summary>
        public BiDi() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bidi");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiDi>(deep);
    }

    /// <summary>
    /// <para>Defines the AdjustRightIndent Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:adjustRightInd.</para>
    /// </summary>
    public partial class AdjustRightIndent : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AdjustRightIndent class.
        /// </summary>
        public AdjustRightIndent() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:adjustRightInd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustRightIndent>(deep);
    }

    /// <summary>
    /// <para>Defines the SnapToGrid Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:snapToGrid.</para>
    /// </summary>
    public partial class SnapToGrid : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SnapToGrid class.
        /// </summary>
        public SnapToGrid() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:snapToGrid");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SnapToGrid>(deep);
    }

    /// <summary>
    /// <para>Defines the ContextualSpacing Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:contextualSpacing.</para>
    /// </summary>
    public partial class ContextualSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ContextualSpacing class.
        /// </summary>
        public ContextualSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:contextualSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContextualSpacing>(deep);
    }

    /// <summary>
    /// <para>Defines the MirrorIndents Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mirrorIndents.</para>
    /// </summary>
    public partial class MirrorIndents : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MirrorIndents class.
        /// </summary>
        public MirrorIndents() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mirrorIndents");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MirrorIndents>(deep);
    }

    /// <summary>
    /// <para>Defines the SuppressOverlap Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressOverlap.</para>
    /// </summary>
    public partial class SuppressOverlap : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressOverlap class.
        /// </summary>
        public SuppressOverlap() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressOverlap");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressOverlap>(deep);
    }

    /// <summary>
    /// <para>Defines the Bold Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:b.</para>
    /// </summary>
    public partial class Bold : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Bold class.
        /// </summary>
        public Bold() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:b");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Bold>(deep);
    }

    /// <summary>
    /// <para>Defines the BoldComplexScript Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bCs.</para>
    /// </summary>
    public partial class BoldComplexScript : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BoldComplexScript class.
        /// </summary>
        public BoldComplexScript() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bCs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BoldComplexScript>(deep);
    }

    /// <summary>
    /// <para>Defines the Italic Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:i.</para>
    /// </summary>
    public partial class Italic : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Italic class.
        /// </summary>
        public Italic() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:i");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Italic>(deep);
    }

    /// <summary>
    /// <para>Defines the ItalicComplexScript Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:iCs.</para>
    /// </summary>
    public partial class ItalicComplexScript : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ItalicComplexScript class.
        /// </summary>
        public ItalicComplexScript() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:iCs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ItalicComplexScript>(deep);
    }

    /// <summary>
    /// <para>Defines the Caps Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:caps.</para>
    /// </summary>
    public partial class Caps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Caps class.
        /// </summary>
        public Caps() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:caps");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Caps>(deep);
    }

    /// <summary>
    /// <para>Defines the SmallCaps Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:smallCaps.</para>
    /// </summary>
    public partial class SmallCaps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SmallCaps class.
        /// </summary>
        public SmallCaps() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:smallCaps");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SmallCaps>(deep);
    }

    /// <summary>
    /// <para>Defines the Strike Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:strike.</para>
    /// </summary>
    public partial class Strike : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Strike class.
        /// </summary>
        public Strike() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:strike");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Strike>(deep);
    }

    /// <summary>
    /// <para>Defines the DoubleStrike Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dstrike.</para>
    /// </summary>
    public partial class DoubleStrike : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoubleStrike class.
        /// </summary>
        public DoubleStrike() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dstrike");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoubleStrike>(deep);
    }

    /// <summary>
    /// <para>Defines the Outline Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:outline.</para>
    /// </summary>
    public partial class Outline : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Outline class.
        /// </summary>
        public Outline() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:outline");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Outline>(deep);
    }

    /// <summary>
    /// <para>Defines the Shadow Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shadow.</para>
    /// </summary>
    public partial class Shadow : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Shadow class.
        /// </summary>
        public Shadow() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:shadow");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shadow>(deep);
    }

    /// <summary>
    /// <para>Defines the Emboss Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:emboss.</para>
    /// </summary>
    public partial class Emboss : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Emboss class.
        /// </summary>
        public Emboss() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:emboss");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Emboss>(deep);
    }

    /// <summary>
    /// <para>Defines the Imprint Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:imprint.</para>
    /// </summary>
    public partial class Imprint : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Imprint class.
        /// </summary>
        public Imprint() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:imprint");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Imprint>(deep);
    }

    /// <summary>
    /// <para>Defines the NoProof Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noProof.</para>
    /// </summary>
    public partial class NoProof : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoProof class.
        /// </summary>
        public NoProof() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noProof");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoProof>(deep);
    }

    /// <summary>
    /// <para>Defines the Vanish Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vanish.</para>
    /// </summary>
    public partial class Vanish : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Vanish class.
        /// </summary>
        public Vanish() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:vanish");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Vanish>(deep);
    }

    /// <summary>
    /// <para>Defines the WebHidden Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:webHidden.</para>
    /// </summary>
    public partial class WebHidden : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WebHidden class.
        /// </summary>
        public WebHidden() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:webHidden");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebHidden>(deep);
    }

    /// <summary>
    /// <para>Defines the RightToLeftText Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rtl.</para>
    /// </summary>
    public partial class RightToLeftText : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RightToLeftText class.
        /// </summary>
        public RightToLeftText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rtl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightToLeftText>(deep);
    }

    /// <summary>
    /// <para>Defines the ComplexScript Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cs.</para>
    /// </summary>
    public partial class ComplexScript : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ComplexScript class.
        /// </summary>
        public ComplexScript() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ComplexScript>(deep);
    }

    /// <summary>
    /// <para>Defines the SpecVanish Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:specVanish.</para>
    /// </summary>
    public partial class SpecVanish : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SpecVanish class.
        /// </summary>
        public SpecVanish() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:specVanish");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpecVanish>(deep);
    }

    /// <summary>
    /// <para>Defines the OfficeMath Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:oMath.</para>
    /// </summary>
    public partial class OfficeMath : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the OfficeMath class.
        /// </summary>
        public OfficeMath() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:oMath");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OfficeMath>(deep);
    }

    /// <summary>
    /// <para>Defines the Hidden Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hidden.</para>
    /// </summary>
    public partial class Hidden : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Hidden class.
        /// </summary>
        public Hidden() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hidden");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hidden>(deep);
    }

    /// <summary>
    /// <para>Defines the FormProtection Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:formProt.</para>
    /// </summary>
    public partial class FormProtection : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FormProtection class.
        /// </summary>
        public FormProtection() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:formProt");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormProtection>(deep);
    }

    /// <summary>
    /// <para>Defines the NoEndnote Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noEndnote.</para>
    /// </summary>
    public partial class NoEndnote : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoEndnote class.
        /// </summary>
        public NoEndnote() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noEndnote");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoEndnote>(deep);
    }

    /// <summary>
    /// <para>Defines the TitlePage Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:titlePg.</para>
    /// </summary>
    public partial class TitlePage : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TitlePage class.
        /// </summary>
        public TitlePage() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:titlePg");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TitlePage>(deep);
    }

    /// <summary>
    /// <para>Defines the GutterOnRight Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rtlGutter.</para>
    /// </summary>
    public partial class GutterOnRight : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the GutterOnRight class.
        /// </summary>
        public GutterOnRight() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rtlGutter");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GutterOnRight>(deep);
    }

    /// <summary>
    /// <para>Form Field Enabled.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:enabled.</para>
    /// </summary>
    public partial class Enabled : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Enabled class.
        /// </summary>
        public Enabled() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:enabled");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Enabled>(deep);
    }

    /// <summary>
    /// <para>Recalculate Fields When Current Field Is Modified.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:calcOnExit.</para>
    /// </summary>
    public partial class CalculateOnExit : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the CalculateOnExit class.
        /// </summary>
        public CalculateOnExit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:calcOnExit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CalculateOnExit>(deep);
    }

    /// <summary>
    /// <para>Automatically Size Form Field.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sizeAuto.</para>
    /// </summary>
    public partial class AutomaticallySizeFormField : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutomaticallySizeFormField class.
        /// </summary>
        public AutomaticallySizeFormField() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sizeAuto");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutomaticallySizeFormField>(deep);
    }

    /// <summary>
    /// <para>Default Checkbox Form Field State.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:default.</para>
    /// </summary>
    public partial class DefaultCheckBoxFormFieldState : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultCheckBoxFormFieldState class.
        /// </summary>
        public DefaultCheckBoxFormFieldState() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:default");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultCheckBoxFormFieldState>(deep);
    }

    /// <summary>
    /// <para>Checkbox Form Field State.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:checked.</para>
    /// </summary>
    public partial class Checked : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Checked class.
        /// </summary>
        public Checked() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:checked");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Checked>(deep);
    }

    /// <summary>
    /// <para>Keep Source Formatting on Import.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:matchSrc.</para>
    /// </summary>
    public partial class MatchSource : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MatchSource class.
        /// </summary>
        public MatchSource() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:matchSrc");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MatchSource>(deep);
    }

    /// <summary>
    /// <para>Invalidated Field Cache.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dirty.</para>
    /// </summary>
    public partial class Dirty : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Dirty class.
        /// </summary>
        public Dirty() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dirty");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Dirty>(deep);
    }

    /// <summary>
    /// <para>Built-In Document Part.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartUnique.</para>
    /// </summary>
    public partial class DocPartUnique : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartUnique class.
        /// </summary>
        public DocPartUnique() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartUnique");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartUnique>(deep);
    }

    /// <summary>
    /// <para>Record Is Included in Mail Merge.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:active.</para>
    /// </summary>
    public partial class Active : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the Active class.
        /// </summary>
        public Active() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:active");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Active>(deep);
    }

    /// <summary>
    /// <para>Use Country/Region-Based Address Field Ordering.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dynamicAddress.</para>
    /// </summary>
    public partial class DynamicAddress : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DynamicAddress class.
        /// </summary>
        public DynamicAddress() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dynamicAddress");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DynamicAddress>(deep);
    }

    /// <summary>
    /// <para>First Row of Data Source Contains Column Names.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fHdr.</para>
    /// </summary>
    public partial class FirstRowHeader : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FirstRowHeader class.
        /// </summary>
        public FirstRowHeader() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fHdr");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FirstRowHeader>(deep);
    }

    /// <summary>
    /// <para>Query Contains Link to External Query File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:linkToQuery.</para>
    /// </summary>
    public partial class LinkToQuery : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LinkToQuery class.
        /// </summary>
        public LinkToQuery() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:linkToQuery");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkToQuery>(deep);
    }

    /// <summary>
    /// <para>Remove Blank Lines from Merged Documents.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSuppressBlankLines.</para>
    /// </summary>
    public partial class DoNotSuppressBlankLines : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSuppressBlankLines class.
        /// </summary>
        public DoNotSuppressBlankLines() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotSuppressBlankLines");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSuppressBlankLines>(deep);
    }

    /// <summary>
    /// <para>Merged Document To E-Mail Attachment.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mailAsAttachment.</para>
    /// </summary>
    public partial class MailAsAttachment : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MailAsAttachment class.
        /// </summary>
        public MailAsAttachment() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mailAsAttachment");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailAsAttachment>(deep);
    }

    /// <summary>
    /// <para>View Merged Data Within Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:viewMergedData.</para>
    /// </summary>
    public partial class ViewMergedData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ViewMergedData class.
        /// </summary>
        public ViewMergedData() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:viewMergedData");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ViewMergedData>(deep);
    }

    /// <summary>
    /// <para>Display All Levels Using Arabic Numerals.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:isLgl.</para>
    /// </summary>
    public partial class IsLegalNumberingStyle : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the IsLegalNumberingStyle class.
        /// </summary>
        public IsLegalNumberingStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:isLgl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<IsLegalNumberingStyle>(deep);
    }

    /// <summary>
    /// <para>Data for HTML blockquote Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:blockQuote.</para>
    /// </summary>
    public partial class BlockQuote : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BlockQuote class.
        /// </summary>
        public BlockQuote() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:blockQuote");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BlockQuote>(deep);
    }

    /// <summary>
    /// <para>Data for HTML body Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bodyDiv.</para>
    /// </summary>
    public partial class BodyDiv : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BodyDiv class.
        /// </summary>
        public BodyDiv() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bodyDiv");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BodyDiv>(deep);
    }

    /// <summary>
    /// <para>Use Simplified Rules For Table Border Conflicts.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useSingleBorderforContiguousCells.</para>
    /// </summary>
    public partial class UseSingleBorderForContiguousCells : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseSingleBorderForContiguousCells class.
        /// </summary>
        public UseSingleBorderForContiguousCells() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useSingleBorderforContiguousCells");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseSingleBorderForContiguousCells>(deep);
    }

    /// <summary>
    /// <para>Emulate WordPerfect 6.x Paragraph Justification.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wpJustification.</para>
    /// </summary>
    public partial class WordPerfectJustification : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WordPerfectJustification class.
        /// </summary>
        public WordPerfectJustification() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:wpJustification");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WordPerfectJustification>(deep);
    }

    /// <summary>
    /// <para>Do Not Create Custom Tab Stop for Hanging Indent.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noTabHangInd.</para>
    /// </summary>
    public partial class NoTabHangIndent : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoTabHangIndent class.
        /// </summary>
        public NoTabHangIndent() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noTabHangInd");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoTabHangIndent>(deep);
    }

    /// <summary>
    /// <para>Do Not Add Leading Between Lines of Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noLeading.</para>
    /// </summary>
    public partial class NoLeading : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoLeading class.
        /// </summary>
        public NoLeading() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noLeading");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoLeading>(deep);
    }

    /// <summary>
    /// <para>Add Additional Space Below Baseline For Underlined East Asian Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spaceForUL.</para>
    /// </summary>
    public partial class SpaceForUnderline : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SpaceForUnderline class.
        /// </summary>
        public SpaceForUnderline() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:spaceForUL");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpaceForUnderline>(deep);
    }

    /// <summary>
    /// <para>Do Not Balance Text Columns within a Section.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noColumnBalance.</para>
    /// </summary>
    public partial class NoColumnBalance : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoColumnBalance class.
        /// </summary>
        public NoColumnBalance() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noColumnBalance");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoColumnBalance>(deep);
    }

    /// <summary>
    /// <para>Balance Single Byte and Double Byte Characters.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:balanceSingleByteDoubleByteWidth.</para>
    /// </summary>
    public partial class BalanceSingleByteDoubleByteWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BalanceSingleByteDoubleByteWidth class.
        /// </summary>
        public BalanceSingleByteDoubleByteWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:balanceSingleByteDoubleByteWidth");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BalanceSingleByteDoubleByteWidth>(deep);
    }

    /// <summary>
    /// <para>Do Not Center Content on Lines With Exact Line Height.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noExtraLineSpacing.</para>
    /// </summary>
    public partial class NoExtraLineSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoExtraLineSpacing class.
        /// </summary>
        public NoExtraLineSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noExtraLineSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoExtraLineSpacing>(deep);
    }

    /// <summary>
    /// <para>Convert Backslash To Yen Sign When Entered.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotLeaveBackslashAlone.</para>
    /// </summary>
    public partial class DoNotLeaveBackslashAlone : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotLeaveBackslashAlone class.
        /// </summary>
        public DoNotLeaveBackslashAlone() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotLeaveBackslashAlone");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotLeaveBackslashAlone>(deep);
    }

    /// <summary>
    /// <para>Underline All Trailing Spaces.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ulTrailSpace.</para>
    /// </summary>
    public partial class UnderlineTrailingSpaces : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineTrailingSpaces class.
        /// </summary>
        public UnderlineTrailingSpaces() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ulTrailSpace");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineTrailingSpaces>(deep);
    }

    /// <summary>
    /// <para>Don't Justify Lines Ending in Soft Line Break.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotExpandShiftReturn.</para>
    /// </summary>
    public partial class DoNotExpandShiftReturn : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotExpandShiftReturn class.
        /// </summary>
        public DoNotExpandShiftReturn() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotExpandShiftReturn");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotExpandShiftReturn>(deep);
    }

    /// <summary>
    /// <para>Only Expand/Condense Text By Whole Points.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spacingInWholePoints.</para>
    /// </summary>
    public partial class SpacingInWholePoints : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SpacingInWholePoints class.
        /// </summary>
        public SpacingInWholePoints() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:spacingInWholePoints");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingInWholePoints>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 6.0 Line Wrapping for East Asian Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lineWrapLikeWord6.</para>
    /// </summary>
    public partial class LineWrapLikeWord6 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LineWrapLikeWord6 class.
        /// </summary>
        public LineWrapLikeWord6() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lineWrapLikeWord6");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineWrapLikeWord6>(deep);
    }

    /// <summary>
    /// <para>Print Body Text before Header/Footer Contents.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printBodyTextBeforeHeader.</para>
    /// </summary>
    public partial class PrintBodyTextBeforeHeader : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintBodyTextBeforeHeader class.
        /// </summary>
        public PrintBodyTextBeforeHeader() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printBodyTextBeforeHeader");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintBodyTextBeforeHeader>(deep);
    }

    /// <summary>
    /// <para>Print Colors as Black And White without Dithering.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printColBlack.</para>
    /// </summary>
    public partial class PrintColorBlackWhite : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintColorBlackWhite class.
        /// </summary>
        public PrintColorBlackWhite() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printColBlack");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintColorBlackWhite>(deep);
    }

    /// <summary>
    /// <para>Space width.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wpSpaceWidth.</para>
    /// </summary>
    public partial class WordPerfectSpaceWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WordPerfectSpaceWidth class.
        /// </summary>
        public WordPerfectSpaceWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:wpSpaceWidth");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WordPerfectSpaceWidth>(deep);
    }

    /// <summary>
    /// <para>Display Page/Column Breaks Present in Frames.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showBreaksInFrames.</para>
    /// </summary>
    public partial class ShowBreaksInFrames : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowBreaksInFrames class.
        /// </summary>
        public ShowBreaksInFrames() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:showBreaksInFrames");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowBreaksInFrames>(deep);
    }

    /// <summary>
    /// <para>Increase Priority Of Font Size During Font Substitution.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:subFontBySize.</para>
    /// </summary>
    public partial class SubFontBySize : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SubFontBySize class.
        /// </summary>
        public SubFontBySize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:subFontBySize");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SubFontBySize>(deep);
    }

    /// <summary>
    /// <para>Ignore Exact Line Height for Last Line on Page.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressBottomSpacing.</para>
    /// </summary>
    public partial class SuppressBottomSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressBottomSpacing class.
        /// </summary>
        public SuppressBottomSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressBottomSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressBottomSpacing>(deep);
    }

    /// <summary>
    /// <para>Ignore Minimum and Exact Line Height for First Line on Page.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressTopSpacing.</para>
    /// </summary>
    public partial class SuppressTopSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressTopSpacing class.
        /// </summary>
        public SuppressTopSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressTopSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressTopSpacing>(deep);
    }

    /// <summary>
    /// <para>Ignore Minimum Line Height for First Line on Page.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressSpacingAtTopOfPage.</para>
    /// </summary>
    public partial class SuppressSpacingAtTopOfPage : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressSpacingAtTopOfPage class.
        /// </summary>
        public SuppressSpacingAtTopOfPage() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressSpacingAtTopOfPage");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressSpacingAtTopOfPage>(deep);
    }

    /// <summary>
    /// <para>Emulate WordPerfect 5.x Line Spacing.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressTopSpacingWP.</para>
    /// </summary>
    public partial class SuppressTopSpacingWordPerfect : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressTopSpacingWordPerfect class.
        /// </summary>
        public SuppressTopSpacingWordPerfect() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressTopSpacingWP");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressTopSpacingWordPerfect>(deep);
    }

    /// <summary>
    /// <para>Do Not Use Space Before On First Line After a Page Break.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suppressSpBfAfterPgBrk.</para>
    /// </summary>
    public partial class SuppressSpacingBeforeAfterPageBreak : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SuppressSpacingBeforeAfterPageBreak class.
        /// </summary>
        public SuppressSpacingBeforeAfterPageBreak() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suppressSpBfAfterPgBrk");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SuppressSpacingBeforeAfterPageBreak>(deep);
    }

    /// <summary>
    /// <para>Swap Paragraph Borders on Odd Numbered Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:swapBordersFacingPages.</para>
    /// </summary>
    public partial class SwapBordersFacingPages : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SwapBordersFacingPages class.
        /// </summary>
        public SwapBordersFacingPages() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:swapBordersFacingPages");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SwapBordersFacingPages>(deep);
    }

    /// <summary>
    /// <para>Treat Backslash Quotation Delimiter as Two Quotation Marks.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:convMailMergeEsc.</para>
    /// </summary>
    public partial class ConvertMailMergeEscape : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ConvertMailMergeEscape class.
        /// </summary>
        public ConvertMailMergeEscape() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:convMailMergeEsc");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConvertMailMergeEscape>(deep);
    }

    /// <summary>
    /// <para>Emulate WordPerfect 6.x Font Height Calculation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:truncateFontHeightsLikeWP6.</para>
    /// </summary>
    public partial class TruncateFontHeightsLikeWordPerfect : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TruncateFontHeightsLikeWordPerfect class.
        /// </summary>
        public TruncateFontHeightsLikeWordPerfect() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:truncateFontHeightsLikeWP6");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TruncateFontHeightsLikeWordPerfect>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 5.x for the Macintosh Small Caps Formatting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mwSmallCaps.</para>
    /// </summary>
    public partial class MacWordSmallCaps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MacWordSmallCaps class.
        /// </summary>
        public MacWordSmallCaps() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mwSmallCaps");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MacWordSmallCaps>(deep);
    }

    /// <summary>
    /// <para>Use Printer Metrics To Display Documents.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:usePrinterMetrics.</para>
    /// </summary>
    public partial class UsePrinterMetrics : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UsePrinterMetrics class.
        /// </summary>
        public UsePrinterMetrics() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:usePrinterMetrics");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UsePrinterMetrics>(deep);
    }

    /// <summary>
    /// <para>Do Not Suppress Paragraph Borders Next To Frames.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSuppressParagraphBorders.</para>
    /// </summary>
    public partial class DoNotSuppressParagraphBorders : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSuppressParagraphBorders class.
        /// </summary>
        public DoNotSuppressParagraphBorders() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotSuppressParagraphBorders");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSuppressParagraphBorders>(deep);
    }

    /// <summary>
    /// <para>Line Wrap Trailing Spaces.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wrapTrailSpaces.</para>
    /// </summary>
    public partial class WrapTrailSpaces : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the WrapTrailSpaces class.
        /// </summary>
        public WrapTrailSpaces() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:wrapTrailSpaces");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WrapTrailSpaces>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 6.x/95/97 Footnote Placement.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnoteLayoutLikeWW8.</para>
    /// </summary>
    public partial class FootnoteLayoutLikeWord8 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteLayoutLikeWord8 class.
        /// </summary>
        public FootnoteLayoutLikeWord8() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnoteLayoutLikeWW8");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteLayoutLikeWord8>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 97 Text Wrapping Around Floating Objects.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shapeLayoutLikeWW8.</para>
    /// </summary>
    public partial class ShapeLayoutLikeWord8 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeLayoutLikeWord8 class.
        /// </summary>
        public ShapeLayoutLikeWord8() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:shapeLayoutLikeWW8");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeLayoutLikeWord8>(deep);
    }

    /// <summary>
    /// <para>Align Table Rows Independently.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alignTablesRowByRow.</para>
    /// </summary>
    public partial class AlignTablesRowByRow : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlignTablesRowByRow class.
        /// </summary>
        public AlignTablesRowByRow() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:alignTablesRowByRow");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlignTablesRowByRow>(deep);
    }

    /// <summary>
    /// <para>Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:forgetLastTabAlignment.</para>
    /// </summary>
    public partial class ForgetLastTabAlignment : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ForgetLastTabAlignment class.
        /// </summary>
        public ForgetLastTabAlignment() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:forgetLastTabAlignment");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForgetLastTabAlignment>(deep);
    }

    /// <summary>
    /// <para>Add Document Grid Line Pitch To Lines in Table Cells.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:adjustLineHeightInTable.</para>
    /// </summary>
    public partial class AdjustLineHeightInTable : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AdjustLineHeightInTable class.
        /// </summary>
        public AdjustLineHeightInTable() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:adjustLineHeightInTable");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AdjustLineHeightInTable>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 95 Full-Width Character Spacing.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoSpaceLikeWord95.</para>
    /// </summary>
    public partial class AutoSpaceLikeWord95 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoSpaceLikeWord95 class.
        /// </summary>
        public AutoSpaceLikeWord95() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoSpaceLikeWord95");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoSpaceLikeWord95>(deep);
    }

    /// <summary>
    /// <para>Do Not Increase Line Height for Raised/Lowered Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noSpaceRaiseLower.</para>
    /// </summary>
    public partial class NoSpaceRaiseLower : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoSpaceRaiseLower class.
        /// </summary>
        public NoSpaceRaiseLower() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noSpaceRaiseLower");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoSpaceRaiseLower>(deep);
    }

    /// <summary>
    /// <para>Use Fixed Paragraph Spacing for HTML Auto Setting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseHTMLParagraphAutoSpacing.</para>
    /// </summary>
    public partial class DoNotUseHTMLParagraphAutoSpacing : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseHTMLParagraphAutoSpacing class.
        /// </summary>
        public DoNotUseHTMLParagraphAutoSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotUseHTMLParagraphAutoSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseHTMLParagraphAutoSpacing>(deep);
    }

    /// <summary>
    /// <para>Ignore Space Before Table When Deciding If Table Should Wrap Floating Object.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:layoutRawTableWidth.</para>
    /// </summary>
    public partial class LayoutRawTableWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LayoutRawTableWidth class.
        /// </summary>
        public LayoutRawTableWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:layoutRawTableWidth");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LayoutRawTableWidth>(deep);
    }

    /// <summary>
    /// <para>Allow Table Rows to Wrap Inline Objects Independently.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:layoutTableRowsApart.</para>
    /// </summary>
    public partial class LayoutTableRowsApart : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LayoutTableRowsApart class.
        /// </summary>
        public LayoutTableRowsApart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:layoutTableRowsApart");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LayoutTableRowsApart>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 97 East Asian Line Breaking.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useWord97LineBreakRules.</para>
    /// </summary>
    public partial class UseWord97LineBreakRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseWord97LineBreakRules class.
        /// </summary>
        public UseWord97LineBreakRules() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useWord97LineBreakRules");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseWord97LineBreakRules>(deep);
    }

    /// <summary>
    /// <para>Do Not Allow Floating Tables To Break Across Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotBreakWrappedTables.</para>
    /// </summary>
    public partial class DoNotBreakWrappedTables : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotBreakWrappedTables class.
        /// </summary>
        public DoNotBreakWrappedTables() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotBreakWrappedTables");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotBreakWrappedTables>(deep);
    }

    /// <summary>
    /// <para>Do Not Snap to Document Grid in Table Cells with Objects.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSnapToGridInCell.</para>
    /// </summary>
    public partial class DoNotSnapToGridInCell : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSnapToGridInCell class.
        /// </summary>
        public DoNotSnapToGridInCell() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotSnapToGridInCell");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSnapToGridInCell>(deep);
    }

    /// <summary>
    /// <para>Select Field When First or Last Character Is Selected.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:selectFldWithFirstOrLastChar.</para>
    /// </summary>
    public partial class SelectFieldWithFirstOrLastChar : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SelectFieldWithFirstOrLastChar class.
        /// </summary>
        public SelectFieldWithFirstOrLastChar() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:selectFldWithFirstOrLastChar");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SelectFieldWithFirstOrLastChar>(deep);
    }

    /// <summary>
    /// <para>Use Legacy Ethiopic and Amharic Line Breaking Rules.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:applyBreakingRules.</para>
    /// </summary>
    public partial class ApplyBreakingRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ApplyBreakingRules class.
        /// </summary>
        public ApplyBreakingRules() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:applyBreakingRules");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ApplyBreakingRules>(deep);
    }

    /// <summary>
    /// <para>Do Not Allow Hanging Punctuation With Character Grid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotWrapTextWithPunct.</para>
    /// </summary>
    public partial class DoNotWrapTextWithPunctuation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotWrapTextWithPunctuation class.
        /// </summary>
        public DoNotWrapTextWithPunctuation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotWrapTextWithPunct");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotWrapTextWithPunctuation>(deep);
    }

    /// <summary>
    /// <para>Do Not Compress Compressible Characters When Using Document Grid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseEastAsianBreakRules.</para>
    /// </summary>
    public partial class DoNotUseEastAsianBreakRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseEastAsianBreakRules class.
        /// </summary>
        public DoNotUseEastAsianBreakRules() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotUseEastAsianBreakRules");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseEastAsianBreakRules>(deep);
    }

    /// <summary>
    /// <para>Emulate Word 2002 Table Style Rules.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useWord2002TableStyleRules.</para>
    /// </summary>
    public partial class UseWord2002TableStyleRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseWord2002TableStyleRules class.
        /// </summary>
        public UseWord2002TableStyleRules() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useWord2002TableStyleRules");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseWord2002TableStyleRules>(deep);
    }

    /// <summary>
    /// <para>Allow Tables to AutoFit Into Page Margins.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:growAutofit.</para>
    /// </summary>
    public partial class GrowAutofit : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the GrowAutofit class.
        /// </summary>
        public GrowAutofit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:growAutofit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GrowAutofit>(deep);
    }

    /// <summary>
    /// <para>Do Not Bypass East Asian/Complex Script Layout Code.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useFELayout.</para>
    /// </summary>
    public partial class UseFarEastLayout : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseFarEastLayout class.
        /// </summary>
        public UseFarEastLayout() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useFELayout");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseFarEastLayout>(deep);
    }

    /// <summary>
    /// <para>Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useNormalStyleForList.</para>
    /// </summary>
    public partial class UseNormalStyleForList : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseNormalStyleForList class.
        /// </summary>
        public UseNormalStyleForList() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useNormalStyleForList");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseNormalStyleForList>(deep);
    }

    /// <summary>
    /// <para>Ignore Hanging Indent When Creating Tab Stop After Numbering.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseIndentAsNumberingTabStop.</para>
    /// </summary>
    public partial class DoNotUseIndentAsNumberingTabStop : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseIndentAsNumberingTabStop class.
        /// </summary>
        public DoNotUseIndentAsNumberingTabStop() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotUseIndentAsNumberingTabStop");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseIndentAsNumberingTabStop>(deep);
    }

    /// <summary>
    /// <para>Use Alternate Set of East Asian Line Breaking Rules.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useAltKinsokuLineBreakRules.</para>
    /// </summary>
    public partial class UseAltKinsokuLineBreakRules : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseAltKinsokuLineBreakRules class.
        /// </summary>
        public UseAltKinsokuLineBreakRules() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useAltKinsokuLineBreakRules");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseAltKinsokuLineBreakRules>(deep);
    }

    /// <summary>
    /// <para>Allow Contextual Spacing of Paragraphs in Tables.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:allowSpaceOfSameStyleInTable.</para>
    /// </summary>
    public partial class AllowSpaceOfSameStyleInTable : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AllowSpaceOfSameStyleInTable class.
        /// </summary>
        public AllowSpaceOfSameStyleInTable() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:allowSpaceOfSameStyleInTable");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllowSpaceOfSameStyleInTable>(deep);
    }

    /// <summary>
    /// <para>Do Not Ignore Floating Objects When Calculating Paragraph Indentation.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSuppressIndentation.</para>
    /// </summary>
    public partial class DoNotSuppressIndentation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSuppressIndentation class.
        /// </summary>
        public DoNotSuppressIndentation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotSuppressIndentation");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSuppressIndentation>(deep);
    }

    /// <summary>
    /// <para>Do Not AutoFit Tables To Fit Next To Wrapped Objects.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotAutofitConstrainedTables.</para>
    /// </summary>
    public partial class DoNotAutofitConstrainedTables : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotAutofitConstrainedTables class.
        /// </summary>
        public DoNotAutofitConstrainedTables() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotAutofitConstrainedTables");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotAutofitConstrainedTables>(deep);
    }

    /// <summary>
    /// <para>Allow Table Columns To Exceed Preferred Widths of Constituent Cells.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autofitToFirstFixedWidthCell.</para>
    /// </summary>
    public partial class AutofitToFirstFixedWidthCell : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutofitToFirstFixedWidthCell class.
        /// </summary>
        public AutofitToFirstFixedWidthCell() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autofitToFirstFixedWidthCell");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutofitToFirstFixedWidthCell>(deep);
    }

    /// <summary>
    /// <para>Underline Following Character Following Numbering.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:underlineTabInNumList.</para>
    /// </summary>
    public partial class UnderlineTabInNumberingList : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UnderlineTabInNumberingList class.
        /// </summary>
        public UnderlineTabInNumberingList() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:underlineTabInNumList");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnderlineTabInNumberingList>(deep);
    }

    /// <summary>
    /// <para>Always Use Fixed Width for Hangul Characters.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayHangulFixedWidth.</para>
    /// </summary>
    public partial class DisplayHangulFixedWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DisplayHangulFixedWidth class.
        /// </summary>
        public DisplayHangulFixedWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:displayHangulFixedWidth");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayHangulFixedWidth>(deep);
    }

    /// <summary>
    /// <para>Always Move Paragraph Mark to Page after a Page Break.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:splitPgBreakAndParaMark.</para>
    /// </summary>
    public partial class SplitPageBreakAndParagraphMark : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SplitPageBreakAndParagraphMark class.
        /// </summary>
        public SplitPageBreakAndParagraphMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:splitPgBreakAndParaMark");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SplitPageBreakAndParagraphMark>(deep);
    }

    /// <summary>
    /// <para>Don't Vertically Align Cells Containing Floating Objects.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotVertAlignCellWithSp.</para>
    /// </summary>
    public partial class DoNotVerticallyAlignCellWithShape : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotVerticallyAlignCellWithShape class.
        /// </summary>
        public DoNotVerticallyAlignCellWithShape() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotVertAlignCellWithSp");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotVerticallyAlignCellWithShape>(deep);
    }

    /// <summary>
    /// <para>Don't Break Table Rows Around Floating Tables.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotBreakConstrainedForcedTable.</para>
    /// </summary>
    public partial class DoNotBreakConstrainedForcedTable : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotBreakConstrainedForcedTable class.
        /// </summary>
        public DoNotBreakConstrainedForcedTable() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotBreakConstrainedForcedTable");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotBreakConstrainedForcedTable>(deep);
    }

    /// <summary>
    /// <para>Ignore Vertical Alignment in Textboxes.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotVertAlignInTxbx.</para>
    /// </summary>
    public partial class DoNotVerticallyAlignInTextBox : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotVerticallyAlignInTextBox class.
        /// </summary>
        public DoNotVerticallyAlignInTextBox() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotVertAlignInTxbx");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotVerticallyAlignInTextBox>(deep);
    }

    /// <summary>
    /// <para>Use ANSI Kerning Pairs from Fonts.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useAnsiKerningPairs.</para>
    /// </summary>
    public partial class UseAnsiKerningPairs : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseAnsiKerningPairs class.
        /// </summary>
        public UseAnsiKerningPairs() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useAnsiKerningPairs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseAnsiKerningPairs>(deep);
    }

    /// <summary>
    /// <para>Use Cached Paragraph Information for Column Balancing.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cachedColBalance.</para>
    /// </summary>
    public partial class CachedColumnBalance : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the CachedColumnBalance class.
        /// </summary>
        public CachedColumnBalance() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cachedColBalance");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CachedColumnBalance>(deep);
    }

    /// <summary>
    /// <para>Defines the ShowingPlaceholder Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showingPlcHdr.</para>
    /// </summary>
    public partial class ShowingPlaceholder : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowingPlaceholder class.
        /// </summary>
        public ShowingPlaceholder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:showingPlcHdr");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowingPlaceholder>(deep);
    }

    /// <summary>
    /// <para>Defines the TemporarySdt Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:temporary.</para>
    /// </summary>
    public partial class TemporarySdt : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TemporarySdt class.
        /// </summary>
        public TemporarySdt() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:temporary");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TemporarySdt>(deep);
    }

    /// <summary>
    /// <para>Remove Personal Information from Document Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:removePersonalInformation.</para>
    /// </summary>
    public partial class RemovePersonalInformation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RemovePersonalInformation class.
        /// </summary>
        public RemovePersonalInformation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:removePersonalInformation");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RemovePersonalInformation>(deep);
    }

    /// <summary>
    /// <para>Remove Date and Time from Annotations.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:removeDateAndTime.</para>
    /// </summary>
    public partial class RemoveDateAndTime : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RemoveDateAndTime class.
        /// </summary>
        public RemoveDateAndTime() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:removeDateAndTime");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RemoveDateAndTime>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Visual Boundary For Header/Footer or Between Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotDisplayPageBoundaries.</para>
    /// </summary>
    public partial class DoNotDisplayPageBoundaries : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotDisplayPageBoundaries class.
        /// </summary>
        public DoNotDisplayPageBoundaries() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotDisplayPageBoundaries");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotDisplayPageBoundaries>(deep);
    }

    /// <summary>
    /// <para>Display Background Objects When Displaying Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayBackgroundShape.</para>
    /// </summary>
    public partial class DisplayBackgroundShape : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DisplayBackgroundShape class.
        /// </summary>
        public DisplayBackgroundShape() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:displayBackgroundShape");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayBackgroundShape>(deep);
    }

    /// <summary>
    /// <para>Print PostScript Codes With Document Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printPostScriptOverText.</para>
    /// </summary>
    public partial class PrintPostScriptOverText : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintPostScriptOverText class.
        /// </summary>
        public PrintPostScriptOverText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printPostScriptOverText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintPostScriptOverText>(deep);
    }

    /// <summary>
    /// <para>Print Fractional Character Widths.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printFractionalCharacterWidth.</para>
    /// </summary>
    public partial class PrintFractionalCharacterWidth : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintFractionalCharacterWidth class.
        /// </summary>
        public PrintFractionalCharacterWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printFractionalCharacterWidth");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintFractionalCharacterWidth>(deep);
    }

    /// <summary>
    /// <para>Only Print Form Field Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printFormsData.</para>
    /// </summary>
    public partial class PrintFormsData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintFormsData class.
        /// </summary>
        public PrintFormsData() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printFormsData");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintFormsData>(deep);
    }

    /// <summary>
    /// <para>Embed TrueType Fonts.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedTrueTypeFonts.</para>
    /// </summary>
    public partial class EmbedTrueTypeFonts : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedTrueTypeFonts class.
        /// </summary>
        public EmbedTrueTypeFonts() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:embedTrueTypeFonts");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedTrueTypeFonts>(deep);
    }

    /// <summary>
    /// <para>Embed Common System Fonts.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedSystemFonts.</para>
    /// </summary>
    public partial class EmbedSystemFonts : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedSystemFonts class.
        /// </summary>
        public EmbedSystemFonts() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:embedSystemFonts");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedSystemFonts>(deep);
    }

    /// <summary>
    /// <para>Subset Fonts When Embedding.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveSubsetFonts.</para>
    /// </summary>
    public partial class SaveSubsetFonts : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveSubsetFonts class.
        /// </summary>
        public SaveSubsetFonts() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:saveSubsetFonts");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveSubsetFonts>(deep);
    }

    /// <summary>
    /// <para>Only Save Form Field Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveFormsData.</para>
    /// </summary>
    public partial class SaveFormsData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveFormsData class.
        /// </summary>
        public SaveFormsData() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:saveFormsData");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveFormsData>(deep);
    }

    /// <summary>
    /// <para>Mirror Page Margins.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mirrorMargins.</para>
    /// </summary>
    public partial class MirrorMargins : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the MirrorMargins class.
        /// </summary>
        public MirrorMargins() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mirrorMargins");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MirrorMargins>(deep);
    }

    /// <summary>
    /// <para>Align Paragraph and Table Borders with Page Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alignBordersAndEdges.</para>
    /// </summary>
    public partial class AlignBorderAndEdges : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlignBorderAndEdges class.
        /// </summary>
        public AlignBorderAndEdges() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:alignBordersAndEdges");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlignBorderAndEdges>(deep);
    }

    /// <summary>
    /// <para>Page Border Excludes Header.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bordersDoNotSurroundHeader.</para>
    /// </summary>
    public partial class BordersDoNotSurroundHeader : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BordersDoNotSurroundHeader class.
        /// </summary>
        public BordersDoNotSurroundHeader() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bordersDoNotSurroundHeader");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BordersDoNotSurroundHeader>(deep);
    }

    /// <summary>
    /// <para>Page Border Excludes Footer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bordersDoNotSurroundFooter.</para>
    /// </summary>
    public partial class BordersDoNotSurroundFooter : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BordersDoNotSurroundFooter class.
        /// </summary>
        public BordersDoNotSurroundFooter() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bordersDoNotSurroundFooter");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BordersDoNotSurroundFooter>(deep);
    }

    /// <summary>
    /// <para>Position Gutter At Top of Page.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gutterAtTop.</para>
    /// </summary>
    public partial class GutterAtTop : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the GutterAtTop class.
        /// </summary>
        public GutterAtTop() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:gutterAtTop");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GutterAtTop>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Visual Indication of Spelling Errors.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hideSpellingErrors.</para>
    /// </summary>
    public partial class HideSpellingErrors : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the HideSpellingErrors class.
        /// </summary>
        public HideSpellingErrors() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hideSpellingErrors");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HideSpellingErrors>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Visual Indication of Grammatical Errors.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hideGrammaticalErrors.</para>
    /// </summary>
    public partial class HideGrammaticalErrors : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the HideGrammaticalErrors class.
        /// </summary>
        public HideGrammaticalErrors() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hideGrammaticalErrors");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HideGrammaticalErrors>(deep);
    }

    /// <summary>
    /// <para>Structured Document Tag Placeholder Text Should be Resaved.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:formsDesign.</para>
    /// </summary>
    public partial class FormsDesign : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the FormsDesign class.
        /// </summary>
        public FormsDesign() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:formsDesign");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormsDesign>(deep);
    }

    /// <summary>
    /// <para>Automatically Update Styles From Document Template.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:linkStyles.</para>
    /// </summary>
    public partial class LinkStyles : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the LinkStyles class.
        /// </summary>
        public LinkStyles() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:linkStyles");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkStyles>(deep);
    }

    /// <summary>
    /// <para>Track Revisions to Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trackRevisions.</para>
    /// </summary>
    public partial class TrackRevisions : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the TrackRevisions class.
        /// </summary>
        public TrackRevisions() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:trackRevisions");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TrackRevisions>(deep);
    }

    /// <summary>
    /// <para>Do Not Use Move Syntax When Tracking Revisions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotTrackMoves.</para>
    /// </summary>
    public partial class DoNotTrackMoves : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotTrackMoves class.
        /// </summary>
        public DoNotTrackMoves() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotTrackMoves");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotTrackMoves>(deep);
    }

    /// <summary>
    /// <para>Do Not Track Formatting Revisions When Tracking Revisions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotTrackFormatting.</para>
    /// </summary>
    public partial class DoNotTrackFormatting : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotTrackFormatting class.
        /// </summary>
        public DoNotTrackFormatting() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotTrackFormatting");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotTrackFormatting>(deep);
    }

    /// <summary>
    /// <para>Allow Automatic Formatting to Override Formatting Protection Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoFormatOverride.</para>
    /// </summary>
    public partial class AutoFormatOverride : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoFormatOverride class.
        /// </summary>
        public AutoFormatOverride() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoFormatOverride");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoFormatOverride>(deep);
    }

    /// <summary>
    /// <para>Prevent Modification of Themes Part.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styleLockTheme.</para>
    /// </summary>
    public partial class StyleLockThemesPart : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the StyleLockThemesPart class.
        /// </summary>
        public StyleLockThemesPart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:styleLockTheme");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleLockThemesPart>(deep);
    }

    /// <summary>
    /// <para>Prevent Replacement of Styles Part.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styleLockQFSet.</para>
    /// </summary>
    public partial class StyleLockStylesPart : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the StyleLockStylesPart class.
        /// </summary>
        public StyleLockStylesPart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:styleLockQFSet");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleLockStylesPart>(deep);
    }

    /// <summary>
    /// <para>Automatically Hyphenate Document Contents When Displayed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoHyphenation.</para>
    /// </summary>
    public partial class AutoHyphenation : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AutoHyphenation class.
        /// </summary>
        public AutoHyphenation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoHyphenation");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoHyphenation>(deep);
    }

    /// <summary>
    /// <para>Do Not Hyphenate Words in ALL CAPITAL LETTERS.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotHyphenateCaps.</para>
    /// </summary>
    public partial class DoNotHyphenateCaps : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotHyphenateCaps class.
        /// </summary>
        public DoNotHyphenateCaps() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotHyphenateCaps");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotHyphenateCaps>(deep);
    }

    /// <summary>
    /// <para>Show E-Mail Message Header.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showEnvelope.</para>
    /// </summary>
    public partial class ShowEnvelope : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowEnvelope class.
        /// </summary>
        public ShowEnvelope() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:showEnvelope");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowEnvelope>(deep);
    }

    /// <summary>
    /// <para>Different Even/Odd Page Headers and Footers.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:evenAndOddHeaders.</para>
    /// </summary>
    public partial class EvenAndOddHeaders : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the EvenAndOddHeaders class.
        /// </summary>
        public EvenAndOddHeaders() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:evenAndOddHeaders");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EvenAndOddHeaders>(deep);
    }

    /// <summary>
    /// <para>Reverse Book Fold Printing.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookFoldRevPrinting.</para>
    /// </summary>
    public partial class BookFoldReversePrinting : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BookFoldReversePrinting class.
        /// </summary>
        public BookFoldReversePrinting() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bookFoldRevPrinting");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookFoldReversePrinting>(deep);
    }

    /// <summary>
    /// <para>Book Fold Printing.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookFoldPrinting.</para>
    /// </summary>
    public partial class BookFoldPrinting : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the BookFoldPrinting class.
        /// </summary>
        public BookFoldPrinting() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bookFoldPrinting");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookFoldPrinting>(deep);
    }

    /// <summary>
    /// <para>Do Not Use Margins for Drawing Grid Origin.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseMarginsForDrawingGridOrigin.</para>
    /// </summary>
    public partial class DoNotUseMarginsForDrawingGridOrigin : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseMarginsForDrawingGridOrigin class.
        /// </summary>
        public DoNotUseMarginsForDrawingGridOrigin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotUseMarginsForDrawingGridOrigin");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseMarginsForDrawingGridOrigin>(deep);
    }

    /// <summary>
    /// <para>Do Not Show Visual Indicator For Form Fields.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotShadeFormData.</para>
    /// </summary>
    public partial class DoNotShadeFormData : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotShadeFormData class.
        /// </summary>
        public DoNotShadeFormData() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotShadeFormData");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotShadeFormData>(deep);
    }

    /// <summary>
    /// <para>Never Kern Punctuation Characters.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noPunctuationKerning.</para>
    /// </summary>
    public partial class NoPunctuationKerning : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NoPunctuationKerning class.
        /// </summary>
        public NoPunctuationKerning() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noPunctuationKerning");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoPunctuationKerning>(deep);
    }

    /// <summary>
    /// <para>Print Two Pages Per Sheet.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printTwoOnOne.</para>
    /// </summary>
    public partial class PrintTwoOnOne : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the PrintTwoOnOne class.
        /// </summary>
        public PrintTwoOnOne() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printTwoOnOne");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrintTwoOnOne>(deep);
    }

    /// <summary>
    /// <para>Use Strict Kinsoku Rules for Japanese Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:strictFirstAndLastChars.</para>
    /// </summary>
    public partial class StrictFirstAndLastChars : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the StrictFirstAndLastChars class.
        /// </summary>
        public StrictFirstAndLastChars() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:strictFirstAndLastChars");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StrictFirstAndLastChars>(deep);
    }

    /// <summary>
    /// <para>Generate Thumbnail For Document On Save.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:savePreviewPicture.</para>
    /// </summary>
    public partial class SavePreviewPicture : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SavePreviewPicture class.
        /// </summary>
        public SavePreviewPicture() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:savePreviewPicture");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SavePreviewPicture>(deep);
    }

    /// <summary>
    /// <para>Do Not Validate Custom XML Markup Against Schemas.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotValidateAgainstSchema.</para>
    /// </summary>
    public partial class DoNotValidateAgainstSchema : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotValidateAgainstSchema class.
        /// </summary>
        public DoNotValidateAgainstSchema() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotValidateAgainstSchema");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotValidateAgainstSchema>(deep);
    }

    /// <summary>
    /// <para>Allow Saving Document As XML File When Custom XML Markup Is Invalid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveInvalidXml.</para>
    /// </summary>
    public partial class SaveInvalidXml : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveInvalidXml class.
        /// </summary>
        public SaveInvalidXml() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:saveInvalidXml");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveInvalidXml>(deep);
    }

    /// <summary>
    /// <para>Ignore Mixed Content When Validating Custom XML Markup.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ignoreMixedContent.</para>
    /// </summary>
    public partial class IgnoreMixedContent : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the IgnoreMixedContent class.
        /// </summary>
        public IgnoreMixedContent() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ignoreMixedContent");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<IgnoreMixedContent>(deep);
    }

    /// <summary>
    /// <para>Use Custom XML Element Names as Default Placeholder Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alwaysShowPlaceholderText.</para>
    /// </summary>
    public partial class AlwaysShowPlaceholderText : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlwaysShowPlaceholderText class.
        /// </summary>
        public AlwaysShowPlaceholderText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:alwaysShowPlaceholderText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlwaysShowPlaceholderText>(deep);
    }

    /// <summary>
    /// <para>Do Not Show Visual Indicator For Invalid Custom XML Markup.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotDemarcateInvalidXml.</para>
    /// </summary>
    public partial class DoNotDemarcateInvalidXml : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotDemarcateInvalidXml class.
        /// </summary>
        public DoNotDemarcateInvalidXml() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotDemarcateInvalidXml");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotDemarcateInvalidXml>(deep);
    }

    /// <summary>
    /// <para>Only Save Custom XML Markup.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveXmlDataOnly.</para>
    /// </summary>
    public partial class SaveXmlDataOnly : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the SaveXmlDataOnly class.
        /// </summary>
        public SaveXmlDataOnly() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:saveXmlDataOnly");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveXmlDataOnly>(deep);
    }

    /// <summary>
    /// <para>Save Document as XML File through Custom XSL Transform.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:useXSLTWhenSaving.</para>
    /// </summary>
    public partial class UseXsltWhenSaving : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UseXsltWhenSaving class.
        /// </summary>
        public UseXsltWhenSaving() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:useXSLTWhenSaving");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UseXsltWhenSaving>(deep);
    }

    /// <summary>
    /// <para>Show Visual Indicators for Custom XML Markup Start/End Locations.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:showXMLTags.</para>
    /// </summary>
    public partial class ShowXmlTags : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the ShowXmlTags class.
        /// </summary>
        public ShowXmlTags() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:showXMLTags");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShowXmlTags>(deep);
    }

    /// <summary>
    /// <para>Do Not Mark Custom XML Elements With No Namespace As Invalid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:alwaysMergeEmptyNamespace.</para>
    /// </summary>
    public partial class AlwaysMergeEmptyNamespace : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AlwaysMergeEmptyNamespace class.
        /// </summary>
        public AlwaysMergeEmptyNamespace() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:alwaysMergeEmptyNamespace");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlwaysMergeEmptyNamespace>(deep);
    }

    /// <summary>
    /// <para>Automatically Recalculate Fields on Open.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:updateFields.</para>
    /// </summary>
    public partial class UpdateFieldsOnOpen : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UpdateFieldsOnOpen class.
        /// </summary>
        public UpdateFieldsOnOpen() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:updateFields");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UpdateFieldsOnOpen>(deep);
    }

    /// <summary>
    /// <para>Disable Features Incompatible With Earlier Word Processing Formats.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:uiCompat97To2003.</para>
    /// </summary>
    public partial class UICompatibleWith97To2003 : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the UICompatibleWith97To2003 class.
        /// </summary>
        public UICompatibleWith97To2003() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:uiCompat97To2003");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UICompatibleWith97To2003>(deep);
    }

    /// <summary>
    /// <para>Do Not Include Content in Text Boxes, Footnotes, and Endnotes in Document Statistics.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotIncludeSubdocsInStats.</para>
    /// </summary>
    public partial class DoNotIncludeSubdocsInStats : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotIncludeSubdocsInStats class.
        /// </summary>
        public DoNotIncludeSubdocsInStats() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotIncludeSubdocsInStats");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotIncludeSubdocsInStats>(deep);
    }

    /// <summary>
    /// <para>Do Not Automatically Compress Images.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotAutoCompressPictures.</para>
    /// </summary>
    public partial class DoNotAutoCompressPictures : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotAutoCompressPictures class.
        /// </summary>
        public DoNotAutoCompressPictures() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotAutoCompressPictures");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotAutoCompressPictures>(deep);
    }

    /// <summary>
    /// <para>Defines the OptimizeForBrowser Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:optimizeForBrowser.</para>
    /// </summary>
    public partial class OptimizeForBrowser : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the OptimizeForBrowser class.
        /// </summary>
        public OptimizeForBrowser() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:optimizeForBrowser");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OptimizeForBrowser>(deep);
    }

    /// <summary>
    /// <para>Defines the RelyOnVML Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:relyOnVML.</para>
    /// </summary>
    public partial class RelyOnVML : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the RelyOnVML class.
        /// </summary>
        public RelyOnVML() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:relyOnVML");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RelyOnVML>(deep);
    }

    /// <summary>
    /// <para>Defines the AllowPNG Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:allowPNG.</para>
    /// </summary>
    public partial class AllowPNG : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the AllowPNG class.
        /// </summary>
        public AllowPNG() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:allowPNG");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllowPNG>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotRelyOnCSS Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotRelyOnCSS.</para>
    /// </summary>
    public partial class DoNotRelyOnCSS : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotRelyOnCSS class.
        /// </summary>
        public DoNotRelyOnCSS() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotRelyOnCSS");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotRelyOnCSS>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotSaveAsSingleFile Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotSaveAsSingleFile.</para>
    /// </summary>
    public partial class DoNotSaveAsSingleFile : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotSaveAsSingleFile class.
        /// </summary>
        public DoNotSaveAsSingleFile() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotSaveAsSingleFile");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotSaveAsSingleFile>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotOrganizeInFolder Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotOrganizeInFolder.</para>
    /// </summary>
    public partial class DoNotOrganizeInFolder : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotOrganizeInFolder class.
        /// </summary>
        public DoNotOrganizeInFolder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotOrganizeInFolder");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotOrganizeInFolder>(deep);
    }

    /// <summary>
    /// <para>Defines the DoNotUseLongFileNames Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:doNotUseLongFileNames.</para>
    /// </summary>
    public partial class DoNotUseLongFileNames : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the DoNotUseLongFileNames class.
        /// </summary>
        public DoNotUseLongFileNames() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:doNotUseLongFileNames");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DoNotUseLongFileNames>(deep);
    }

    /// <summary>
    /// <para>Defines the NotTrueType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:notTrueType.</para>
    /// </summary>
    public partial class NotTrueType : OnOffType
    {
        /// <summary>
        /// Initializes a new instance of the NotTrueType class.
        /// </summary>
        public NotTrueType() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:notTrueType");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NotTrueType>(deep);
    }

    /// <summary>
    /// <para>Defines the OnOffType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class OnOffType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the OnOffType class.
        /// </summary>
        protected OnOffType() : base()
        {
        }

        /// <summary>
        /// <para>On/Off Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Val
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<OnOffType>()
                .AddAttribute("w:val", a => a.Val);
        }
    }

    /// <summary>
    /// <para>Defines the FrameProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:framePr.</para>
    /// </summary>
    public partial class FrameProperties : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FrameProperties class.
        /// </summary>
        public FrameProperties() : base()
        {
        }

        /// <summary>
        /// <para>Drop Cap Frame</para>
        /// <para>Represents the following attribute in the schema: w:dropCap</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DropCapLocationValues>? DropCap
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DropCapLocationValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Drop Cap Vertical Height in Lines</para>
        /// <para>Represents the following attribute in the schema: w:lines</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Lines
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Frame Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Width
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Frame Height</para>
        /// <para>Represents the following attribute in the schema: w:h</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Height
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Vertical Frame Padding</para>
        /// <para>Represents the following attribute in the schema: w:vSpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? VerticalSpace
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal Frame Padding</para>
        /// <para>Represents the following attribute in the schema: w:hSpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? HorizontalSpace
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text Wrapping Around Frame</para>
        /// <para>Represents the following attribute in the schema: w:wrap</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextWrappingValues>? Wrap
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextWrappingValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Frame Horizontal Positioning Base</para>
        /// <para>Represents the following attribute in the schema: w:hAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAnchorValues>? HorizontalPosition
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAnchorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Frame Vertical Positioning Base</para>
        /// <para>Represents the following attribute in the schema: w:vAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAnchorValues>? VerticalPosition
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAnchorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Absolute Horizontal Position</para>
        /// <para>Represents the following attribute in the schema: w:x</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? X
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Relative Horizontal Position</para>
        /// <para>Represents the following attribute in the schema: w:xAlign</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAlignmentValues>? XAlign
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Absolute Vertical Position</para>
        /// <para>Represents the following attribute in the schema: w:y</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Y
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Relative Vertical Position</para>
        /// <para>Represents the following attribute in the schema: w:yAlign</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAlignmentValues>? YAlign
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Frame Height Type</para>
        /// <para>Represents the following attribute in the schema: w:hRule</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeightRuleValues>? HeightType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeightRuleValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Lock Frame Anchor to Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:anchorLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? AnchorLock
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:framePr");
            builder.AddElement<FrameProperties>()
                .AddAttribute("w:dropCap", a => a.DropCap)
                .AddAttribute("w:lines", a => a.Lines, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (10L) });
                })
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:h", a => a.Height, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:vSpace", a => a.VerticalSpace, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:hSpace", a => a.HorizontalSpace, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:wrap", a => a.Wrap)
                .AddAttribute("w:hAnchor", a => a.HorizontalPosition)
                .AddAttribute("w:vAnchor", a => a.VerticalPosition)
                .AddAttribute("w:x", a => a.X, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:xAlign", a => a.XAlign)
                .AddAttribute("w:y", a => a.Y, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:yAlign", a => a.YAlign)
                .AddAttribute("w:hRule", a => a.HeightType)
                .AddAttribute("w:anchorLock", a => a.AnchorLock);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the NumberingProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingId" /> <c>&lt;w:numId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingLevelReference" /> <c>&lt;w:ilvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Inserted" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingChange" /> <c>&lt;w:numberingChange></c></description></item>
    /// </list>
    /// </remark>
    public partial class NumberingProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingProperties class.
        /// </summary>
        public NumberingProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingLevelReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingChange>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingLevelReference), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingChange), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1)
            };
        }

        /// <summary>
        /// <para>Numbering Level Reference.</para>
        /// <para>Represents the following element tag in the schema: w:ilvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingLevelReference? NumberingLevelReference
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingLevelReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Definition Instance Reference.</para>
        /// <para>Represents the following element tag in the schema: w:numId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingId? NumberingId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Previous Paragraph Numbering Properties.</para>
        /// <para>Represents the following element tag in the schema: w:numberingChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingChange? NumberingChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingChange>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inserted Numbering Properties.</para>
        /// <para>Represents the following element tag in the schema: w:ins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Inserted? Inserted
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the ParagraphBorders Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pBdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopBorder" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftBorder" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomBorder" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightBorder" /> <c>&lt;w:right></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BetweenBorder" /> <c>&lt;w:between></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BarBorder" /> <c>&lt;w:bar></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class.
        /// </summary>
        public ParagraphBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphBorders(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pBdr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BetweenBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BarBorder>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BetweenBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BarBorder), 0, 1)
            };
        }

        /// <summary>
        /// <para>Paragraph Border Above Identical Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopBorder? TopBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Paragraph Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftBorder? LeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Border Between Identical Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomBorder? BottomBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Paragraph Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightBorder? RightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Border Between Identical Paragraphs.</para>
        /// <para>Represents the following element tag in the schema: w:between.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BetweenBorder? BetweenBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BetweenBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Border Between Facing Pages.</para>
        /// <para>Represents the following element tag in the schema: w:bar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BarBorder? BarBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BarBorder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the Shading Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shd.</para>
    /// </summary>
    public partial class Shading : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Shading class.
        /// </summary>
        public Shading() : base()
        {
        }

        /// <summary>
        /// <para>Shading Pattern</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ShadingPatternValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ShadingPatternValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Pattern Color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Color
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Pattern Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>? ThemeColor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Pattern Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeTint
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Pattern Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeShade
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Background Color</para>
        /// <para>Represents the following attribute in the schema: w:fill</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Fill
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Background Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeFill</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>? ThemeFill
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Background Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeFillTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeFillTint
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Shading Background Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeFillShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeFillShade
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:shd");
            builder.AddElement<Shading>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:color", a => a.Color, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>>(EnumValidator.Instance);
                        union.AddValidator<HexBinaryValue>(new StringValidator() { Length = (3L) });
                    });
                })
                .AddAttribute("w:themeColor", a => a.ThemeColor)
                .AddAttribute("w:themeTint", a => a.ThemeTint, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:themeShade", a => a.ThemeShade, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:fill", a => a.Fill, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>>(EnumValidator.Instance);
                        union.AddValidator<HexBinaryValue>(new StringValidator() { Length = (3L) });
                    });
                })
                .AddAttribute("w:themeFill", a => a.ThemeFill)
                .AddAttribute("w:themeFillTint", a => a.ThemeFillTint, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:themeFillShade", a => a.ThemeFillShade, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Shading>(deep);
    }

    /// <summary>
    /// <para>Defines the Tabs Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tabs.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TabStop" /> <c>&lt;w:tab></c></description></item>
    /// </list>
    /// </remark>
    public partial class Tabs : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Tabs class.
        /// </summary>
        public Tabs() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tabs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Tabs(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tabs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Tabs(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tabs class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Tabs(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tabs");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TabStop>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TabStop), 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tabs>(deep);
    }

    /// <summary>
    /// <para>Defines the SpacingBetweenLines Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spacing.</para>
    /// </summary>
    public partial class SpacingBetweenLines : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SpacingBetweenLines class.
        /// </summary>
        public SpacingBetweenLines() : base()
        {
        }

        /// <summary>
        /// <para>Spacing Above Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:before</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Before
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing Above Paragraph IN Line Units</para>
        /// <para>Represents the following attribute in the schema: w:beforeLines</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? BeforeLines
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Automatically Determine Spacing Above Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:beforeAutospacing</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? BeforeAutoSpacing
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing Below Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:after</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? After
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing Below Paragraph in Line Units</para>
        /// <para>Represents the following attribute in the schema: w:afterLines</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? AfterLines
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Automatically Determine Spacing Below Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:afterAutospacing</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? AfterAutoSpacing
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing Between Lines in Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:line</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Line
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Type of Spacing Between Lines</para>
        /// <para>Represents the following attribute in the schema: w:lineRule</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LineSpacingRuleValues>? LineRule
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.LineSpacingRuleValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:spacing");
            builder.AddElement<SpacingBetweenLines>()
                .AddAttribute("w:before", a => a.Before, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:beforeLines", a => a.BeforeLines)
                .AddAttribute("w:beforeAutospacing", a => a.BeforeAutoSpacing)
                .AddAttribute("w:after", a => a.After, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:afterLines", a => a.AfterLines)
                .AddAttribute("w:afterAutospacing", a => a.AfterAutoSpacing)
                .AddAttribute("w:line", a => a.Line, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:lineRule", a => a.LineRule);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SpacingBetweenLines>(deep);
    }

    /// <summary>
    /// <para>Defines the Indentation Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ind.</para>
    /// </summary>
    public partial class Indentation : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Indentation class.
        /// </summary>
        public Indentation() : base()
        {
        }

        /// <summary>
        /// <para>Left Indentation</para>
        /// <para>Represents the following attribute in the schema: w:left</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Left
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>start, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:start</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Start
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Left Indentation in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:leftChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? LeftChars
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>startChars, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:startChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? StartCharacters
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Indentation</para>
        /// <para>Represents the following attribute in the schema: w:right</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Right
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>end, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:end</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? End
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Indentation in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:rightChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? RightChars
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>endChars, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:endChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? EndCharacters
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Indentation Removed from First Line</para>
        /// <para>Represents the following attribute in the schema: w:hanging</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Hanging
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Indentation Removed From First Line in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:hangingChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? HangingChars
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Additional First Line Indentation</para>
        /// <para>Represents the following attribute in the schema: w:firstLine</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? FirstLine
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Additional First Line Indentation in Character Units</para>
        /// <para>Represents the following attribute in the schema: w:firstLineChars</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? FirstLineChars
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ind");
            builder.AddElement<Indentation>()
                .AddAttribute("w:left", a => a.Left, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:start", a => a.Start, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:leftChars", a => a.LeftChars)
                .AddAttribute("w:startChars", a => a.StartCharacters, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:right", a => a.Right, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:end", a => a.End, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:rightChars", a => a.RightChars)
                .AddAttribute("w:endChars", a => a.EndCharacters, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:hanging", a => a.Hanging, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:hangingChars", a => a.HangingChars)
                .AddAttribute("w:firstLine", a => a.FirstLine, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:firstLineChars", a => a.FirstLineChars);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Indentation>(deep);
    }

    /// <summary>
    /// <para>Defines the Justification Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:jc.</para>
    /// </summary>
    public partial class Justification : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Justification class.
        /// </summary>
        public Justification() : base()
        {
        }

        /// <summary>
        /// <para>Alignment Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.JustificationValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.JustificationValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:jc");
            builder.AddElement<Justification>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Justification>(deep);
    }

    /// <summary>
    /// <para>Defines the TextDirection Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textDirection.</para>
    /// </summary>
    public partial class TextDirection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextDirection class.
        /// </summary>
        public TextDirection() : base()
        {
        }

        /// <summary>
        /// <para>Direction of Text Flow</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:textDirection");
            builder.AddElement<TextDirection>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextDirection>(deep);
    }

    /// <summary>
    /// <para>Defines the TextAlignment Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textAlignment.</para>
    /// </summary>
    public partial class TextAlignment : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextAlignment class.
        /// </summary>
        public TextAlignment() : base()
        {
        }

        /// <summary>
        /// <para>Vertical Character Alignment Position</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:textAlignment");
            builder.AddElement<TextAlignment>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextAlignment>(deep);
    }

    /// <summary>
    /// <para>Defines the TextBoxTightWrap Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textboxTightWrap.</para>
    /// </summary>
    public partial class TextBoxTightWrap : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBoxTightWrap class.
        /// </summary>
        public TextBoxTightWrap() : base()
        {
        }

        /// <summary>
        /// <para>Lines to Tight Wrap to Paragraph Extents</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrapValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrapValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:textboxTightWrap");
            builder.AddElement<TextBoxTightWrap>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBoxTightWrap>(deep);
    }

    /// <summary>
    /// <para>Defines the OutlineLevel Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:outlineLvl.</para>
    /// </summary>
    public partial class OutlineLevel : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the OutlineLevel class.
        /// </summary>
        public OutlineLevel() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:outlineLvl");
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("w:val"), true, 0, true, 9, true));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<OutlineLevel>(deep);
    }

    /// <summary>
    /// <para>Defines the GridSpan Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridSpan.</para>
    /// </summary>
    public partial class GridSpan : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the GridSpan class.
        /// </summary>
        public GridSpan() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:gridSpan");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridSpan>(deep);
    }

    /// <summary>
    /// <para>Defines the GridBefore Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridBefore.</para>
    /// </summary>
    public partial class GridBefore : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the GridBefore class.
        /// </summary>
        public GridBefore() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:gridBefore");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridBefore>(deep);
    }

    /// <summary>
    /// <para>Defines the GridAfter Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridAfter.</para>
    /// </summary>
    public partial class GridAfter : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the GridAfter class.
        /// </summary>
        public GridAfter() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:gridAfter");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridAfter>(deep);
    }

    /// <summary>
    /// <para>Drop-Down List Selection.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:result.</para>
    /// </summary>
    public partial class DropDownListSelection : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the DropDownListSelection class.
        /// </summary>
        public DropDownListSelection() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:result");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DropDownListSelection>(deep);
    }

    /// <summary>
    /// <para>Record Currently Displayed In Merged Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:activeRecord.</para>
    /// </summary>
    public partial class ActiveRecord : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the ActiveRecord class.
        /// </summary>
        public ActiveRecord() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:activeRecord");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ActiveRecord>(deep);
    }

    /// <summary>
    /// <para>Mail Merge Error Reporting Setting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:checkErrors.</para>
    /// </summary>
    public partial class CheckErrors : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the CheckErrors class.
        /// </summary>
        public CheckErrors() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:checkErrors");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CheckErrors>(deep);
    }

    /// <summary>
    /// <para>Restart Numbering Level Symbol.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlRestart.</para>
    /// </summary>
    public partial class LevelRestart : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the LevelRestart class.
        /// </summary>
        public LevelRestart() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lvlRestart");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelRestart>(deep);
    }

    /// <summary>
    /// <para>Picture Numbering Symbol Definition Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlPicBulletId.</para>
    /// </summary>
    public partial class LevelPictureBulletId : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the LevelPictureBulletId class.
        /// </summary>
        public LevelPictureBulletId() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lvlPicBulletId");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelPictureBulletId>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Starting Value Override.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:startOverride.</para>
    /// </summary>
    public partial class StartOverrideNumberingValue : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the StartOverrideNumberingValue class.
        /// </summary>
        public StartOverrideNumberingValue() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:startOverride");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartOverrideNumberingValue>(deep);
    }

    /// <summary>
    /// <para>Last Reviewed Abstract Numbering Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numIdMacAtCleanup.</para>
    /// </summary>
    public partial class NumberingIdMacAtCleanup : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the NumberingIdMacAtCleanup class.
        /// </summary>
        public NumberingIdMacAtCleanup() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numIdMacAtCleanup");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingIdMacAtCleanup>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtId Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:id.</para>
    /// </summary>
    public partial class SdtId : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the SdtId class.
        /// </summary>
        public SdtId() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:id");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtId>(deep);
    }

    /// <summary>
    /// <para>Defines the PixelsPerInch Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pixelsPerInch.</para>
    /// </summary>
    public partial class PixelsPerInch : DecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the PixelsPerInch class.
        /// </summary>
        public PixelsPerInch() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pixelsPerInch");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PixelsPerInch>(deep);
    }

    /// <summary>
    /// <para>Defines the DecimalNumberType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class DecimalNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DecimalNumberType class.
        /// </summary>
        protected DecimalNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Decimal Number Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<DecimalNumberType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Defines the ParagraphPropertiesChange Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesExtended" /> <c>&lt;w:pPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class.
        /// </summary>
        public ParagraphPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesExtended>();
            builder.AddElement<ParagraphPropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesExtended), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesExtended? ParagraphPropertiesExtended
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesExtended>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Header Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:headerReference.</para>
    /// </summary>
    public partial class HeaderReference : HeaderFooterReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the HeaderReference class.
        /// </summary>
        public HeaderReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:headerReference");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("r:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header"));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderReference>(deep);
    }

    /// <summary>
    /// <para>Footer Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footerReference.</para>
    /// </summary>
    public partial class FooterReference : HeaderFooterReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FooterReference class.
        /// </summary>
        public FooterReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footerReference");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("r:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer"));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FooterReference>(deep);
    }

    /// <summary>
    /// <para>Defines the HeaderFooterReferenceType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class HeaderFooterReferenceType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HeaderFooterReferenceType class.
        /// </summary>
        protected HeaderFooterReferenceType() : base()
        {
        }

        /// <summary>
        /// <para>type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeaderFooterValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeaderFooterValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<HeaderFooterReferenceType>()
                .AddAttribute("w:type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Break.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:br.</para>
    /// </summary>
    public partial class Break : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Break class.
        /// </summary>
        public Break() : base()
        {
        }

        /// <summary>
        /// <para>Break Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.BreakValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.BreakValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Restart Location For Text Wrapping Break</para>
        /// <para>Represents the following attribute in the schema: w:clear</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues>? Clear
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:br");
            builder.AddElement<Break>()
                .AddAttribute("w:type", a => a.Type)
                .AddAttribute("w:clear", a => a.Clear);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Break>(deep);
    }

    /// <summary>
    /// <para>Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:t.</para>
    /// </summary>
    public partial class Text : TextType
    {
        /// <summary>
        /// Initializes a new instance of the Text class.
        /// </summary>
        public Text() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Text class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Text(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:t");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Text>(deep);
    }

    /// <summary>
    /// <para>Deleted Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:delText.</para>
    /// </summary>
    public partial class DeletedText : TextType
    {
        /// <summary>
        /// Initializes a new instance of the DeletedText class.
        /// </summary>
        public DeletedText() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedText class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DeletedText(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:delText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedText>(deep);
    }

    /// <summary>
    /// <para>Field Code.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:instrText.</para>
    /// </summary>
    public partial class FieldCode : TextType
    {
        /// <summary>
        /// Initializes a new instance of the FieldCode class.
        /// </summary>
        public FieldCode() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldCode class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public FieldCode(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:instrText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldCode>(deep);
    }

    /// <summary>
    /// <para>Deleted Field Code.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:delInstrText.</para>
    /// </summary>
    public partial class DeletedFieldCode : TextType
    {
        /// <summary>
        /// Initializes a new instance of the DeletedFieldCode class.
        /// </summary>
        public DeletedFieldCode() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedFieldCode class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DeletedFieldCode(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:delInstrText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedFieldCode>(deep);
    }

    /// <summary>
    /// <para>Defines the TextType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TextType : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the TextType class.
        /// </summary>
        protected TextType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        protected TextType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        /// <summary>
        /// <para>space</para>
        /// <para>Represents the following attribute in the schema: xml:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:xml=http://www.w3.org/XML/1998/namespace
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.SpaceProcessingModeValues>? Space
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.SpaceProcessingModeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TextType>()
                .AddAttribute("xml:space", a => a.Space);
        }
    }

    /// <summary>
    /// <para>Non Breaking Hyphen Character.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noBreakHyphen.</para>
    /// </summary>
    public partial class NoBreakHyphen : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the NoBreakHyphen class.
        /// </summary>
        public NoBreakHyphen() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noBreakHyphen");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBreakHyphen>(deep);
    }

    /// <summary>
    /// <para>Optional Hyphen Character.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:softHyphen.</para>
    /// </summary>
    public partial class SoftHyphen : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SoftHyphen class.
        /// </summary>
        public SoftHyphen() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:softHyphen");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SoftHyphen>(deep);
    }

    /// <summary>
    /// <para>Date Block - Short Day Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dayShort.</para>
    /// </summary>
    public partial class DayShort : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the DayShort class.
        /// </summary>
        public DayShort() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dayShort");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DayShort>(deep);
    }

    /// <summary>
    /// <para>Date Block - Short Month Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:monthShort.</para>
    /// </summary>
    public partial class MonthShort : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the MonthShort class.
        /// </summary>
        public MonthShort() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:monthShort");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MonthShort>(deep);
    }

    /// <summary>
    /// <para>Date Block - Short Year Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:yearShort.</para>
    /// </summary>
    public partial class YearShort : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the YearShort class.
        /// </summary>
        public YearShort() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:yearShort");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<YearShort>(deep);
    }

    /// <summary>
    /// <para>Date Block - Long Day Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dayLong.</para>
    /// </summary>
    public partial class DayLong : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the DayLong class.
        /// </summary>
        public DayLong() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dayLong");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DayLong>(deep);
    }

    /// <summary>
    /// <para>Date Block - Long Month Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:monthLong.</para>
    /// </summary>
    public partial class MonthLong : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the MonthLong class.
        /// </summary>
        public MonthLong() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:monthLong");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MonthLong>(deep);
    }

    /// <summary>
    /// <para>Date Block - Long Year Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:yearLong.</para>
    /// </summary>
    public partial class YearLong : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the YearLong class.
        /// </summary>
        public YearLong() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:yearLong");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<YearLong>(deep);
    }

    /// <summary>
    /// <para>Comment Information Block.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:annotationRef.</para>
    /// </summary>
    public partial class AnnotationReferenceMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the AnnotationReferenceMark class.
        /// </summary>
        public AnnotationReferenceMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:annotationRef");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AnnotationReferenceMark>(deep);
    }

    /// <summary>
    /// <para>Footnote Reference Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnoteRef.</para>
    /// </summary>
    public partial class FootnoteReferenceMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteReferenceMark class.
        /// </summary>
        public FootnoteReferenceMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnoteRef");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteReferenceMark>(deep);
    }

    /// <summary>
    /// <para>Endnote Reference Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnoteRef.</para>
    /// </summary>
    public partial class EndnoteReferenceMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteReferenceMark class.
        /// </summary>
        public EndnoteReferenceMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnoteRef");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteReferenceMark>(deep);
    }

    /// <summary>
    /// <para>Footnote/Endnote Separator Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:separator.</para>
    /// </summary>
    public partial class SeparatorMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SeparatorMark class.
        /// </summary>
        public SeparatorMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:separator");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SeparatorMark>(deep);
    }

    /// <summary>
    /// <para>Continuation Separator Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:continuationSeparator.</para>
    /// </summary>
    public partial class ContinuationSeparatorMark : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the ContinuationSeparatorMark class.
        /// </summary>
        public ContinuationSeparatorMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:continuationSeparator");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContinuationSeparatorMark>(deep);
    }

    /// <summary>
    /// <para>Page Number Block.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgNum.</para>
    /// </summary>
    public partial class PageNumber : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the PageNumber class.
        /// </summary>
        public PageNumber() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pgNum");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageNumber>(deep);
    }

    /// <summary>
    /// <para>Carriage Return.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cr.</para>
    /// </summary>
    public partial class CarriageReturn : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the CarriageReturn class.
        /// </summary>
        public CarriageReturn() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cr");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CarriageReturn>(deep);
    }

    /// <summary>
    /// <para>Tab Character.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tab.</para>
    /// </summary>
    public partial class TabChar : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the TabChar class.
        /// </summary>
        public TabChar() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tab");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabChar>(deep);
    }

    /// <summary>
    /// <para>Position of Last Calculated Page Break.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lastRenderedPageBreak.</para>
    /// </summary>
    public partial class LastRenderedPageBreak : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the LastRenderedPageBreak class.
        /// </summary>
        public LastRenderedPageBreak() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lastRenderedPageBreak");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LastRenderedPageBreak>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentEquation Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:equation.</para>
    /// </summary>
    public partial class SdtContentEquation : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentEquation class.
        /// </summary>
        public SdtContentEquation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:equation");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentEquation>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentPicture Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:picture.</para>
    /// </summary>
    public partial class SdtContentPicture : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentPicture class.
        /// </summary>
        public SdtContentPicture() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:picture");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentPicture>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentRichText Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:richText.</para>
    /// </summary>
    public partial class SdtContentRichText : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRichText class.
        /// </summary>
        public SdtContentRichText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:richText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRichText>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentCitation Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:citation.</para>
    /// </summary>
    public partial class SdtContentCitation : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentCitation class.
        /// </summary>
        public SdtContentCitation() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:citation");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentCitation>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentGroup Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:group.</para>
    /// </summary>
    public partial class SdtContentGroup : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentGroup class.
        /// </summary>
        public SdtContentGroup() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:group");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentGroup>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentBibliography Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bibliography.</para>
    /// </summary>
    public partial class SdtContentBibliography : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentBibliography class.
        /// </summary>
        public SdtContentBibliography() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bibliography");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentBibliography>(deep);
    }

    /// <summary>
    /// <para>Upgrade Document on Open.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:forceUpgrade.</para>
    /// </summary>
    public partial class ForceUpgrade : EmptyType
    {
        /// <summary>
        /// Initializes a new instance of the ForceUpgrade class.
        /// </summary>
        public ForceUpgrade() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:forceUpgrade");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ForceUpgrade>(deep);
    }

    /// <summary>
    /// <para>Defines the EmptyType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class EmptyType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EmptyType class.
        /// </summary>
        protected EmptyType() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
        }
    }

    /// <summary>
    /// <para>Symbol Character.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sym.</para>
    /// </summary>
    public partial class SymbolChar : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SymbolChar class.
        /// </summary>
        public SymbolChar() : base()
        {
        }

        /// <summary>
        /// <para>Symbol Character Font</para>
        /// <para>Represents the following attribute in the schema: w:font</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Font
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Symbol Character Code</para>
        /// <para>Represents the following attribute in the schema: w:char</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? Char
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sym");
            builder.AddElement<SymbolChar>()
                .AddAttribute("w:font", a => a.Font, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (31L) });
                })
                .AddAttribute("w:char", a => a.Char, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SymbolChar>(deep);
    }

    /// <summary>
    /// <para>Inline Embedded Object.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:object.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.OleObject" /> <c>&lt;o:OLEObject></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Arc" /> <c>&lt;v:arc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Curve" /> <c>&lt;v:curve></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Group" /> <c>&lt;v:group></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.ImageFile" /> <c>&lt;v:image></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Line" /> <c>&lt;v:line></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Oval" /> <c>&lt;v:oval></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.PolyLine" /> <c>&lt;v:polyline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Rectangle" /> <c>&lt;v:rect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.RoundRectangle" /> <c>&lt;v:roundrect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shape" /> <c>&lt;v:shape></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shapetype" /> <c>&lt;v:shapetype></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Control" /> <c>&lt;w:control></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Drawing" /> <c>&lt;w:drawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ObjectEmbed" /> <c>&lt;w:objectEmbed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ObjectLink" /> <c>&lt;w:objectLink></c></description></item>
    /// </list>
    /// </remark>
    public partial class EmbeddedObject : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class.
        /// </summary>
        public EmbeddedObject() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EmbeddedObject(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EmbeddedObject(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EmbeddedObject class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EmbeddedObject(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>dxaOrig</para>
        /// <para>Represents the following attribute in the schema: w:dxaOrig</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? DxaOriginal
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dyaOrig</para>
        /// <para>Represents the following attribute in the schema: w:dyaOrig</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? DyaOriginal
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>anchorId, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:anchorId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public HexBinaryValue? AnchorId
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:object");
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.OleObject>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Arc>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Curve>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Group>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageFile>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Line>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Oval>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.PolyLine>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Rectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.RoundRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shapetype>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Control>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Drawing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ObjectEmbed>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ObjectLink>();
            builder.AddElement<EmbeddedObject>()
                .AddAttribute("w:dxaOrig", a => a.DxaOriginal)
                .AddAttribute("w:dyaOrig", a => a.DyaOriginal)
                .AddAttribute("w14:anchorId", a => a.AnchorId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Group), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.ImageFile), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Line), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Oval), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.PolyLine), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Rectangle), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shape), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shapetype), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Arc), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Curve), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject), 1, 1)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Drawing), 0, 1),
                    new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Control), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ObjectEmbed), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ObjectLink), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbeddedObject>(deep);
    }

    /// <summary>
    /// <para>VML Object.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pict.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.OleObject" /> <c>&lt;o:OLEObject></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Arc" /> <c>&lt;v:arc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Curve" /> <c>&lt;v:curve></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Group" /> <c>&lt;v:group></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.ImageFile" /> <c>&lt;v:image></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Line" /> <c>&lt;v:line></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Oval" /> <c>&lt;v:oval></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.PolyLine" /> <c>&lt;v:polyline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Rectangle" /> <c>&lt;v:rect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.RoundRectangle" /> <c>&lt;v:roundrect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shape" /> <c>&lt;v:shape></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shapetype" /> <c>&lt;v:shapetype></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Control" /> <c>&lt;w:control></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MovieReference" /> <c>&lt;w:movie></c></description></item>
    /// </list>
    /// </remark>
    public partial class Picture : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Picture class.
        /// </summary>
        public Picture() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Picture(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Picture class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Picture(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>anchorId, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:anchorId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public HexBinaryValue? AnchorId
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pict");
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.OleObject>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Arc>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Curve>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Group>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageFile>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Line>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Oval>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.PolyLine>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Rectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.RoundRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shapetype>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Control>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MovieReference>();
            builder.AddElement<Picture>()
                .AddAttribute("w14:anchorId", a => a.AnchorId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Group), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.ImageFile), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Line), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Oval), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.PolyLine), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Rectangle), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shape), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shapetype), 1, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Arc), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Curve), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.OleObject), 1, 1)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MovieReference), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Control), 0, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Picture>(deep);
    }

    /// <summary>
    /// <para>Complex Field Character.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldChar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FieldData" /> <c>&lt;w:fldData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FormFieldData" /> <c>&lt;w:ffData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingChange" /> <c>&lt;w:numberingChange></c></description></item>
    /// </list>
    /// </remark>
    public partial class FieldChar : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FieldChar class.
        /// </summary>
        public FieldChar() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldChar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldChar(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldChar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldChar(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldChar class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FieldChar(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Field Character Type</para>
        /// <para>Represents the following attribute in the schema: w:fldCharType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FieldCharValues>? FieldCharType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FieldCharValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field Should Not Be Recalculated</para>
        /// <para>Represents the following attribute in the schema: w:fldLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FieldLock
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field Result Invalidated</para>
        /// <para>Represents the following attribute in the schema: w:dirty</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Dirty
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fldChar");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FieldData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FormFieldData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingChange>();
            builder.AddElement<FieldChar>()
                .AddAttribute("w:fldCharType", a => a.FieldCharType, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:fldLock", a => a.FieldLock)
                .AddAttribute("w:dirty", a => a.Dirty);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormFieldData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingChange), 0, 1)
            };
        }

        /// <summary>
        /// <para>Custom Field Data.</para>
        /// <para>Represents the following element tag in the schema: w:fldData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FieldData? FieldData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FieldData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Form Field Properties.</para>
        /// <para>Represents the following element tag in the schema: w:ffData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FormFieldData? FormFieldData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FormFieldData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Previous Numbering Field Properties.</para>
        /// <para>Represents the following element tag in the schema: w:numberingChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingChange? NumberingChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldChar>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ruby.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RubyContent" /> <c>&lt;w:rt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RubyBase" /> <c>&lt;w:rubyBase></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RubyProperties" /> <c>&lt;w:rubyPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class Ruby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Ruby class.
        /// </summary>
        public Ruby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Ruby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Ruby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Ruby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Ruby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Ruby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Ruby(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ruby");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RubyContent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RubyBase>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RubyProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyContent), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyBase), 1, 1)
            };
        }

        /// <summary>
        /// <para>Phonetic Guide Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rubyPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RubyProperties? RubyProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RubyProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Text.</para>
        /// <para>Represents the following element tag in the schema: w:rt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RubyContent? RubyContent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RubyContent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Base Text.</para>
        /// <para>Represents the following element tag in the schema: w:rubyBase.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RubyBase? RubyBase
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RubyBase>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Ruby>(deep);
    }

    /// <summary>
    /// <para>Footnote Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnoteReference.</para>
    /// </summary>
    public partial class FootnoteReference : FootnoteEndnoteReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteReference class.
        /// </summary>
        public FootnoteReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnoteReference");
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "FootnotesPart", builder.CreateQName("w:footnote"), "w:footnote", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteReference>(deep);
    }

    /// <summary>
    /// <para>Endnote Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnoteReference.</para>
    /// </summary>
    public partial class EndnoteReference : FootnoteEndnoteReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteReference class.
        /// </summary>
        public EndnoteReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnoteReference");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteReference>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteEndnoteReferenceType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class FootnoteEndnoteReferenceType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteReferenceType class.
        /// </summary>
        protected FootnoteEndnoteReferenceType() : base()
        {
        }

        /// <summary>
        /// <para>Suppress Footnote/Endnote Reference Mark</para>
        /// <para>Represents the following attribute in the schema: w:customMarkFollows</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? CustomMarkFollows
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Footnote/Endnote ID Reference</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public IntegerValue? Id
        {
            get => GetAttribute<IntegerValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<FootnoteEndnoteReferenceType>()
                .AddAttribute("w:customMarkFollows", a => a.CustomMarkFollows)
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-2147483648L), MaxInclusive = (32767L) });
                });
        }
    }

    /// <summary>
    /// <para>DrawingML Object.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawing.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor" /> <c>&lt;wp:anchor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline" /> <c>&lt;wp:inline></c></description></item>
    /// </list>
    /// </remark>
    public partial class Drawing : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Drawing class.
        /// </summary>
        public Drawing() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Drawing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Drawing(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Drawing class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Drawing(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Drawing class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Drawing(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:drawing");
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor>();
            builder.AddChild<DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline), 1, 1)
            };
        }

        /// <summary>
        /// <para>Drawing Element Anchor.</para>
        /// <para>Represents the following element tag in the schema: wp:anchor.</para>
        /// </summary>
        /// <remark>
        /// xmlns:wp = http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing
        /// </remark>
        public DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor? Anchor
        {
            get => GetElement<DocumentFormat.OpenXml.Drawing.Wordprocessing.Anchor>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Inline Drawing Object.</para>
        /// <para>Represents the following element tag in the schema: wp:inline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:wp = http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing
        /// </remark>
        public DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline? Inline
        {
            get => GetElement<DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Drawing>(deep);
    }

    /// <summary>
    /// <para>Absolute Position Tab Character.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ptab.</para>
    /// </summary>
    public partial class PositionalTab : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PositionalTab class.
        /// </summary>
        public PositionalTab() : base()
        {
        }

        /// <summary>
        /// <para>Positional Tab Stop Alignment</para>
        /// <para>Represents the following attribute in the schema: w:alignment</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabAlignmentValues>? Alignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Positional Tab Base</para>
        /// <para>Represents the following attribute in the schema: w:relativeTo</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabPositioningBaseValues>? RelativeTo
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabPositioningBaseValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tab Leader Character</para>
        /// <para>Represents the following attribute in the schema: w:leader</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabLeaderCharValues>? Leader
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AbsolutePositionTabLeaderCharValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ptab");
            builder.AddElement<PositionalTab>()
                .AddAttribute("w:alignment", a => a.Alignment, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:relativeTo", a => a.RelativeTo, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:leader", a => a.Leader, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PositionalTab>(deep);
    }

    /// <summary>
    /// <para>Defines the RunStyle Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rStyle.</para>
    /// </summary>
    public partial class RunStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the RunStyle class.
        /// </summary>
        public RunStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rStyle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunStyle>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyle Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStyle.</para>
    /// </summary>
    public partial class TableStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the TableStyle class.
        /// </summary>
        public TableStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblStyle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyle>(deep);
    }

    /// <summary>
    /// <para>Paragraph Style's Associated Numbering Level.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pStyle.</para>
    /// </summary>
    public partial class ParagraphStyleIdInLevel : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphStyleIdInLevel class.
        /// </summary>
        public ParagraphStyleIdInLevel() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pStyle");
            builder.AddConstraint(new AttributeValueLengthConstraint(builder.CreateQName("w:val"), 0, 253) { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphStyleIdInLevel>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    public partial class AbstractNumDefinitionName : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the AbstractNumDefinitionName class.
        /// </summary>
        public AbstractNumDefinitionName() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:name");
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @"[^,]*") { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbstractNumDefinitionName>(deep);
    }

    /// <summary>
    /// <para>Numbering Style Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styleLink.</para>
    /// </summary>
    public partial class StyleLink : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the StyleLink class.
        /// </summary>
        public StyleLink() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:styleLink");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleLink>(deep);
    }

    /// <summary>
    /// <para>Numbering Style Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numStyleLink.</para>
    /// </summary>
    public partial class NumberingStyleLink : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the NumberingStyleLink class.
        /// </summary>
        public NumberingStyleLink() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numStyleLink");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingStyleLink>(deep);
    }

    /// <summary>
    /// <para>Alternate Style Names.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:aliases.</para>
    /// </summary>
    public partial class Aliases : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the Aliases class.
        /// </summary>
        public Aliases() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:aliases");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Aliases>(deep);
    }

    /// <summary>
    /// <para>Parent Style ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:basedOn.</para>
    /// </summary>
    public partial class BasedOn : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the BasedOn class.
        /// </summary>
        public BasedOn() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:basedOn");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BasedOn>(deep);
    }

    /// <summary>
    /// <para>Style For Next Paragraph.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:next.</para>
    /// </summary>
    public partial class NextParagraphStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the NextParagraphStyle class.
        /// </summary>
        public NextParagraphStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:next");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NextParagraphStyle>(deep);
    }

    /// <summary>
    /// <para>Linked Style Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:link.</para>
    /// </summary>
    public partial class LinkedStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the LinkedStyle class.
        /// </summary>
        public LinkedStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:link");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkedStyle>(deep);
    }

    /// <summary>
    /// <para>Paragraph Style Applied to Automatically Generated Paragraphs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:clickAndTypeStyle.</para>
    /// </summary>
    public partial class ClickAndTypeStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the ClickAndTypeStyle class.
        /// </summary>
        public ClickAndTypeStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:clickAndTypeStyle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ClickAndTypeStyle>(deep);
    }

    /// <summary>
    /// <para>Default Table Style for Newly Inserted Tables.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:defaultTableStyle.</para>
    /// </summary>
    public partial class DefaultTableStyle : String253Type
    {
        /// <summary>
        /// Initializes a new instance of the DefaultTableStyle class.
        /// </summary>
        public DefaultTableStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:defaultTableStyle");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultTableStyle>(deep);
    }

    /// <summary>
    /// <para>Defines the String253Type Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class String253Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the String253Type class.
        /// </summary>
        protected String253Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<String253Type>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (253L) });
                });
        }
    }

    /// <summary>
    /// <para>Defines the RunFonts Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rFonts.</para>
    /// </summary>
    public partial class RunFonts : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RunFonts class.
        /// </summary>
        public RunFonts() : base()
        {
        }

        /// <summary>
        /// <para>Font Content Type</para>
        /// <para>Represents the following attribute in the schema: w:hint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontTypeHintValues>? Hint
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontTypeHintValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>ASCII Font</para>
        /// <para>Represents the following attribute in the schema: w:ascii</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Ascii
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>High ANSI Font</para>
        /// <para>Represents the following attribute in the schema: w:hAnsi</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? HighAnsi
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>East Asian Font</para>
        /// <para>Represents the following attribute in the schema: w:eastAsia</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? EastAsia
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Complex Script Font</para>
        /// <para>Represents the following attribute in the schema: w:cs</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ComplexScript
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>ASCII Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:asciiTheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>? AsciiTheme
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>High ANSI Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:hAnsiTheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>? HighAnsiTheme
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>East Asian Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:eastAsiaTheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>? EastAsiaTheme
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Complex Script Theme Font</para>
        /// <para>Represents the following attribute in the schema: w:cstheme</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>? ComplexScriptTheme
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeFontValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rFonts");
            builder.AddElement<RunFonts>()
                .AddAttribute("w:hint", a => a.Hint)
                .AddAttribute("w:ascii", a => a.Ascii, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (31L) });
                })
                .AddAttribute("w:hAnsi", a => a.HighAnsi, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (31L) });
                })
                .AddAttribute("w:eastAsia", a => a.EastAsia, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (31L) });
                })
                .AddAttribute("w:cs", a => a.ComplexScript, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (31L) });
                })
                .AddAttribute("w:asciiTheme", a => a.AsciiTheme)
                .AddAttribute("w:hAnsiTheme", a => a.HighAnsiTheme)
                .AddAttribute("w:eastAsiaTheme", a => a.EastAsiaTheme)
                .AddAttribute("w:cstheme", a => a.ComplexScriptTheme);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunFonts>(deep);
    }

    /// <summary>
    /// <para>Defines the Color Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:color.</para>
    /// </summary>
    public partial class Color : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Color class.
        /// </summary>
        public Color() : base()
        {
        }

        /// <summary>
        /// <para>Run Content Color</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Run Content Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>? ThemeColor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Run Content Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeTint
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Run Content Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeShade
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:color");
            builder.AddElement<Color>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>>(EnumValidator.Instance);
                        union.AddValidator<HexBinaryValue>(new StringValidator() { Length = (3L) });
                    });
                })
                .AddAttribute("w:themeColor", a => a.ThemeColor)
                .AddAttribute("w:themeTint", a => a.ThemeTint, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:themeShade", a => a.ThemeShade, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Color>(deep);
    }

    /// <summary>
    /// <para>Defines the Spacing Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:spacing.</para>
    /// </summary>
    public partial class Spacing : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Spacing class.
        /// </summary>
        public Spacing() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:spacing");
            builder.AddElement<Spacing>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-31680L), MaxInclusive = (31680L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Spacing>(deep);
    }

    /// <summary>
    /// <para>Defines the CharacterScale Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:w.</para>
    /// </summary>
    public partial class CharacterScale : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CharacterScale class.
        /// </summary>
        public CharacterScale() : base()
        {
        }

        /// <summary>
        /// <para>Text Expansion/Compression Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public IntegerValue? Val
        {
            get => GetAttribute<IntegerValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:w");
            builder.AddElement<CharacterScale>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (600L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterScale>(deep);
    }

    /// <summary>
    /// <para>Defines the Kern Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:kern.</para>
    /// </summary>
    public partial class Kern : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Kern class.
        /// </summary>
        public Kern() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:kern");
            builder.AddElement<Kern>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (3277L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Kern>(deep);
    }

    /// <summary>
    /// <para>Defines the Position Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:position.</para>
    /// </summary>
    public partial class Position : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Position class.
        /// </summary>
        public Position() : base()
        {
        }

        /// <summary>
        /// <para>Signed Half-Point Measurement</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:position");
            builder.AddElement<Position>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Position>(deep);
    }

    /// <summary>
    /// <para>Defines the FontSize Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sz.</para>
    /// </summary>
    public partial class FontSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the FontSize class.
        /// </summary>
        public FontSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sz");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSize>(deep);
    }

    /// <summary>
    /// <para>Defines the FontSizeComplexScript Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:szCs.</para>
    /// </summary>
    public partial class FontSizeComplexScript : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the FontSizeComplexScript class.
        /// </summary>
        public FontSizeComplexScript() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:szCs");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSizeComplexScript>(deep);
    }

    /// <summary>
    /// <para>Checkbox Form Field Size.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:size.</para>
    /// </summary>
    public partial class FormFieldSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the FormFieldSize class.
        /// </summary>
        public FormFieldSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:size");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormFieldSize>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text Font Size.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hps.</para>
    /// </summary>
    public partial class PhoneticGuideTextFontSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticGuideTextFontSize class.
        /// </summary>
        public PhoneticGuideTextFontSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hps");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticGuideTextFontSize>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Base Text Font Size.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hpsBaseText.</para>
    /// </summary>
    public partial class PhoneticGuideBaseTextSize : HpsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticGuideBaseTextSize class.
        /// </summary>
        public PhoneticGuideBaseTextSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hpsBaseText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticGuideBaseTextSize>(deep);
    }

    /// <summary>
    /// <para>Defines the HpsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class HpsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HpsMeasureType class.
        /// </summary>
        protected HpsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Half Point Measurement</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<HpsMeasureType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { MinInclusive = (2L), MaxInclusive = (3277L), Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Defines the Highlight Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:highlight.</para>
    /// </summary>
    public partial class Highlight : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Highlight class.
        /// </summary>
        public Highlight() : base()
        {
        }

        /// <summary>
        /// <para>Highlighting Color</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HighlightColorValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HighlightColorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:highlight");
            builder.AddElement<Highlight>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Highlight>(deep);
    }

    /// <summary>
    /// <para>Defines the Underline Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:u.</para>
    /// </summary>
    public partial class Underline : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Underline class.
        /// </summary>
        public Underline() : base()
        {
        }

        /// <summary>
        /// <para>Underline Style</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.UnderlineValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.UnderlineValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Underline Color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Color
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Underline Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>? ThemeColor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Underline Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeTint
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Underline Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeShade
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:u");
            builder.AddElement<Underline>()
                .AddAttribute("w:val", a => a.Val)
                .AddAttribute("w:color", a => a.Color, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>>(EnumValidator.Instance);
                        union.AddValidator<HexBinaryValue>(new StringValidator() { Length = (3L) });
                    });
                })
                .AddAttribute("w:themeColor", a => a.ThemeColor)
                .AddAttribute("w:themeTint", a => a.ThemeTint, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:themeShade", a => a.ThemeShade, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Underline>(deep);
    }

    /// <summary>
    /// <para>Defines the TextEffect Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:effect.</para>
    /// </summary>
    public partial class TextEffect : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextEffect class.
        /// </summary>
        public TextEffect() : base()
        {
        }

        /// <summary>
        /// <para>Animated Text Effect Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextEffectValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextEffectValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:effect");
            builder.AddElement<TextEffect>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextEffect>(deep);
    }

    /// <summary>
    /// <para>Defines the Border Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bdr.</para>
    /// </summary>
    public partial class Border : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the Border class.
        /// </summary>
        public Border() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bdr");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Border>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Above Identical Paragraphs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:top.</para>
    /// </summary>
    public partial class TopBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the TopBorder class.
        /// </summary>
        public TopBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:top");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopBorder>(deep);
    }

    /// <summary>
    /// <para>Left Paragraph Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:left.</para>
    /// </summary>
    public partial class LeftBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the LeftBorder class.
        /// </summary>
        public LeftBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:left");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftBorder>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Between Identical Paragraphs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bottom.</para>
    /// </summary>
    public partial class BottomBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the BottomBorder class.
        /// </summary>
        public BottomBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bottom");
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@w:type")) { Application = ApplicationType.Word });
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@w:w")) { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomBorder>(deep);
    }

    /// <summary>
    /// <para>Right Paragraph Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:right.</para>
    /// </summary>
    public partial class RightBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the RightBorder class.
        /// </summary>
        public RightBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:right");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightBorder>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Between Identical Paragraphs.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:between.</para>
    /// </summary>
    public partial class BetweenBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the BetweenBorder class.
        /// </summary>
        public BetweenBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:between");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BetweenBorder>(deep);
    }

    /// <summary>
    /// <para>Paragraph Border Between Facing Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bar.</para>
    /// </summary>
    public partial class BarBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the BarBorder class.
        /// </summary>
        public BarBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bar");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BarBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the StartBorder Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:start.</para>
    /// </summary>
    public partial class StartBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the StartBorder class.
        /// </summary>
        public StartBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:start");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the EndBorder Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:end.</para>
    /// </summary>
    public partial class EndBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the EndBorder class.
        /// </summary>
        public EndBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:end");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndBorder>(deep);
    }

    /// <summary>
    /// <para>Table Inside Horizontal Edges Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:insideH.</para>
    /// </summary>
    public partial class InsideHorizontalBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the InsideHorizontalBorder class.
        /// </summary>
        public InsideHorizontalBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:insideH");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideHorizontalBorder>(deep);
    }

    /// <summary>
    /// <para>Table Inside Vertical Edges Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:insideV.</para>
    /// </summary>
    public partial class InsideVerticalBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the InsideVerticalBorder class.
        /// </summary>
        public InsideVerticalBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:insideV");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsideVerticalBorder>(deep);
    }

    /// <summary>
    /// <para>Table Cell Top Left to Bottom Right Diagonal Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tl2br.</para>
    /// </summary>
    public partial class TopLeftToBottomRightCellBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the TopLeftToBottomRightCellBorder class.
        /// </summary>
        public TopLeftToBottomRightCellBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tl2br");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopLeftToBottomRightCellBorder>(deep);
    }

    /// <summary>
    /// <para>Table Cell Top Right to Bottom Left Diagonal Border.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tr2bl.</para>
    /// </summary>
    public partial class TopRightToBottomLeftCellBorder : BorderType
    {
        /// <summary>
        /// Initializes a new instance of the TopRightToBottomLeftCellBorder class.
        /// </summary>
        public TopRightToBottomLeftCellBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tr2bl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopRightToBottomLeftCellBorder>(deep);
    }

    /// <summary>
    /// <para>Defines the BorderType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class BorderType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the BorderType class.
        /// </summary>
        protected BorderType() : base()
        {
        }

        /// <summary>
        /// <para>Border Style</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.BorderValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.BorderValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Color
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Theme Color</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>? ThemeColor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Theme Color Tint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeTint
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Theme Color Shade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeShade
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Width</para>
        /// <para>Represents the following attribute in the schema: w:sz</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Size
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Spacing Measurement</para>
        /// <para>Represents the following attribute in the schema: w:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Space
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Border Shadow</para>
        /// <para>Represents the following attribute in the schema: w:shadow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Shadow
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Create Frame Effect</para>
        /// <para>Represents the following attribute in the schema: w:frame</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Frame
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<BorderType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:color", a => a.Color, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>>(EnumValidator.Instance);
                        union.AddValidator<HexBinaryValue>(new StringValidator() { Length = (3L) });
                    });
                })
                .AddAttribute("w:themeColor", a => a.ThemeColor)
                .AddAttribute("w:themeTint", a => a.ThemeTint, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:themeShade", a => a.ThemeShade, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:sz", a => a.Size)
                .AddAttribute("w:space", a => a.Space, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (31L) });
                })
                .AddAttribute("w:shadow", a => a.Shadow)
                .AddAttribute("w:frame", a => a.Frame);
        }
    }

    /// <summary>
    /// <para>Defines the FitText Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fitText.</para>
    /// </summary>
    public partial class FitText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FitText class.
        /// </summary>
        public FitText() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Fit Text Run ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Id
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fitText");
            builder.AddElement<FitText>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:id", a => a.Id);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FitText>(deep);
    }

    /// <summary>
    /// <para>Defines the VerticalTextAlignment Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vertAlign.</para>
    /// </summary>
    public partial class VerticalTextAlignment : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the VerticalTextAlignment class.
        /// </summary>
        public VerticalTextAlignment() : base()
        {
        }

        /// <summary>
        /// <para>Subscript/Superscript Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalPositionValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalPositionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:vertAlign");
            builder.AddElement<VerticalTextAlignment>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalTextAlignment>(deep);
    }

    /// <summary>
    /// <para>Defines the Emphasis Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:em.</para>
    /// </summary>
    public partial class Emphasis : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Emphasis class.
        /// </summary>
        public Emphasis() : base()
        {
        }

        /// <summary>
        /// <para>Emphasis Mark Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.EmphasisMarkValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.EmphasisMarkValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:em");
            builder.AddElement<Emphasis>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Emphasis>(deep);
    }

    /// <summary>
    /// <para>Defines the Languages Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lang.</para>
    /// </summary>
    public partial class Languages : LanguageType
    {
        /// <summary>
        /// Initializes a new instance of the Languages class.
        /// </summary>
        public Languages() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lang");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Languages>(deep);
    }

    /// <summary>
    /// <para>Theme Font Languages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:themeFontLang.</para>
    /// </summary>
    public partial class ThemeFontLanguages : LanguageType
    {
        /// <summary>
        /// Initializes a new instance of the ThemeFontLanguages class.
        /// </summary>
        public ThemeFontLanguages() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:themeFontLang");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThemeFontLanguages>(deep);
    }

    /// <summary>
    /// <para>Defines the LanguageType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class LanguageType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LanguageType class.
        /// </summary>
        protected LanguageType() : base()
        {
        }

        /// <summary>
        /// <para>Latin Language</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>East Asian Language</para>
        /// <para>Represents the following attribute in the schema: w:eastAsia</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? EastAsia
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Complex Script Language</para>
        /// <para>Represents the following attribute in the schema: w:bidi</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Bidi
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<LanguageType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                })
                .AddAttribute("w:eastAsia", a => a.EastAsia, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                })
                .AddAttribute("w:bidi", a => a.Bidi, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                });
        }
    }

    /// <summary>
    /// <para>Defines the EastAsianLayout Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:eastAsianLayout.</para>
    /// </summary>
    public partial class EastAsianLayout : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EastAsianLayout class.
        /// </summary>
        public EastAsianLayout() : base()
        {
        }

        /// <summary>
        /// <para>East Asian Typography Run ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Id
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Two Lines in One</para>
        /// <para>Represents the following attribute in the schema: w:combine</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Combine
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Display Brackets Around Two Lines in One</para>
        /// <para>Represents the following attribute in the schema: w:combineBrackets</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CombineBracketValues>? CombineBrackets
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CombineBracketValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Horizontal in Vertical (Rotate Text)</para>
        /// <para>Represents the following attribute in the schema: w:vert</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Vertical
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Compress Rotated Text to Line Height</para>
        /// <para>Represents the following attribute in the schema: w:vertCompress</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? VerticalCompress
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:eastAsianLayout");
            builder.AddElement<EastAsianLayout>()
                .AddAttribute("w:id", a => a.Id)
                .AddAttribute("w:combine", a => a.Combine)
                .AddAttribute("w:combineBrackets", a => a.CombineBrackets)
                .AddAttribute("w:vert", a => a.Vertical)
                .AddAttribute("w:vertCompress", a => a.VerticalCompress);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EastAsianLayout>(deep);
    }

    /// <summary>
    /// <para>Defines the RunPropertiesChange Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousRunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class RunPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class.
        /// </summary>
        public RunPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousRunProperties>();
            builder.AddElement<RunPropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousRunProperties), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousRunProperties? PreviousRunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousRunProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Highlight" /> <c>&lt;w:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightToLeftText" /> <c>&lt;w:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ComplexScript" /> <c>&lt;w:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange" /> <c>&lt;w:rPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunStyle" /> <c>&lt;w:rStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.FillTextEffect" /> <c>&lt;w14:textFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Glow" /> <c>&lt;w14:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Ligatures" /> <c>&lt;w14:ligatures></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberingFormat" /> <c>&lt;w14:numForm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberSpacing" /> <c>&lt;w14:numSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives" /> <c>&lt;w14:cntxtAlts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Properties3D" /> <c>&lt;w14:props3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Reflection" /> <c>&lt;w14:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Scene3D" /> <c>&lt;w14:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Shadow" /> <c>&lt;w14:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.StylisticSets" /> <c>&lt;w14:stylisticSets></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect" /> <c>&lt;w14:textOutline></c></description></item>
    /// </list>
    /// </remark>
    public partial class RunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunProperties class.
        /// </summary>
        public RunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Highlight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.FillTextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Glow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Ligatures>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Properties3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Reflection>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Scene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.StylisticSets>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange), 0, 1)
                            }
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>RunStyle.</para>
        /// <para>Represents the following element tag in the schema: w:rStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunStyle? RunStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunFonts? RunFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Bold? Bold
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript? BoldComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Italic? Italic
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript? ItalicComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Caps? Caps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SmallCaps? SmallCaps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Strike? Strike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoubleStrike? DoubleStrike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Outline? Outline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shadow? Shadow
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emboss? Emboss
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Imprint? Imprint
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoProof? NoProof
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Vanish? Vanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WebHidden? WebHidden
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Color? Color
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Spacing? Spacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CharacterScale? CharacterScale
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kern? Kern
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSize? FontSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript? FontSizeComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Highlight.</para>
        /// <para>Represents the following element tag in the schema: w:highlight.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Highlight? Highlight
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Highlight>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Underline? Underline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextEffect? TextEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Border? Border
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FitText? FitText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment? VerticalTextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RightToLeftText.</para>
        /// <para>Represents the following element tag in the schema: w:rtl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightToLeftText? RightToLeftText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:cs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ComplexScript? ComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emphasis? Emphasis
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Languages? Languages
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout? EastAsianLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpecVanish? SpecVanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Glow, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:glow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Glow? Glow
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Glow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow14, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Shadow? Shadow14
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Reflection, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:reflection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Reflection? Reflection
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Reflection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextOutlineEffect, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:textOutline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect? TextOutlineEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FillTextEffect, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:textFill.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.FillTextEffect? FillTextEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.FillTextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scene3D, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:scene3d.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Scene3D? Scene3D
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Scene3D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Properties3D, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:props3d.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Properties3D? Properties3D
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Properties3D>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ligatures, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:ligatures.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.Ligatures? Ligatures
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.Ligatures>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingFormat, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:numForm.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.NumberingFormat? NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberSpacing, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:numSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.NumberSpacing? NumberSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.NumberSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StylisticSets, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:stylisticSets.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.StylisticSets? StylisticSets
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.StylisticSets>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualAlternatives, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w14:cntxtAlts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14 = http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives? ContextualAlternatives
        {
            get => GetElement<DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RunPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:rPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange? RunPropertiesChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the InsertedMathControl Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ins.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class InsertedMathControl : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class.
        /// </summary>
        public InsertedMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsertedMathControl(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ins");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            builder.AddElement<InsertedMathControl>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl), 1, 1)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsertedMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the DeletedMathControl Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:del.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class DeletedMathControl : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class.
        /// </summary>
        public DeletedMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DeletedMathControl(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:del");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            builder.AddElement<DeletedMathControl>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveFromMathControl Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFrom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class MoveFromMathControl : MathControlMoveType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class.
        /// </summary>
        public MoveFromMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveFromMathControl(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveFrom");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl), 1, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl), 1, 1)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the MoveToMathControl Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class MoveToMathControl : MathControlMoveType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class.
        /// </summary>
        public MoveToMathControl() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToMathControl(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToMathControl(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToMathControl class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveToMathControl(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveTo");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl), 1, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl), 1, 1)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToMathControl>(deep);
    }

    /// <summary>
    /// <para>Defines the MathControlMoveType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class MathControlMoveType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class.
        /// </summary>
        protected MathControlMoveType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected MathControlMoveType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected MathControlMoveType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MathControlMoveType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected MathControlMoveType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedMathControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedMathControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            builder.AddElement<MathControlMoveType>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Defines the CustomXmlRuby Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties" /> <c>&lt;w:customXmlPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomXmlRuby : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class.
        /// </summary>
        public CustomXmlRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlRuby(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXml");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        }
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                        new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlRuby>(deep);
    }

    /// <summary>
    /// <para>Defines the SimpleFieldRuby Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldSimple.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FieldData" /> <c>&lt;w:fldData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SimpleFieldRuby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class.
        /// </summary>
        public SimpleFieldRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleFieldRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleFieldRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleFieldRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SimpleFieldRuby(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>instr</para>
        /// <para>Represents the following attribute in the schema: w:instr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Instruction
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>fldLock</para>
        /// <para>Represents the following attribute in the schema: w:fldLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FieldLock
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dirty</para>
        /// <para>Represents the following attribute in the schema: w:dirty</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Dirty
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fldSimple");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FieldData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<SimpleFieldRuby>()
                .AddAttribute("w:instr", a => a.Instruction, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:fldLock", a => a.FieldLock)
                .AddAttribute("w:dirty", a => a.Dirty);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldData), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                            }
                                        }
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                        new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>FieldData.</para>
        /// <para>Represents the following element tag in the schema: w:fldData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FieldData? FieldData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FieldData>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SimpleFieldRuby>(deep);
    }

    /// <summary>
    /// <para>Defines the HyperlinkRuby Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hyperlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class HyperlinkRuby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class.
        /// </summary>
        public HyperlinkRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HyperlinkRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HyperlinkRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HyperlinkRuby(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>tgtFrame</para>
        /// <para>Represents the following attribute in the schema: w:tgtFrame</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? TargetFrame
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>tooltip</para>
        /// <para>Represents the following attribute in the schema: w:tooltip</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Tooltip
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>docLocation</para>
        /// <para>Represents the following attribute in the schema: w:docLocation</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? DocLocation
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>history</para>
        /// <para>Represents the following attribute in the schema: w:history</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? History
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>anchor</para>
        /// <para>Represents the following attribute in the schema: w:anchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Anchor
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hyperlink");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<HyperlinkRuby>()
                .AddAttribute("w:tgtFrame", a => a.TargetFrame, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:tooltip", a => a.Tooltip, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (260L) });
                })
                .AddAttribute("w:docLocation", a => a.DocLocation, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:history", a => a.History)
                .AddAttribute("w:anchor", a => a.Anchor, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("r:id", a => a.Id);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyperlinkRuby>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text Run.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:r.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Break" /> <c>&lt;w:br></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Drawing" /> <c>&lt;w:drawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoBreakHyphen" /> <c>&lt;w:noBreakHyphen></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SoftHyphen" /> <c>&lt;w:softHyphen></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DayShort" /> <c>&lt;w:dayShort></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MonthShort" /> <c>&lt;w:monthShort></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.YearShort" /> <c>&lt;w:yearShort></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DayLong" /> <c>&lt;w:dayLong></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MonthLong" /> <c>&lt;w:monthLong></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.YearLong" /> <c>&lt;w:yearLong></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AnnotationReferenceMark" /> <c>&lt;w:annotationRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteReferenceMark" /> <c>&lt;w:footnoteRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnoteReferenceMark" /> <c>&lt;w:endnoteRef></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SeparatorMark" /> <c>&lt;w:separator></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContinuationSeparatorMark" /> <c>&lt;w:continuationSeparator></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageNumber" /> <c>&lt;w:pgNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CarriageReturn" /> <c>&lt;w:cr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TabChar" /> <c>&lt;w:tab></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LastRenderedPageBreak" /> <c>&lt;w:lastRenderedPageBreak></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FieldChar" /> <c>&lt;w:fldChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteReference" /> <c>&lt;w:footnoteReference></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnoteReference" /> <c>&lt;w:endnoteReference></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentReference" /> <c>&lt;w:commentReference></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbeddedObject" /> <c>&lt;w:object></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Picture" /> <c>&lt;w:pict></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PositionalTab" /> <c>&lt;w:ptab></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Ruby" /> <c>&lt;w:ruby></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SymbolChar" /> <c>&lt;w:sym></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Text" /> <c>&lt;w:t></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedText" /> <c>&lt;w:delText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FieldCode" /> <c>&lt;w:instrText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedFieldCode" /> <c>&lt;w:delInstrText></c></description></item>
    /// </list>
    /// </remark>
    public partial class Run : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Run class.
        /// </summary>
        public Run() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Run(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Run class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Run(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Revision Identifier for Run Properties</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidRunProperties
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Run Deletion</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidRunDeletion
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Run</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidRunAddition
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:r");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Break>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Drawing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoBreakHyphen>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SoftHyphen>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DayShort>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MonthShort>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.YearShort>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DayLong>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MonthLong>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.YearLong>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AnnotationReferenceMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteReferenceMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnoteReferenceMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SeparatorMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContinuationSeparatorMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageNumber>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CarriageReturn>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TabChar>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LastRenderedPageBreak>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FieldChar>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnoteReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbeddedObject>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Picture>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PositionalTab>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Ruby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SymbolChar>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Text>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FieldCode>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedFieldCode>();
            builder.AddElement<Run>()
                .AddAttribute("w:rsidRPr", a => a.RsidRunProperties, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidDel", a => a.RsidRunDeletion, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidR", a => a.RsidRunAddition, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Break), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Text), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedText), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldCode), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedFieldCode), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoBreakHyphen), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SoftHyphen), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DayShort), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MonthShort), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.YearShort), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DayLong), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MonthLong), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.YearLong), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AnnotationReferenceMark), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteReferenceMark), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteReferenceMark), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SeparatorMark), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContinuationSeparatorMark), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SymbolChar), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageNumber), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CarriageReturn), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TabChar), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbeddedObject), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Picture), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldChar), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Ruby), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteReference), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteReference), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentReference), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Drawing), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PositionalTab), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LastRenderedPageBreak), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunProperties? RunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Run>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtRunRuby Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentRunRuby" /> <c>&lt;w:sdtContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties" /> <c>&lt;w:sdtEndPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtProperties" /> <c>&lt;w:sdtPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtRunRuby : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class.
        /// </summary>
        public SdtRunRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRunRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRunRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRunRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtRunRuby(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdt");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentRunRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRunRuby), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            };
        }

        /// <summary>
        /// <para>SdtContentRunRuby.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SdtContentRunRuby? SdtContentRunRuby
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SdtContentRunRuby>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtRunRuby>(deep);
    }

    /// <summary>
    /// <para>Defines the ProofError Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:proofErr.</para>
    /// </summary>
    public partial class ProofError : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ProofError class.
        /// </summary>
        public ProofError() : base()
        {
        }

        /// <summary>
        /// <para>Proofing Error Anchor Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingErrorValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingErrorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:proofErr");
            builder.AddElement<ProofError>()
                .AddAttribute("w:type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProofError>(deep);
    }

    /// <summary>
    /// <para>Defines the PermStart Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:permStart.</para>
    /// </summary>
    public partial class PermStart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PermStart class.
        /// </summary>
        public PermStart() : base()
        {
        }

        /// <summary>
        /// <para>edGrp</para>
        /// <para>Represents the following attribute in the schema: w:edGrp</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.RangePermissionEditingGroupValues>? EditorGroup
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.RangePermissionEditingGroupValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>ed</para>
        /// <para>Represents the following attribute in the schema: w:ed</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Ed
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>colFirst</para>
        /// <para>Represents the following attribute in the schema: w:colFirst</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? ColumnFirst
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>colLast</para>
        /// <para>Represents the following attribute in the schema: w:colLast</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? ColumnLast
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Id
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Displaced By Custom XML Markup</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>? DisplacedByCustomXml
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:permStart");
            builder.AddElement<PermStart>()
                .AddAttribute("w:edGrp", a => a.EditorGroup)
                .AddAttribute("w:ed", a => a.Ed)
                .AddAttribute("w:colFirst", a => a.ColumnFirst, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:colLast", a => a.ColumnLast, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:displacedByCustomXml", a => a.DisplacedByCustomXml);
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PermStart>(deep);
    }

    /// <summary>
    /// <para>Defines the PermEnd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:permEnd.</para>
    /// </summary>
    public partial class PermEnd : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PermEnd class.
        /// </summary>
        public PermEnd() : base()
        {
        }

        /// <summary>
        /// <para>Annotation ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Id
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Displaced By Custom XML Markup</para>
        /// <para>Represents the following attribute in the schema: w:displacedByCustomXml</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>? DisplacedByCustomXml
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DisplacedByCustomXmlValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:permEnd");
            builder.AddElement<PermEnd>()
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:displacedByCustomXml", a => a.DisplacedByCustomXml);
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PermEnd>(deep);
    }

    /// <summary>
    /// <para>Inserted Run Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ins.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class InsertedRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the InsertedRun class.
        /// </summary>
        public InsertedRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public InsertedRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the InsertedRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public InsertedRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ins");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InsertedRun>(deep);
    }

    /// <summary>
    /// <para>Deleted Run Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:del.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class DeletedRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the DeletedRun class.
        /// </summary>
        public DeletedRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DeletedRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DeletedRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DeletedRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:del");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DeletedRun>(deep);
    }

    /// <summary>
    /// <para>Move Source Run Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveFrom.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class MoveFromRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveFromRun class.
        /// </summary>
        public MoveFromRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveFromRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveFromRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveFromRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveFrom");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveFromRun>(deep);
    }

    /// <summary>
    /// <para>Move Destination Run Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:moveTo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class MoveToRun : RunTrackChangeType
    {
        /// <summary>
        /// Initializes a new instance of the MoveToRun class.
        /// </summary>
        public MoveToRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MoveToRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MoveToRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MoveToRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:moveTo");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MoveToRun>(deep);
    }

    /// <summary>
    /// <para>Defines the RunTrackChangeType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class RunTrackChangeType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class.
        /// </summary>
        protected RunTrackChangeType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RunTrackChangeType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RunTrackChangeType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunTrackChangeType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected RunTrackChangeType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<RunTrackChangeType>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Defines the ContentPart Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:contentPart.</para>
    /// </summary>
    public partial class ContentPart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ContentPart class.
        /// </summary>
        public ContentPart() : base()
        {
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:contentPart");
            builder.Availability = FileFormatVersions.Office2010;
            builder.AddElement<ContentPart>()
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ContentPart>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtRun Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentRun" /> <c>&lt;w:sdtContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties" /> <c>&lt;w:sdtEndPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtProperties" /> <c>&lt;w:sdtPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtRun : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtRun class.
        /// </summary>
        public SdtRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdt");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRun), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Inline-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SdtContentRun? SdtContentRun
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SdtContentRun>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtRun>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlBlock Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties" /> <c>&lt;w:customXmlPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomXmlBlock : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class.
        /// </summary>
        public CustomXmlBlock() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlBlock(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlBlock(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlBlock class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlBlock(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXml");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlBlock>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtBlock Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentBlock" /> <c>&lt;w:sdtContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties" /> <c>&lt;w:sdtEndPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtProperties" /> <c>&lt;w:sdtPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtBlock : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtBlock class.
        /// </summary>
        public SdtBlock() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtBlock(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtBlock(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtBlock class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtBlock(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdt");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentBlock), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Block-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SdtContentBlock? SdtContentBlock
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SdtContentBlock>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtBlock>(deep);
    }

    /// <summary>
    /// <para>Defines the Paragraph Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:p.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties" /> <c>&lt;w:pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Paragraph : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Paragraph class.
        /// </summary>
        public Paragraph() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Paragraph(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Paragraph class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Paragraph(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Revision Identifier for Paragraph Glyph Formatting</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidParagraphMarkRevision
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Paragraph</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidParagraphAddition
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Paragraph Deletion</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidParagraphDeletion
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Paragraph Properties</para>
        /// <para>Represents the following attribute in the schema: w:rsidP</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidParagraphProperties
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Revision Identifier for Runs</para>
        /// <para>Represents the following attribute in the schema: w:rsidRDefault</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidRunAdditionDefault
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>paraId, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:paraId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public HexBinaryValue? ParagraphId
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>textId, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:textId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public HexBinaryValue? TextId
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>noSpellErr, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:noSpellErr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public OnOffValue? NoSpellError
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:p");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<Paragraph>()
                .AddAttribute("w:rsidRPr", a => a.RsidParagraphMarkRevision, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidR", a => a.RsidParagraphAddition, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidDel", a => a.RsidParagraphDeletion, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidP", a => a.RsidParagraphProperties, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidRDefault", a => a.RsidRunAdditionDefault, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w14:paraId", a => a.ParagraphId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w14:textId", a => a.TextId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w14:noSpellErr", a => a.NoSpellError, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        }
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                        new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                    }
                }
            };
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("w14:paraId"), true, 0, false, 2147483648, false) { Version = FileFormatVersions.Office2010 });
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("w14:textId"), true, 0, false, 2147483648, false) { Version = FileFormatVersions.Office2010 });
        }

        /// <summary>
        /// <para>Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties? ParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Paragraph>(deep);
    }

    /// <summary>
    /// <para>Defines the Table Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tbl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRow" /> <c>&lt;w:tr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRow" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableGrid" /> <c>&lt;w:tblGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableProperties" /> <c>&lt;w:tblPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Table : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Table(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Table class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Table(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tbl");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableProperties), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableGrid), 1, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRow), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRow), 1, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Table>(deep);
    }

    /// <summary>
    /// <para>Table Row.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtCell" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptions" /> <c>&lt;w:tblPrEx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCell" /> <c>&lt;w:tc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRowProperties" /> <c>&lt;w:trPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableRow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRow class.
        /// </summary>
        public TableRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRow(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Revision Identifier for Table Row Glyph Formatting</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidTableRowMarkRevision
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Table Row</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidTableRowAddition
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Table Row Deletion</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidTableRowDeletion
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Table Row Properties</para>
        /// <para>Represents the following attribute in the schema: w:rsidTr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidTableRowProperties
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>paraId, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:paraId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public HexBinaryValue? ParagraphId
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>textId, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w14:textId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w14=http://schemas.microsoft.com/office/word/2010/wordml
        /// </remark>
        public HexBinaryValue? TextId
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptions>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRowProperties>();
            builder.AddElement<TableRow>()
                .AddAttribute("w:rsidRPr", a => a.RsidTableRowMarkRevision, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidR", a => a.RsidTableRowAddition, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidDel", a => a.RsidTableRowDeletion, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidTr", a => a.RsidTableRowProperties, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w14:paraId", a => a.ParagraphId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w14:textId", a => a.TextId, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 1, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCell), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtCell), 1, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        }
                    }
                }
            };
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("w14:paraId"), true, 0, false, 2147483648, false) { Version = FileFormatVersions.Office2010 });
            builder.AddConstraint(new AttributeValueRangeConstraint(builder.CreateQName("w14:textId"), true, 0, false, 2147483648, false) { Version = FileFormatVersions.Office2010 });
        }

        /// <summary>
        /// <para>Table-Level Property Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrEx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptions? TablePropertyExceptions
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptions>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableRowProperties? TableRowProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableRowProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRow>(deep);
    }

    /// <summary>
    /// <para>Row-Level Custom XML Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties" /> <c>&lt;w:customXmlPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRow" /> <c>&lt;w:tr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRow" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomXmlRow : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class.
        /// </summary>
        public CustomXmlRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXml");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRow), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRow), 1, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlRow>(deep);
    }

    /// <summary>
    /// <para>Row-Level Structured Document Tag.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentRow" /> <c>&lt;w:sdtContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties" /> <c>&lt;w:sdtEndPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtProperties" /> <c>&lt;w:sdtPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtRow : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtRow class.
        /// </summary>
        public SdtRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdt");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRow), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Row-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SdtContentRow? SdtContentRow
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SdtContentRow>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtRow>(deep);
    }

    /// <summary>
    /// <para>Table Cell.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tc.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellProperties" /> <c>&lt;w:tcPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCell : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCell class.
        /// </summary>
        public TableCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tc");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 1, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellProperties? TableCellProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCell>(deep);
    }

    /// <summary>
    /// <para>Cell-Level Custom XML Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties" /> <c>&lt;w:customXmlPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtCell" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCell" /> <c>&lt;w:tc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomXmlCell : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class.
        /// </summary>
        public CustomXmlCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXml");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCell), 0, 0),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtCell), 1, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                            }
                                        },
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlCell>(deep);
    }

    /// <summary>
    /// <para>Cell-Level Structured Document Tag.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentCell" /> <c>&lt;w:sdtContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties" /> <c>&lt;w:sdtEndPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtProperties" /> <c>&lt;w:sdtPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtCell : SdtElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtCell class.
        /// </summary>
        public SdtCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdt");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtEndCharProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentCell), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Cell-Level Structured Document Tag Content.</para>
        /// <para>Represents the following element tag in the schema: w:sdtContent.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SdtContentCell? SdtContentCell
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SdtContentCell>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtCell>(deep);
    }

    /// <summary>
    /// <para>Defines the CustomXmlRun Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXml.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties" /> <c>&lt;w:customXmlPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomXmlRun : CustomXmlElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class.
        /// </summary>
        public CustomXmlRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXml");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlProperties), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        }
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                        new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlRun>(deep);
    }

    /// <summary>
    /// <para>Defines the SimpleField Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldSimple.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FieldData" /> <c>&lt;w:fldData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SimpleField : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SimpleField class.
        /// </summary>
        public SimpleField() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleField(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SimpleField(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SimpleField class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SimpleField(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Field Codes</para>
        /// <para>Represents the following attribute in the schema: w:instr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Instruction
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field Should Not Be Recalculated</para>
        /// <para>Represents the following attribute in the schema: w:fldLock</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FieldLock
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Field Result Invalidated</para>
        /// <para>Represents the following attribute in the schema: w:dirty</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Dirty
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fldSimple");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FieldData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<SimpleField>()
                .AddAttribute("w:instr", a => a.Instruction, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:fldLock", a => a.FieldLock)
                .AddAttribute("w:dirty", a => a.Dirty);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldData), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        }
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                        new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Custom Field Data.</para>
        /// <para>Represents the following element tag in the schema: w:fldData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FieldData? FieldData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FieldData>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SimpleField>(deep);
    }

    /// <summary>
    /// <para>Defines the Hyperlink Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hyperlink.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Hyperlink : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Hyperlink class.
        /// </summary>
        public Hyperlink() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Hyperlink(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Hyperlink class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Hyperlink(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Hyperlink Target Frame</para>
        /// <para>Represents the following attribute in the schema: w:tgtFrame</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? TargetFrame
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Associated String</para>
        /// <para>Represents the following attribute in the schema: w:tooltip</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Tooltip
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Location in Target Document</para>
        /// <para>Represents the following attribute in the schema: w:docLocation</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? DocLocation
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Add To Viewed Hyperlinks</para>
        /// <para>Represents the following attribute in the schema: w:history</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? History
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hyperlink Anchor</para>
        /// <para>Represents the following attribute in the schema: w:anchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Anchor
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hyperlink Target</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hyperlink");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<Hyperlink>()
                .AddAttribute("w:tgtFrame", a => a.TargetFrame, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:tooltip", a => a.Tooltip, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (260L) });
                })
                .AddAttribute("w:docLocation", a => a.DocLocation, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:history", a => a.History)
                .AddAttribute("w:anchor", a => a.Anchor, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("r:id", a => a.Id);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            };
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Hyperlink>(deep);
    }

    /// <summary>
    /// <para>Defines the BidirectionalOverride Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bdo.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class BidirectionalOverride : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class.
        /// </summary>
        public BidirectionalOverride() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalOverride(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalOverride(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalOverride class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BidirectionalOverride(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DirectionValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DirectionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bdo");
            builder.Availability = FileFormatVersions.Office2010;
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<BidirectionalOverride>()
                .AddAttribute("w:val", a => a.Val);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BidirectionalOverride>(deep);
    }

    /// <summary>
    /// <para>Defines the BidirectionalEmbedding Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dir.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class BidirectionalEmbedding : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class.
        /// </summary>
        public BidirectionalEmbedding() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalEmbedding(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BidirectionalEmbedding(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BidirectionalEmbedding class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BidirectionalEmbedding(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DirectionValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DirectionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dir");
            builder.Availability = FileFormatVersions.Office2010;
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<BidirectionalEmbedding>()
                .AddAttribute("w:val", a => a.Val);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                }
                                                            },
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                        }
                                                    }
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                {
                                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BidirectionalEmbedding>(deep);
    }

    /// <summary>
    /// <para>Anchor for Subdocument Location.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:subDoc.</para>
    /// </summary>
    public partial class SubDocumentReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the SubDocumentReference class.
        /// </summary>
        public SubDocumentReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:subDoc");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/subDocument"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SubDocumentReference>(deep);
    }

    /// <summary>
    /// <para>Defines the PrinterSettingsReference Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:printerSettings.</para>
    /// </summary>
    public partial class PrinterSettingsReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the PrinterSettingsReference class.
        /// </summary>
        public PrinterSettingsReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:printerSettings");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/printerSettings"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrinterSettingsReference>(deep);
    }

    /// <summary>
    /// <para>ODSO Data Source File Path.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:src.</para>
    /// </summary>
    public partial class SourceReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the SourceReference class.
        /// </summary>
        public SourceReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:src");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("r:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/mailMergeSource"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceReference>(deep);
    }

    /// <summary>
    /// <para>Reference to Inclusion/Exclusion Data for Data Source.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:recipientData.</para>
    /// </summary>
    public partial class RecipientDataReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the RecipientDataReference class.
        /// </summary>
        public RecipientDataReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:recipientData");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/recipientData"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecipientDataReference>(deep);
    }

    /// <summary>
    /// <para>Data Source File Path.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dataSource.</para>
    /// </summary>
    public partial class DataSourceReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceReference class.
        /// </summary>
        public DataSourceReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dataSource");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/mailMergeSource"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataSourceReference>(deep);
    }

    /// <summary>
    /// <para>Header Definition File Path.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:headerSource.</para>
    /// </summary>
    public partial class HeaderSource : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the HeaderSource class.
        /// </summary>
        public HeaderSource() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:headerSource");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderSource>(deep);
    }

    /// <summary>
    /// <para>Source File for Frame.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sourceFileName.</para>
    /// </summary>
    public partial class SourceFileReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the SourceFileReference class.
        /// </summary>
        public SourceFileReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sourceFileName");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/frame"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceFileReference>(deep);
    }

    /// <summary>
    /// <para>Defines the MovieReference Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:movie.</para>
    /// </summary>
    public partial class MovieReference : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the MovieReference class.
        /// </summary>
        public MovieReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:movie");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MovieReference>(deep);
    }

    /// <summary>
    /// <para>Attached Document Template.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:attachedTemplate.</para>
    /// </summary>
    public partial class AttachedTemplate : RelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the AttachedTemplate class.
        /// </summary>
        public AttachedTemplate() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:attachedTemplate");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("r:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate"));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AttachedTemplate>(deep);
    }

    /// <summary>
    /// <para>Defines the RelationshipType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class RelationshipType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RelationshipType class.
        /// </summary>
        protected RelationshipType() : base()
        {
        }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<RelationshipType>()
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Defines the ConditionalFormatStyle Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cnfStyle.</para>
    /// </summary>
    public partial class ConditionalFormatStyle : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ConditionalFormatStyle class.
        /// </summary>
        public ConditionalFormatStyle() : base()
        {
        }

        /// <summary>
        /// <para>Conditional Formatting Bit Mask</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>firstRow, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:firstRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FirstRow
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lastRow, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:lastRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LastRow
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>firstColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:firstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FirstColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lastColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:lastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LastColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>oddVBand, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:oddVBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? OddVerticalBand
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>evenVBand, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:evenVBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? EvenVerticalBand
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>oddHBand, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:oddHBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? OddHorizontalBand
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>evenHBand, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:evenHBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? EvenHorizontalBand
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>firstRowFirstColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:firstRowFirstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FirstRowFirstColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>firstRowLastColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:firstRowLastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FirstRowLastColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lastRowFirstColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:lastRowFirstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LastRowFirstColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lastRowLastColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:lastRowLastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LastRowLastColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cnfStyle");
            builder.AddElement<ConditionalFormatStyle>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new RequiredValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddValidator(new RequiredValidator() { IsRequired = (false), Version = (FileFormatVersions.Office2010) });
                    aBuilder.AddValidator(new RequiredValidator() { InitialVersion = (FileFormatVersions.Office2013) });
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[01]*"), Length = (12L) });
                })
                .AddAttribute("w:firstRow", a => a.FirstRow, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:lastRow", a => a.LastRow, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:firstColumn", a => a.FirstColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:lastColumn", a => a.LastColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:oddVBand", a => a.OddVerticalBand, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:evenVBand", a => a.EvenVerticalBand, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:oddHBand", a => a.OddHorizontalBand, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:evenHBand", a => a.EvenHorizontalBand, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:firstRowFirstColumn", a => a.FirstRowFirstColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:firstRowLastColumn", a => a.FirstRowLastColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:lastRowFirstColumn", a => a.LastRowFirstColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:lastRowLastColumn", a => a.LastRowLastColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConditionalFormatStyle>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellWidth Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcW.</para>
    /// </summary>
    public partial class TableCellWidth : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellWidth class.
        /// </summary>
        public TableCellWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcW");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellWidth>(deep);
    }

    /// <summary>
    /// <para>Defines the WidthBeforeTableRow Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wBefore.</para>
    /// </summary>
    public partial class WidthBeforeTableRow : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the WidthBeforeTableRow class.
        /// </summary>
        public WidthBeforeTableRow() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:wBefore");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WidthBeforeTableRow>(deep);
    }

    /// <summary>
    /// <para>Defines the WidthAfterTableRow Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:wAfter.</para>
    /// </summary>
    public partial class WidthAfterTableRow : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the WidthAfterTableRow class.
        /// </summary>
        public WidthAfterTableRow() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:wAfter");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WidthAfterTableRow>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellSpacing Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblCellSpacing.</para>
    /// </summary>
    public partial class TableCellSpacing : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellSpacing class.
        /// </summary>
        public TableCellSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblCellSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellSpacing>(deep);
    }

    /// <summary>
    /// <para>Defines the TableWidth Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblW.</para>
    /// </summary>
    public partial class TableWidth : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TableWidth class.
        /// </summary>
        public TableWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblW");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableWidth>(deep);
    }

    /// <summary>
    /// <para>Table Cell Top Margin Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:top.</para>
    /// </summary>
    public partial class TopMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the TopMargin class.
        /// </summary>
        public TopMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:top");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the StartMargin Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:start.</para>
    /// </summary>
    public partial class StartMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the StartMargin class.
        /// </summary>
        public StartMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:start");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Bottom Margin Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bottom.</para>
    /// </summary>
    public partial class BottomMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the BottomMargin class.
        /// </summary>
        public BottomMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bottom");
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@w:type")) { Application = ApplicationType.Word });
            builder.AddConstraint(new AttributeCannotOmitConstraint(builder.CreateQName("@w:w")) { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the EndMargin Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:end.</para>
    /// </summary>
    public partial class EndMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the EndMargin class.
        /// </summary>
        public EndMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:end");
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Left Margin Exception.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:left.</para>
    /// </summary>
    public partial class LeftMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the LeftMargin class.
        /// </summary>
        public LeftMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:left");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Right Margin Exception.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:right.</para>
    /// </summary>
    public partial class RightMargin : TableWidthType
    {
        /// <summary>
        /// Initializes a new instance of the RightMargin class.
        /// </summary>
        public RightMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:right");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the TableWidthType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TableWidthType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableWidthType class.
        /// </summary>
        protected TableWidthType() : base()
        {
        }

        /// <summary>
        /// <para>Table Width Value</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Width
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Table Width Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthUnitValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthUnitValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TableWidthType>()
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?%"), Version = (FileFormatVersions.Office2010) });
                        union.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2010) });
                    });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?%"), InitialVersion = (FileFormatVersions.Office2013) });
                        union.AddValidator<Int32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2013) });
                    });
                })
                .AddAttribute("w:type", a => a.Type);
        }
    }

    /// <summary>
    /// <para>Defines the HorizontalMerge Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hMerge.</para>
    /// </summary>
    public partial class HorizontalMerge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HorizontalMerge class.
        /// </summary>
        public HorizontalMerge() : base()
        {
        }

        /// <summary>
        /// <para>Horizontal Merge Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MergedCellValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MergedCellValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hMerge");
            builder.AddElement<HorizontalMerge>()
                .AddAttribute("w:val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HorizontalMerge>(deep);
    }

    /// <summary>
    /// <para>Defines the VerticalMerge Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vMerge.</para>
    /// </summary>
    public partial class VerticalMerge : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the VerticalMerge class.
        /// </summary>
        public VerticalMerge() : base()
        {
        }

        /// <summary>
        /// <para>Vertical Merge Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MergedCellValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MergedCellValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:vMerge");
            builder.AddElement<VerticalMerge>()
                .AddAttribute("w:val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalMerge>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellBorders Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcBorders.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopBorder" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftBorder" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StartBorder" /> <c>&lt;w:start></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomBorder" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightBorder" /> <c>&lt;w:right></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndBorder" /> <c>&lt;w:end></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder" /> <c>&lt;w:insideH></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder" /> <c>&lt;w:insideV></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopLeftToBottomRightCellBorder" /> <c>&lt;w:tl2br></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopRightToBottomLeftCellBorder" /> <c>&lt;w:tr2bl></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellBorders class.
        /// </summary>
        public TableCellBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellBorders(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcBorders");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StartBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopLeftToBottomRightCellBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopRightToBottomLeftCellBorder>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartBorder), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndBorder), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLeftToBottomRightCellBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopRightToBottomLeftCellBorder), 0, 1)
            };
        }

        /// <summary>
        /// <para>Table Cell Top Border.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopBorder? TopBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Left Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftBorder? LeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartBorder, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StartBorder? StartBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StartBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomBorder? BottomBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Right Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightBorder? RightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndBorder, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndBorder? EndBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Inside Horizontal Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder? InsideHorizontalBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Inside Vertical Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideV.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder? InsideVerticalBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Top Left to Bottom Right Diagonal Border.</para>
        /// <para>Represents the following element tag in the schema: w:tl2br.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopLeftToBottomRightCellBorder? TopLeftToBottomRightCellBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopLeftToBottomRightCellBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Top Right to Bottom Left Diagonal Border.</para>
        /// <para>Represents the following element tag in the schema: w:tr2bl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopRightToBottomLeftCellBorder? TopRightToBottomLeftCellBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopRightToBottomLeftCellBorder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the NoWrap Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noWrap.</para>
    /// </summary>
    public partial class NoWrap : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the NoWrap class.
        /// </summary>
        public NoWrap() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noWrap");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoWrap>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellFitText Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcFitText.</para>
    /// </summary>
    public partial class TableCellFitText : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellFitText class.
        /// </summary>
        public TableCellFitText() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcFitText");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellFitText>(deep);
    }

    /// <summary>
    /// <para>Defines the HideMark Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hideMark.</para>
    /// </summary>
    public partial class HideMark : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the HideMark class.
        /// </summary>
        public HideMark() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hideMark");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HideMark>(deep);
    }

    /// <summary>
    /// <para>Defines the CantSplit Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cantSplit.</para>
    /// </summary>
    public partial class CantSplit : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the CantSplit class.
        /// </summary>
        public CantSplit() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cantSplit");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CantSplit>(deep);
    }

    /// <summary>
    /// <para>Defines the TableHeader Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblHeader.</para>
    /// </summary>
    public partial class TableHeader : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the TableHeader class.
        /// </summary>
        public TableHeader() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblHeader");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableHeader>(deep);
    }

    /// <summary>
    /// <para>Defines the BiDiVisual Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bidiVisual.</para>
    /// </summary>
    public partial class BiDiVisual : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the BiDiVisual class.
        /// </summary>
        public BiDiVisual() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bidiVisual");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BiDiVisual>(deep);
    }

    /// <summary>
    /// <para>Frame Cannot Be Resized.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noResizeAllowed.</para>
    /// </summary>
    public partial class NoResizeAllowed : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the NoResizeAllowed class.
        /// </summary>
        public NoResizeAllowed() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noResizeAllowed");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoResizeAllowed>(deep);
    }

    /// <summary>
    /// <para>Maintain Link to Existing File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:linkedToFile.</para>
    /// </summary>
    public partial class LinkedToFile : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the LinkedToFile class.
        /// </summary>
        public LinkedToFile() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:linkedToFile");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LinkedToFile>(deep);
    }

    /// <summary>
    /// <para>Do Not Display Frameset Splitters.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noBorder.</para>
    /// </summary>
    public partial class NoBorder : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the NoBorder class.
        /// </summary>
        public NoBorder() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noBorder");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoBorder>(deep);
    }

    /// <summary>
    /// <para>Frameset Splitter Border Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:flatBorders.</para>
    /// </summary>
    public partial class FlatBorders : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the FlatBorders class.
        /// </summary>
        public FlatBorders() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:flatBorders");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FlatBorders>(deep);
    }

    /// <summary>
    /// <para>Automatically Merge User Formatting Into Style Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoRedefine.</para>
    /// </summary>
    public partial class AutoRedefine : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the AutoRedefine class.
        /// </summary>
        public AutoRedefine() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoRedefine");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoRedefine>(deep);
    }

    /// <summary>
    /// <para>Hide Style From User Interface.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hidden.</para>
    /// </summary>
    public partial class StyleHidden : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the StyleHidden class.
        /// </summary>
        public StyleHidden() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hidden");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleHidden>(deep);
    }

    /// <summary>
    /// <para>Hide Style From Main User Interface.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:semiHidden.</para>
    /// </summary>
    public partial class SemiHidden : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the SemiHidden class.
        /// </summary>
        public SemiHidden() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:semiHidden");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SemiHidden>(deep);
    }

    /// <summary>
    /// <para>Remove Semi-Hidden Property When Style Is Used.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:unhideWhenUsed.</para>
    /// </summary>
    public partial class UnhideWhenUsed : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the UnhideWhenUsed class.
        /// </summary>
        public UnhideWhenUsed() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:unhideWhenUsed");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UnhideWhenUsed>(deep);
    }

    /// <summary>
    /// <para>Primary Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:qFormat.</para>
    /// </summary>
    public partial class PrimaryStyle : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the PrimaryStyle class.
        /// </summary>
        public PrimaryStyle() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:qFormat");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PrimaryStyle>(deep);
    }

    /// <summary>
    /// <para>Style Cannot Be Applied.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:locked.</para>
    /// </summary>
    public partial class Locked : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the Locked class.
        /// </summary>
        public Locked() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:locked");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Locked>(deep);
    }

    /// <summary>
    /// <para>E-Mail Message Text Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:personal.</para>
    /// </summary>
    public partial class Personal : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the Personal class.
        /// </summary>
        public Personal() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:personal");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Personal>(deep);
    }

    /// <summary>
    /// <para>E-Mail Message Composition Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:personalCompose.</para>
    /// </summary>
    public partial class PersonalCompose : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the PersonalCompose class.
        /// </summary>
        public PersonalCompose() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:personalCompose");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PersonalCompose>(deep);
    }

    /// <summary>
    /// <para>E-Mail Message Reply Style.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:personalReply.</para>
    /// </summary>
    public partial class PersonalReply : OnOffOnlyType
    {
        /// <summary>
        /// Initializes a new instance of the PersonalReply class.
        /// </summary>
        public PersonalReply() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:personalReply");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PersonalReply>(deep);
    }

    /// <summary>
    /// <para>Defines the OnOffOnlyType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class OnOffOnlyType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the OnOffOnlyType class.
        /// </summary>
        protected OnOffOnlyType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.OnOffOnlyValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.OnOffOnlyValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<OnOffOnlyType>()
                .AddAttribute("w:val", a => a.Val);
        }
    }

    /// <summary>
    /// <para>Defines the TableCellMargin Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcMar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopMargin" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftMargin" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StartMargin" /> <c>&lt;w:start></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomMargin" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightMargin" /> <c>&lt;w:right></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndMargin" /> <c>&lt;w:end></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellMargin : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellMargin class.
        /// </summary>
        public TableCellMargin() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMargin class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMargin(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMargin class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMargin(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMargin class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellMargin(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcMar");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StartMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndMargin>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartMargin), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndMargin), 0, 1, version: FileFormatVersions.Office2010)
            };
        }

        /// <summary>
        /// <para>Table Cell Top Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopMargin? TopMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Left Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftMargin? LeftMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartMargin, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StartMargin? StartMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StartMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Bottom Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomMargin? BottomMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Right Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightMargin? RightMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndMargin, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndMargin? EndMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndMargin>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellVerticalAlignment Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vAlign.</para>
    /// </summary>
    public partial class TableCellVerticalAlignment : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellVerticalAlignment class.
        /// </summary>
        public TableCellVerticalAlignment() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableVerticalAlignmentValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableVerticalAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:vAlign");
            builder.AddElement<TableCellVerticalAlignment>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellVerticalAlignment>(deep);
    }

    /// <summary>
    /// <para>Defines the DivId Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divId.</para>
    /// </summary>
    public partial class DivId : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DivId class.
        /// </summary>
        public DivId() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:divId");
            builder.AddElement<DivId>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (1L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-1L) });
                    });
                });
            builder.AddConstraint(new AttributeValueSetConstraint(builder.CreateQName("w:val"), false, new string[] { "0" }) { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DivId>(deep);
    }

    /// <summary>
    /// <para>Defines the TableRowHeight Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trHeight.</para>
    /// </summary>
    public partial class TableRowHeight : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRowHeight class.
        /// </summary>
        public TableRowHeight() : base()
        {
        }

        /// <summary>
        /// <para>Table Row Height</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Table Row Height Type</para>
        /// <para>Represents the following attribute in the schema: w:hRule</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeightRuleValues>? HeightType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HeightRuleValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:trHeight");
            builder.AddElement<TableRowHeight>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:hRule", a => a.HeightType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRowHeight>(deep);
    }

    /// <summary>
    /// <para>Defines the TableJustification Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:jc.</para>
    /// </summary>
    public partial class TableJustification : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableJustification class.
        /// </summary>
        public TableJustification() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableRowAlignmentValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableRowAlignmentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:jc");
            builder.AddElement<TableJustification>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableJustification>(deep);
    }

    /// <summary>
    /// <para>Defines the TablePositionProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblpPr.</para>
    /// </summary>
    public partial class TablePositionProperties : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePositionProperties class.
        /// </summary>
        public TablePositionProperties() : base()
        {
        }

        /// <summary>
        /// <para>Distance From Left of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:leftFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? LeftFromText
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>(Distance From Right of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:rightFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? RightFromText
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance From Top of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:topFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? TopFromText
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance From Bottom of Table to Text</para>
        /// <para>Represents the following attribute in the schema: w:bottomFromText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? BottomFromText
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Table Vertical Anchor</para>
        /// <para>Represents the following attribute in the schema: w:vertAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAnchorValues>? VerticalAnchor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAnchorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Table Horizontal Anchor</para>
        /// <para>Represents the following attribute in the schema: w:horzAnchor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAnchorValues>? HorizontalAnchor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAnchorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Relative Horizontal Alignment From Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpXSpec</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAlignmentValues>? TablePositionXAlignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.HorizontalAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Absolute Horizontal Distance From Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpX</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? TablePositionX
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Relative Vertical Alignment from Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpYSpec</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAlignmentValues>? TablePositionYAlignment
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalAlignmentValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Absolute Vertical Distance From Anchor</para>
        /// <para>Represents the following attribute in the schema: w:tblpY</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? TablePositionY
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblpPr");
            builder.AddElement<TablePositionProperties>()
                .AddAttribute("w:leftFromText", a => a.LeftFromText, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:rightFromText", a => a.RightFromText, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:topFromText", a => a.TopFromText, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:bottomFromText", a => a.BottomFromText, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:vertAnchor", a => a.VerticalAnchor)
                .AddAttribute("w:horzAnchor", a => a.HorizontalAnchor)
                .AddAttribute("w:tblpXSpec", a => a.TablePositionXAlignment)
                .AddAttribute("w:tblpX", a => a.TablePositionX, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-31680L), MaxInclusive = (31680L) });
                })
                .AddAttribute("w:tblpYSpec", a => a.TablePositionYAlignment)
                .AddAttribute("w:tblpY", a => a.TablePositionY, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-31680L), MaxInclusive = (31680L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePositionProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the TableOverlap Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblOverlap.</para>
    /// </summary>
    public partial class TableOverlap : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableOverlap class.
        /// </summary>
        public TableOverlap() : base()
        {
        }

        /// <summary>
        /// <para>Floating Table Overlap Setting</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableOverlapValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableOverlapValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblOverlap");
            builder.AddElement<TableOverlap>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableOverlap>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyleRowBandSize Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStyleRowBandSize.</para>
    /// </summary>
    public partial class TableStyleRowBandSize : UnsignedDecimalNumberMax3Type
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleRowBandSize class.
        /// </summary>
        public TableStyleRowBandSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblStyleRowBandSize");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleRowBandSize>(deep);
    }

    /// <summary>
    /// <para>Defines the TableStyleColumnBandSize Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStyleColBandSize.</para>
    /// </summary>
    public partial class TableStyleColumnBandSize : UnsignedDecimalNumberMax3Type
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleColumnBandSize class.
        /// </summary>
        public TableStyleColumnBandSize() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblStyleColBandSize");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleColumnBandSize>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedDecimalNumberMax3Type Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UnsignedDecimalNumberMax3Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedDecimalNumberMax3Type class.
        /// </summary>
        protected UnsignedDecimalNumberMax3Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<UnsignedDecimalNumberMax3Type>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (3L) });
                });
        }
    }

    /// <summary>
    /// <para>Defines the TableIndentation Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblInd.</para>
    /// </summary>
    public partial class TableIndentation : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableIndentation class.
        /// </summary>
        public TableIndentation() : base()
        {
        }

        /// <summary>
        /// <para>w</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Width
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthUnitValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthUnitValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblInd");
            builder.AddElement<TableIndentation>()
                .AddAttribute("w:w", a => a.Width)
                .AddAttribute("w:type", a => a.Type);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableIndentation>(deep);
    }

    /// <summary>
    /// <para>Defines the TableBorders Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblBorders.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopBorder" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftBorder" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StartBorder" /> <c>&lt;w:start></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomBorder" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightBorder" /> <c>&lt;w:right></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndBorder" /> <c>&lt;w:end></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder" /> <c>&lt;w:insideH></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder" /> <c>&lt;w:insideV></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableBorders class.
        /// </summary>
        public TableBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableBorders(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblBorders");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StartBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartBorder), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndBorder), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder), 0, 1)
            };
        }

        /// <summary>
        /// <para>Table Top Border.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopBorder? TopBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Left Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftBorder? LeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartBorder, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StartBorder? StartBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StartBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomBorder? BottomBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Right Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightBorder? RightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndBorder, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndBorder? EndBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Inside Horizontal Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder? InsideHorizontalBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.InsideHorizontalBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Inside Vertical Edges Border.</para>
        /// <para>Represents the following element tag in the schema: w:insideV.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder? InsideVerticalBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.InsideVerticalBorder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the TableLayout Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblLayout.</para>
    /// </summary>
    public partial class TableLayout : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableLayout class.
        /// </summary>
        public TableLayout() : base()
        {
        }

        /// <summary>
        /// <para>Table Layout Setting</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableLayoutValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableLayoutValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblLayout");
            builder.AddElement<TableLayout>()
                .AddAttribute("w:type", a => a.Type);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableLayout>(deep);
    }

    /// <summary>
    /// <para>Defines the TableCellMarginDefault Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblCellMar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopMargin" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StartMargin" /> <c>&lt;w:start></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomMargin" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndMargin" /> <c>&lt;w:end></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellLeftMargin" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellRightMargin" /> <c>&lt;w:right></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellMarginDefault : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class.
        /// </summary>
        public TableCellMarginDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMarginDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellMarginDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellMarginDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellMarginDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblCellMar");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StartMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellLeftMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellRightMargin>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellLeftMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartMargin), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellRightMargin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndMargin), 0, 1, version: FileFormatVersions.Office2010)
            };
        }

        /// <summary>
        /// <para>Table Cell Top Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopMargin? TopMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Left Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellLeftMargin? TableCellLeftMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellLeftMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>StartMargin, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StartMargin? StartMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StartMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Bottom Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomMargin? BottomMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Right Margin Default.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellRightMargin? TableCellRightMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellRightMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndMargin, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:end.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndMargin? EndMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndMargin>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellMarginDefault>(deep);
    }

    /// <summary>
    /// <para>Footnote and Endnote Numbering Starting Value.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numStart.</para>
    /// </summary>
    public partial class NumberingStart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingStart class.
        /// </summary>
        public NumberingStart() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt16Value? Val
        {
            get => GetAttribute<UInt16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numStart");
            builder.AddElement<NumberingStart>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingStart>(deep);
    }

    /// <summary>
    /// <para>Footnote and Endnote Numbering Restart Location.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numRestart.</para>
    /// </summary>
    public partial class NumberingRestart : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingRestart class.
        /// </summary>
        public NumberingRestart() : base()
        {
        }

        /// <summary>
        /// <para>Automatic Numbering Restart Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.RestartNumberValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.RestartNumberValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numRestart");
            builder.AddElement<NumberingRestart>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingRestart>(deep);
    }

    /// <summary>
    /// <para>Defines the AltChunk Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:altChunk.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunkProperties" /> <c>&lt;w:altChunkPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class AltChunk : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AltChunk class.
        /// </summary>
        public AltChunk() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunk class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunk(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunk class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunk(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunk class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AltChunk(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:altChunk");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunkProperties>();
            builder.AddElement<AltChunk>()
                .AddAttribute("r:id", a => a.Id);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunkProperties), 0, 1)
            };
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/aFChunk"));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <summary>
        /// <para>External Content Import Properties.</para>
        /// <para>Represents the following element tag in the schema: w:altChunkPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AltChunkProperties? AltChunkProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AltChunkProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AltChunk>(deep);
    }

    /// <summary>
    /// <para>Defines the TableLook Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblLook.</para>
    /// </summary>
    public partial class TableLook : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableLook class.
        /// </summary>
        public TableLook() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>firstRow, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:firstRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FirstRow
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lastRow, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:lastRow</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LastRow
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>firstColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:firstColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? FirstColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lastColumn, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:lastColumn</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LastColumn
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>noHBand, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:noHBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? NoHorizontalBand
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>noVBand, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:noVBand</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? NoVerticalBand
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblLook");
            builder.AddElement<TableLook>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("w:firstRow", a => a.FirstRow, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:lastRow", a => a.LastRow, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:firstColumn", a => a.FirstColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:lastColumn", a => a.LastColumn, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:noHBand", a => a.NoHorizontalBand, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:noVBand", a => a.NoVerticalBand, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableLook>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingStart" /> <c>&lt;w:numStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnotePosition" /> <c>&lt;w:pos></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingFormat" /> <c>&lt;w:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingRestart" /> <c>&lt;w:numRestart></c></description></item>
    /// </list>
    /// </remark>
    public partial class FootnoteProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class.
        /// </summary>
        public FootnoteProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FootnoteProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnotePr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnotePosition>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnotePosition), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Footnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FootnotePosition? FootnotePosition
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FootnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingFormat? NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingStart? NumberingStart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingRestart? NumberingRestart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the EndnoteProperties Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnotePosition" /> <c>&lt;w:pos></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingStart" /> <c>&lt;w:numStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingFormat" /> <c>&lt;w:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingRestart" /> <c>&lt;w:numRestart></c></description></item>
    /// </list>
    /// </remark>
    public partial class EndnoteProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class.
        /// </summary>
        public EndnoteProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EndnoteProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnotePr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnotePosition>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnotePosition), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Endnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndnotePosition? EndnotePosition
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Endnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingFormat? NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingStart? NumberingStart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingRestart? NumberingRestart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the SectionType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    public partial class SectionType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SectionType class.
        /// </summary>
        public SectionType() : base()
        {
        }

        /// <summary>
        /// <para>Section Type Setting</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.SectionMarkValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.SectionMarkValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:type");
            builder.AddElement<SectionType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SectionType>(deep);
    }

    /// <summary>
    /// <para>Defines the PageSize Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgSz.</para>
    /// </summary>
    public partial class PageSize : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PageSize class.
        /// </summary>
        public PageSize() : base()
        {
        }

        /// <summary>
        /// <para>Page Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Width
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Page Height</para>
        /// <para>Represents the following attribute in the schema: w:h</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Height
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Page Orientation</para>
        /// <para>Represents the following attribute in the schema: w:orient</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageOrientationValues>? Orient
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageOrientationValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Printer Paper Code</para>
        /// <para>Represents the following attribute in the schema: w:code</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt16Value? Code
        {
            get => GetAttribute<UInt16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pgSz");
            builder.AddElement<PageSize>()
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:h", a => a.Height, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:orient", a => a.Orient)
                .AddAttribute("w:code", a => a.Code);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageSize>(deep);
    }

    /// <summary>
    /// <para>Defines the PageMargin Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgMar.</para>
    /// </summary>
    public partial class PageMargin : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PageMargin class.
        /// </summary>
        public PageMargin() : base()
        {
        }

        /// <summary>
        /// <para>Top Margin Spacing</para>
        /// <para>Represents the following attribute in the schema: w:top</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Top
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Right Margin Spacing</para>
        /// <para>Represents the following attribute in the schema: w:right</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Right
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Page Bottom Spacing</para>
        /// <para>Represents the following attribute in the schema: w:bottom</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Bottom
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Left Margin Spacing</para>
        /// <para>Represents the following attribute in the schema: w:left</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Left
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing to Top of Header</para>
        /// <para>Represents the following attribute in the schema: w:header</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Header
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing to Bottom of Footer</para>
        /// <para>Represents the following attribute in the schema: w:footer</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Footer
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Page Gutter Spacing</para>
        /// <para>Represents the following attribute in the schema: w:gutter</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Gutter
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pgMar");
            builder.AddElement<PageMargin>()
                .AddAttribute("w:top", a => a.Top, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-31680L), MaxInclusive = (31680L) });
                })
                .AddAttribute("w:right", a => a.Right, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:bottom", a => a.Bottom, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-31680L), MaxInclusive = (31680L) });
                })
                .AddAttribute("w:left", a => a.Left, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:header", a => a.Header, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:footer", a => a.Footer, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                })
                .AddAttribute("w:gutter", a => a.Gutter, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (31680L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the PaperSource Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:paperSrc.</para>
    /// </summary>
    public partial class PaperSource : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PaperSource class.
        /// </summary>
        public PaperSource() : base()
        {
        }

        /// <summary>
        /// <para>First Page Printer Tray Code</para>
        /// <para>Represents the following attribute in the schema: w:first</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt16Value? First
        {
            get => GetAttribute<UInt16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Non-First Page Printer Tray Code</para>
        /// <para>Represents the following attribute in the schema: w:other</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt16Value? Other
        {
            get => GetAttribute<UInt16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:paperSrc");
            builder.AddElement<PaperSource>()
                .AddAttribute("w:first", a => a.First)
                .AddAttribute("w:other", a => a.Other);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PaperSource>(deep);
    }

    /// <summary>
    /// <para>Defines the PageBorders Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgBorders.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopBorder" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftBorder" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomBorder" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightBorder" /> <c>&lt;w:right></c></description></item>
    /// </list>
    /// </remark>
    public partial class PageBorders : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PageBorders class.
        /// </summary>
        public PageBorders() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PageBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PageBorders(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PageBorders class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PageBorders(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PageBorders class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PageBorders(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Z-Ordering of Page Border</para>
        /// <para>Represents the following attribute in the schema: w:zOrder</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderZOrderValues>? ZOrder
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderZOrderValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Pages to Display Page Borders</para>
        /// <para>Represents the following attribute in the schema: w:display</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderDisplayValues>? Display
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderDisplayValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Page Border Positioning</para>
        /// <para>Represents the following attribute in the schema: w:offsetFrom</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderOffsetValues>? OffsetFrom
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.PageBorderOffsetValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pgBorders");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            builder.AddElement<PageBorders>()
                .AddAttribute("w:zOrder", a => a.ZOrder)
                .AddAttribute("w:display", a => a.Display)
                .AddAttribute("w:offsetFrom", a => a.OffsetFrom);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1)
            };
        }

        /// <summary>
        /// <para>Top Border.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopBorder? TopBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Border.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftBorder? LeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomBorder? BottomBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightBorder? RightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageBorders>(deep);
    }

    /// <summary>
    /// <para>Defines the LineNumberType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lnNumType.</para>
    /// </summary>
    public partial class LineNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LineNumberType class.
        /// </summary>
        public LineNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Line Number Increments to Display</para>
        /// <para>Represents the following attribute in the schema: w:countBy</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? CountBy
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Line Numbering Starting Value</para>
        /// <para>Represents the following attribute in the schema: w:start</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? Start
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Distance Between Text and Line Numbering</para>
        /// <para>Represents the following attribute in the schema: w:distance</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Distance
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Line Numbering Restart Setting</para>
        /// <para>Represents the following attribute in the schema: w:restart</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LineNumberRestartValues>? Restart
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.LineNumberRestartValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lnNumType");
            builder.AddElement<LineNumberType>()
                .AddAttribute("w:countBy", a => a.CountBy, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (100L) });
                })
                .AddAttribute("w:start", a => a.Start, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:distance", a => a.Distance, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:restart", a => a.Restart);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LineNumberType>(deep);
    }

    /// <summary>
    /// <para>Defines the PageNumberType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pgNumType.</para>
    /// </summary>
    public partial class PageNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PageNumberType class.
        /// </summary>
        public PageNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Page Number Format</para>
        /// <para>Represents the following attribute in the schema: w:fmt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues>? Format
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Starting Page Number</para>
        /// <para>Represents the following attribute in the schema: w:start</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Start
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Chapter Heading Style</para>
        /// <para>Represents the following attribute in the schema: w:chapStyle</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public ByteValue? ChapterStyle
        {
            get => GetAttribute<ByteValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Chapter Separator Character</para>
        /// <para>Represents the following attribute in the schema: w:chapSep</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ChapterSeparatorValues>? ChapterSeparator
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ChapterSeparatorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pgNumType");
            builder.AddElement<PageNumberType>()
                .AddAttribute("w:fmt", a => a.Format)
                .AddAttribute("w:start", a => a.Start, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:chapStyle", a => a.ChapterStyle)
                .AddAttribute("w:chapSep", a => a.ChapterSeparator);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PageNumberType>(deep);
    }

    /// <summary>
    /// <para>Defines the Columns Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:cols.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Column" /> <c>&lt;w:col></c></description></item>
    /// </list>
    /// </remark>
    public partial class Columns : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Columns class.
        /// </summary>
        public Columns() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Columns class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Columns(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Columns class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Columns(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Columns class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Columns(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Equal Column Widths</para>
        /// <para>Represents the following attribute in the schema: w:equalWidth</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? EqualWidth
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Spacing Between Equal Width Columns</para>
        /// <para>Represents the following attribute in the schema: w:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Space
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Number of Equal Width Columns</para>
        /// <para>Represents the following attribute in the schema: w:num</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? ColumnCount
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Draw Line Between Columns</para>
        /// <para>Represents the following attribute in the schema: w:sep</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Separator
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:cols");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Column>();
            builder.AddElement<Columns>()
                .AddAttribute("w:equalWidth", a => a.EqualWidth)
                .AddAttribute("w:space", a => a.Space, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:num", a => a.ColumnCount, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L), MaxInclusive = (45L) });
                })
                .AddAttribute("w:sep", a => a.Separator);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 0, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Column), 1, 45)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Columns>(deep);
    }

    /// <summary>
    /// <para>Defines the VerticalTextAlignmentOnPage Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:vAlign.</para>
    /// </summary>
    public partial class VerticalTextAlignmentOnPage : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the VerticalTextAlignmentOnPage class.
        /// </summary>
        public VerticalTextAlignmentOnPage() : base()
        {
        }

        /// <summary>
        /// <para>Vertical Alignment Setting</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalJustificationValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.VerticalJustificationValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:vAlign");
            builder.AddElement<VerticalTextAlignmentOnPage>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VerticalTextAlignmentOnPage>(deep);
    }

    /// <summary>
    /// <para>Defines the DocGrid Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docGrid.</para>
    /// </summary>
    public partial class DocGrid : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocGrid class.
        /// </summary>
        public DocGrid() : base()
        {
        }

        /// <summary>
        /// <para>Document Grid Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocGridValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocGridValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Document Grid Line Pitch</para>
        /// <para>Represents the following attribute in the schema: w:linePitch</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? LinePitch
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Document Grid Character Pitch</para>
        /// <para>Represents the following attribute in the schema: w:charSpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? CharacterSpace
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docGrid");
            builder.AddElement<DocGrid>()
                .AddAttribute("w:type", a => a.Type)
                .AddAttribute("w:linePitch", a => a.LinePitch)
                .AddAttribute("w:charSpace", a => a.CharacterSpace);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocGrid>(deep);
    }

    /// <summary>
    /// <para>Inclusion/Exclusion Data for Data Source.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:recipients.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RecipientData" /> <c>&lt;w:recipientData></c></description></item>
    /// </list>
    /// </remark>
    public partial class Recipients : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Recipients class.
        /// </summary>
        public Recipients() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Recipients class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Recipients(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Recipients class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Recipients(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Recipients class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Recipients(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:recipients");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RecipientData>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RecipientData), 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Recipients>(deep);
    }

    /// <summary>
    /// <para>Rich Text Box Content Container.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:txbxContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class TextBoxContent : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBoxContent class.
        /// </summary>
        public TextBoxContent() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBoxContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBoxContent(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBoxContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextBoxContent(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextBoxContent class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextBoxContent(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:txbxContent");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 1, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBoxContent>(deep);
    }

    /// <summary>
    /// <para>Comments Collection.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:comments.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Comment" /> <c>&lt;w:comment></c></description></item>
    /// </list>
    /// </remark>
    public partial class Comments : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Comments class.
        /// </summary>
        public Comments() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comments(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comments(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Comments(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:comments");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Comment>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Comment), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comments>(deep);

        internal Comments(WordprocessingCommentsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the WordprocessingCommentsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(WordprocessingCommentsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the WordprocessingCommentsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(WordprocessingCommentsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the WordprocessingCommentsPart associated with this element.
        /// </summary>
        public WordprocessingCommentsPart? WordprocessingCommentsPart
        {
            get => OpenXmlPart as WordprocessingCommentsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Document Footnotes.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnotes.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Footnote" /> <c>&lt;w:footnote></c></description></item>
    /// </list>
    /// </remark>
    public partial class Footnotes : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Footnotes class.
        /// </summary>
        public Footnotes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnotes(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnotes(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnotes class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Footnotes(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnotes");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Footnote>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Footnote), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Footnotes>(deep);

        internal Footnotes(FootnotesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the FootnotesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(FootnotesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the FootnotesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(FootnotesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the FootnotesPart associated with this element.
        /// </summary>
        public FootnotesPart? FootnotesPart
        {
            get => OpenXmlPart as FootnotesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Document Endnotes.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnotes.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Endnote" /> <c>&lt;w:endnote></c></description></item>
    /// </list>
    /// </remark>
    public partial class Endnotes : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Endnotes class.
        /// </summary>
        public Endnotes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnotes(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnotes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnotes(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnotes class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Endnotes(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnotes");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Endnote>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Endnote), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Endnotes>(deep);

        internal Endnotes(EndnotesPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the EndnotesPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(EndnotesPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the EndnotesPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(EndnotesPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the EndnotesPart associated with this element.
        /// </summary>
        public EndnotesPart? EndnotesPart
        {
            get => OpenXmlPart as EndnotesPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Header.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Header : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Header class.
        /// </summary>
        public Header() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Header class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Header(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Header class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Header(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Header class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Header(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hdr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 1, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Header>(deep);

        internal Header(HeaderPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the HeaderPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(HeaderPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the HeaderPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(HeaderPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the HeaderPart associated with this element.
        /// </summary>
        public HeaderPart? HeaderPart
        {
            get => OpenXmlPart as HeaderPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Footer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ftr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Footer : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Footer class.
        /// </summary>
        public Footer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Footer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ftr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 1, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                        }
                                                    },
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Footer>(deep);

        internal Footer(FooterPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the FooterPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(FooterPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the FooterPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(FooterPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the FooterPart associated with this element.
        /// </summary>
        public FooterPart? FooterPart
        {
            get => OpenXmlPart as FooterPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the HeaderFooterType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class HeaderFooterType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class.
        /// </summary>
        protected HeaderFooterType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HeaderFooterType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected HeaderFooterType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderFooterType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected HeaderFooterType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
        }
    }

    /// <summary>
    /// <para>Document Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:settings.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathProperties" /> <c>&lt;m:mathPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary" /> <c>&lt;sl:schemaLibrary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Captions" /> <c>&lt;w:captions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingControl" /> <c>&lt;w:characterSpacingControl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ColorSchemeMapping" /> <c>&lt;w:clrSchemeMapping></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Compatibility" /> <c>&lt;w:compat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocumentProtection" /> <c>&lt;w:documentProtection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Rsids" /> <c>&lt;w:rsids></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocumentType" /> <c>&lt;w:documentType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocumentVariables" /> <c>&lt;w:docVars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnoteDocumentWideProperties" /> <c>&lt;w:endnotePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ForceUpgrade" /> <c>&lt;w:forceUpgrade></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteDocumentWideProperties" /> <c>&lt;w:footnotePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksAfterKinsoku" /> <c>&lt;w:noLineBreaksAfter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksBeforeKinsoku" /> <c>&lt;w:noLineBreaksBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ThemeFontLanguages" /> <c>&lt;w:themeFontLang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MailMerge" /> <c>&lt;w:mailMerge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DefaultTabStop" /> <c>&lt;w:defaultTabStop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookFoldPrintingSheets" /> <c>&lt;w:bookFoldPrintingSheets></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RemovePersonalInformation" /> <c>&lt;w:removePersonalInformation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RemoveDateAndTime" /> <c>&lt;w:removeDateAndTime></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotDisplayPageBoundaries" /> <c>&lt;w:doNotDisplayPageBoundaries></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DisplayBackgroundShape" /> <c>&lt;w:displayBackgroundShape></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrintPostScriptOverText" /> <c>&lt;w:printPostScriptOverText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrintFractionalCharacterWidth" /> <c>&lt;w:printFractionalCharacterWidth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrintFormsData" /> <c>&lt;w:printFormsData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbedTrueTypeFonts" /> <c>&lt;w:embedTrueTypeFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbedSystemFonts" /> <c>&lt;w:embedSystemFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SaveSubsetFonts" /> <c>&lt;w:saveSubsetFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SaveFormsData" /> <c>&lt;w:saveFormsData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MirrorMargins" /> <c>&lt;w:mirrorMargins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AlignBorderAndEdges" /> <c>&lt;w:alignBordersAndEdges></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundHeader" /> <c>&lt;w:bordersDoNotSurroundHeader></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundFooter" /> <c>&lt;w:bordersDoNotSurroundFooter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GutterAtTop" /> <c>&lt;w:gutterAtTop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HideSpellingErrors" /> <c>&lt;w:hideSpellingErrors></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HideGrammaticalErrors" /> <c>&lt;w:hideGrammaticalErrors></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FormsDesign" /> <c>&lt;w:formsDesign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LinkStyles" /> <c>&lt;w:linkStyles></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TrackRevisions" /> <c>&lt;w:trackRevisions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotTrackMoves" /> <c>&lt;w:doNotTrackMoves></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotTrackFormatting" /> <c>&lt;w:doNotTrackFormatting></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoFormatOverride" /> <c>&lt;w:autoFormatOverride></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleLockThemesPart" /> <c>&lt;w:styleLockTheme></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleLockStylesPart" /> <c>&lt;w:styleLockQFSet></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoHyphenation" /> <c>&lt;w:autoHyphenation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotHyphenateCaps" /> <c>&lt;w:doNotHyphenateCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ShowEnvelope" /> <c>&lt;w:showEnvelope></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EvenAndOddHeaders" /> <c>&lt;w:evenAndOddHeaders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookFoldReversePrinting" /> <c>&lt;w:bookFoldRevPrinting></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookFoldPrinting" /> <c>&lt;w:bookFoldPrinting></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotUseMarginsForDrawingGridOrigin" /> <c>&lt;w:doNotUseMarginsForDrawingGridOrigin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotShadeFormData" /> <c>&lt;w:doNotShadeFormData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoPunctuationKerning" /> <c>&lt;w:noPunctuationKerning></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrintTwoOnOne" /> <c>&lt;w:printTwoOnOne></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StrictFirstAndLastChars" /> <c>&lt;w:strictFirstAndLastChars></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SavePreviewPicture" /> <c>&lt;w:savePreviewPicture></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotValidateAgainstSchema" /> <c>&lt;w:doNotValidateAgainstSchema></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SaveInvalidXml" /> <c>&lt;w:saveInvalidXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.IgnoreMixedContent" /> <c>&lt;w:ignoreMixedContent></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AlwaysShowPlaceholderText" /> <c>&lt;w:alwaysShowPlaceholderText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotDemarcateInvalidXml" /> <c>&lt;w:doNotDemarcateInvalidXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SaveXmlDataOnly" /> <c>&lt;w:saveXmlDataOnly></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseXsltWhenSaving" /> <c>&lt;w:useXSLTWhenSaving></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ShowXmlTags" /> <c>&lt;w:showXMLTags></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AlwaysMergeEmptyNamespace" /> <c>&lt;w:alwaysMergeEmptyNamespace></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UpdateFieldsOnOpen" /> <c>&lt;w:updateFields></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UICompatibleWith97To2003" /> <c>&lt;w:uiCompat97To2003></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotIncludeSubdocsInStats" /> <c>&lt;w:doNotIncludeSubdocsInStats></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotAutoCompressPictures" /> <c>&lt;w:doNotAutoCompressPictures></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased" /> <c>&lt;w15:chartTrackingRefBased></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofState" /> <c>&lt;w:proofState></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ReadModeInkLockDown" /> <c>&lt;w:readModeInkLockDown></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AttachedTemplate" /> <c>&lt;w:attachedTemplate></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SaveThroughXslt" /> <c>&lt;w:saveThroughXslt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HeaderShapeDefaults" /> <c>&lt;w:hdrShapeDefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ShapeDefaults" /> <c>&lt;w:shapeDefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AttachedSchema" /> <c>&lt;w:attachedSchema></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DecimalSymbol" /> <c>&lt;w:decimalSymbol></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ListSeparator" /> <c>&lt;w:listSeparator></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ClickAndTypeStyle" /> <c>&lt;w:clickAndTypeStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DefaultTableStyle" /> <c>&lt;w:defaultTableStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StylePaneFormatFilter" /> <c>&lt;w:stylePaneFormatFilter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StylePaneSortMethods" /> <c>&lt;w:stylePaneSortMethod></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RevisionView" /> <c>&lt;w:revisionView></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyphenationZone" /> <c>&lt;w:hyphenationZone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalSpacing" /> <c>&lt;w:drawingGridHorizontalSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalSpacing" /> <c>&lt;w:drawingGridVerticalSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalOrigin" /> <c>&lt;w:drawingGridHorizontalOrigin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalOrigin" /> <c>&lt;w:drawingGridVerticalOrigin></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SummaryLength" /> <c>&lt;w:summaryLength></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DisplayHorizontalDrawingGrid" /> <c>&lt;w:displayHorizontalDrawingGridEvery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DisplayVerticalDrawingGrid" /> <c>&lt;w:displayVerticalDrawingGridEvery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConsecutiveHyphenLimit" /> <c>&lt;w:consecutiveHyphenLimit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.View" /> <c>&lt;w:view></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WriteProtection" /> <c>&lt;w:writeProtection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ActiveWritingStyle" /> <c>&lt;w:activeWritingStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Zoom" /> <c>&lt;w:zoom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi" /> <c>&lt;w14:defaultImageDpi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.DocumentId" /> <c>&lt;w14:docId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData" /> <c>&lt;w14:discardImageEditingData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictMode" /> <c>&lt;w14:conflictMode></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId" /> <c>&lt;w15:docId></c></description></item>
    /// </list>
    /// </remark>
    public partial class Settings : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Settings class.
        /// </summary>
        public Settings() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Settings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Settings(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Settings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Settings(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Settings class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Settings(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:settings");
            builder.AddChild<DocumentFormat.OpenXml.Math.MathProperties>();
            builder.AddChild<DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Captions>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeMapping>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Compatibility>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocumentProtection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Rsids>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocumentType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocumentVariables>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnoteDocumentWideProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ForceUpgrade>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteDocumentWideProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksAfterKinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksBeforeKinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ThemeFontLanguages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MailMerge>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DefaultTabStop>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookFoldPrintingSheets>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RemovePersonalInformation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RemoveDateAndTime>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotDisplayPageBoundaries>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DisplayBackgroundShape>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrintPostScriptOverText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrintFractionalCharacterWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrintFormsData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbedTrueTypeFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbedSystemFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SaveSubsetFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SaveFormsData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MirrorMargins>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AlignBorderAndEdges>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundFooter>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GutterAtTop>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HideSpellingErrors>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HideGrammaticalErrors>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FormsDesign>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LinkStyles>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TrackRevisions>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotTrackMoves>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotTrackFormatting>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoFormatOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleLockThemesPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleLockStylesPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoHyphenation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotHyphenateCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ShowEnvelope>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EvenAndOddHeaders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookFoldReversePrinting>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookFoldPrinting>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotUseMarginsForDrawingGridOrigin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotShadeFormData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoPunctuationKerning>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrintTwoOnOne>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StrictFirstAndLastChars>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SavePreviewPicture>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotValidateAgainstSchema>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SaveInvalidXml>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.IgnoreMixedContent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AlwaysShowPlaceholderText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotDemarcateInvalidXml>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SaveXmlDataOnly>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseXsltWhenSaving>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ShowXmlTags>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AlwaysMergeEmptyNamespace>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UpdateFieldsOnOpen>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UICompatibleWith97To2003>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotIncludeSubdocsInStats>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotAutoCompressPictures>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofState>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ReadModeInkLockDown>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AttachedTemplate>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SaveThroughXslt>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HeaderShapeDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ShapeDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AttachedSchema>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DecimalSymbol>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ListSeparator>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ClickAndTypeStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DefaultTableStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StylePaneFormatFilter>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StylePaneSortMethods>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RevisionView>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HyphenationZone>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalOrigin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalOrigin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SummaryLength>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DisplayHorizontalDrawingGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DisplayVerticalDrawingGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConsecutiveHyphenLimit>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.View>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WriteProtection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ActiveWritingStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Zoom>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DocumentId>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictMode>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WriteProtection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.View), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Zoom), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RemovePersonalInformation), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RemoveDateAndTime), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotDisplayPageBoundaries), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayBackgroundShape), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintPostScriptOverText), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintFractionalCharacterWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintFormsData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedTrueTypeFonts), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedSystemFonts), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveSubsetFonts), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveFormsData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorMargins), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlignBorderAndEdges), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundHeader), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundFooter), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GutterAtTop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideSpellingErrors), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideGrammaticalErrors), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ActiveWritingStyle), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofState), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormsDesign), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AttachedTemplate), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkStyles), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StylePaneFormatFilter), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StylePaneSortMethods), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailMerge), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RevisionView), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TrackRevisions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotTrackMoves), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotTrackFormatting), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentProtection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoFormatOverride), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleLockThemesPart), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleLockStylesPart), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultTabStop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoHyphenation), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConsecutiveHyphenLimit), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyphenationZone), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotHyphenateCaps), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowEnvelope), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SummaryLength), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ClickAndTypeStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultTableStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EvenAndOddHeaders), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookFoldReversePrinting), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookFoldPrinting), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookFoldPrintingSheets), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayHorizontalDrawingGrid), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayVerticalDrawingGrid), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseMarginsForDrawingGridOrigin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridHorizontalOrigin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DrawingGridVerticalOrigin), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotShadeFormData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoPunctuationKerning), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingControl), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintTwoOnOne), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StrictFirstAndLastChars), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksAfterKinsoku), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoLineBreaksBeforeKinsoku), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SavePreviewPicture), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotValidateAgainstSchema), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveInvalidXml), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.IgnoreMixedContent), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlwaysShowPlaceholderText), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotDemarcateInvalidXml), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveXmlDataOnly), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseXsltWhenSaving), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SaveThroughXslt), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowXmlTags), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlwaysMergeEmptyNamespace), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UpdateFieldsOnOpen), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HeaderShapeDefaults), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteDocumentWideProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteDocumentWideProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Compatibility), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentVariables), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Rsids), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UICompatibleWith97To2003), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AttachedSchema), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ThemeFontLanguages), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColorSchemeMapping), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotIncludeSubdocsInStats), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotAutoCompressPictures), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ForceUpgrade), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Captions), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ReadModeInkLockDown), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.CustomXmlSchemaReferences.SchemaLibrary), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShapeDefaults), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DecimalSymbol), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListSeparator), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.DocumentId), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.DiscardImageEditingData), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.DefaultImageDpi), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictMode), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.ChartTrackingRefBased), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId), 0, 1, version: FileFormatVersions.Office2013)
            };
        }

        /// <summary>
        /// <para>Write Protection.</para>
        /// <para>Represents the following element tag in the schema: w:writeProtection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WriteProtection? WriteProtection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WriteProtection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Document View Setting.</para>
        /// <para>Represents the following element tag in the schema: w:view.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.View? View
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.View>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Magnification Setting.</para>
        /// <para>Represents the following element tag in the schema: w:zoom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Zoom? Zoom
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Zoom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Personal Information from Document Properties.</para>
        /// <para>Represents the following element tag in the schema: w:removePersonalInformation.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RemovePersonalInformation? RemovePersonalInformation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RemovePersonalInformation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Date and Time from Annotations.</para>
        /// <para>Represents the following element tag in the schema: w:removeDateAndTime.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RemoveDateAndTime? RemoveDateAndTime
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RemoveDateAndTime>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Visual Boundary For Header/Footer or Between Pages.</para>
        /// <para>Represents the following element tag in the schema: w:doNotDisplayPageBoundaries.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotDisplayPageBoundaries? DoNotDisplayPageBoundaries
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotDisplayPageBoundaries>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Display Background Objects When Displaying Document.</para>
        /// <para>Represents the following element tag in the schema: w:displayBackgroundShape.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DisplayBackgroundShape? DisplayBackgroundShape
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DisplayBackgroundShape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print PostScript Codes With Document Text.</para>
        /// <para>Represents the following element tag in the schema: w:printPostScriptOverText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrintPostScriptOverText? PrintPostScriptOverText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrintPostScriptOverText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print Fractional Character Widths.</para>
        /// <para>Represents the following element tag in the schema: w:printFractionalCharacterWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrintFractionalCharacterWidth? PrintFractionalCharacterWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrintFractionalCharacterWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Only Print Form Field Content.</para>
        /// <para>Represents the following element tag in the schema: w:printFormsData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrintFormsData? PrintFormsData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrintFormsData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Embed TrueType Fonts.</para>
        /// <para>Represents the following element tag in the schema: w:embedTrueTypeFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EmbedTrueTypeFonts? EmbedTrueTypeFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EmbedTrueTypeFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Embed Common System Fonts.</para>
        /// <para>Represents the following element tag in the schema: w:embedSystemFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EmbedSystemFonts? EmbedSystemFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EmbedSystemFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Subset Fonts When Embedding.</para>
        /// <para>Represents the following element tag in the schema: w:saveSubsetFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SaveSubsetFonts? SaveSubsetFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SaveSubsetFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Only Save Form Field Content.</para>
        /// <para>Represents the following element tag in the schema: w:saveFormsData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SaveFormsData? SaveFormsData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SaveFormsData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Mirror Page Margins.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorMargins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MirrorMargins? MirrorMargins
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MirrorMargins>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Align Paragraph and Table Borders with Page Border.</para>
        /// <para>Represents the following element tag in the schema: w:alignBordersAndEdges.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AlignBorderAndEdges? AlignBorderAndEdges
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AlignBorderAndEdges>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Page Border Excludes Header.</para>
        /// <para>Represents the following element tag in the schema: w:bordersDoNotSurroundHeader.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundHeader? BordersDoNotSurroundHeader
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundHeader>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Page Border Excludes Footer.</para>
        /// <para>Represents the following element tag in the schema: w:bordersDoNotSurroundFooter.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundFooter? BordersDoNotSurroundFooter
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BordersDoNotSurroundFooter>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position Gutter At Top of Page.</para>
        /// <para>Represents the following element tag in the schema: w:gutterAtTop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.GutterAtTop? GutterAtTop
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.GutterAtTop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Visual Indication of Spelling Errors.</para>
        /// <para>Represents the following element tag in the schema: w:hideSpellingErrors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HideSpellingErrors? HideSpellingErrors
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HideSpellingErrors>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Visual Indication of Grammatical Errors.</para>
        /// <para>Represents the following element tag in the schema: w:hideGrammaticalErrors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HideGrammaticalErrors? HideGrammaticalErrors
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HideGrammaticalErrors>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Settings>(deep);

        internal Settings(DocumentSettingsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the DocumentSettingsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(DocumentSettingsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the DocumentSettingsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(DocumentSettingsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the DocumentSettingsPart associated with this element.
        /// </summary>
        public DocumentSettingsPart? DocumentSettingsPart
        {
            get => OpenXmlPart as DocumentSettingsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Web Page Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:webSettings.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PixelsPerInch" /> <c>&lt;w:pixelsPerInch></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Divs" /> <c>&lt;w:divs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Frameset" /> <c>&lt;w:frameset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OptimizeForBrowser" /> <c>&lt;w:optimizeForBrowser></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RelyOnVML" /> <c>&lt;w:relyOnVML></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AllowPNG" /> <c>&lt;w:allowPNG></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotRelyOnCSS" /> <c>&lt;w:doNotRelyOnCSS></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotSaveAsSingleFile" /> <c>&lt;w:doNotSaveAsSingleFile></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotOrganizeInFolder" /> <c>&lt;w:doNotOrganizeInFolder></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotUseLongFileNames" /> <c>&lt;w:doNotUseLongFileNames></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebPageEncoding" /> <c>&lt;w:encoding></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TargetScreenSize" /> <c>&lt;w:targetScreenSz></c></description></item>
    /// </list>
    /// </remark>
    public partial class WebSettings : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the WebSettings class.
        /// </summary>
        public WebSettings() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the WebSettings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WebSettings(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WebSettings class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WebSettings(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WebSettings class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public WebSettings(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:webSettings");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PixelsPerInch>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Divs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Frameset>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OptimizeForBrowser>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RelyOnVML>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AllowPNG>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotRelyOnCSS>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotSaveAsSingleFile>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotOrganizeInFolder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotUseLongFileNames>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebPageEncoding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TargetScreenSize>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Frameset), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Divs), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebPageEncoding), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OptimizeForBrowser), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RelyOnVML), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AllowPNG), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotRelyOnCSS), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSaveAsSingleFile), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotOrganizeInFolder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseLongFileNames), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PixelsPerInch), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TargetScreenSize), 0, 1)
            };
        }

        /// <summary>
        /// <para>Frameset.</para>
        /// <para>Represents the following element tag in the schema: w:frameset.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Frameset? Frameset
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Frameset>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Divs.</para>
        /// <para>Represents the following element tag in the schema: w:divs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Divs? Divs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Divs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebPageEncoding.</para>
        /// <para>Represents the following element tag in the schema: w:encoding.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WebPageEncoding? WebPageEncoding
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WebPageEncoding>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OptimizeForBrowser.</para>
        /// <para>Represents the following element tag in the schema: w:optimizeForBrowser.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OptimizeForBrowser? OptimizeForBrowser
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OptimizeForBrowser>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RelyOnVML.</para>
        /// <para>Represents the following element tag in the schema: w:relyOnVML.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RelyOnVML? RelyOnVML
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RelyOnVML>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AllowPNG.</para>
        /// <para>Represents the following element tag in the schema: w:allowPNG.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AllowPNG? AllowPNG
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AllowPNG>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotRelyOnCSS.</para>
        /// <para>Represents the following element tag in the schema: w:doNotRelyOnCSS.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotRelyOnCSS? DoNotRelyOnCSS
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotRelyOnCSS>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotSaveAsSingleFile.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSaveAsSingleFile.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotSaveAsSingleFile? DoNotSaveAsSingleFile
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotSaveAsSingleFile>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotOrganizeInFolder.</para>
        /// <para>Represents the following element tag in the schema: w:doNotOrganizeInFolder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotOrganizeInFolder? DoNotOrganizeInFolder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotOrganizeInFolder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoNotUseLongFileNames.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseLongFileNames.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotUseLongFileNames? DoNotUseLongFileNames
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotUseLongFileNames>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PixelsPerInch.</para>
        /// <para>Represents the following element tag in the schema: w:pixelsPerInch.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PixelsPerInch? PixelsPerInch
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PixelsPerInch>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TargetScreenSize.</para>
        /// <para>Represents the following element tag in the schema: w:targetScreenSz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TargetScreenSize? TargetScreenSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TargetScreenSize>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WebSettings>(deep);

        internal WebSettings(WebSettingsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the WebSettingsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(WebSettingsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the WebSettingsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(WebSettingsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the WebSettingsPart associated with this element.
        /// </summary>
        public WebSettingsPart? WebSettingsPart
        {
            get => OpenXmlPart as WebSettingsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Font Table Root Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fonts.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Font" /> <c>&lt;w:font></c></description></item>
    /// </list>
    /// </remark>
    public partial class Fonts : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Fonts class.
        /// </summary>
        public Fonts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Fonts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Fonts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Fonts(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fonts");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Font>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Font), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Fonts>(deep);

        internal Fonts(FontTablePart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the FontTablePart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(FontTablePart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the FontTablePart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(FontTablePart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the FontTablePart associated with this element.
        /// </summary>
        public FontTablePart? FontTablePart
        {
            get => OpenXmlPart as FontTablePart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Numbering Definitions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numbering.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AbstractNum" /> <c>&lt;w:abstractNum></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingIdMacAtCleanup" /> <c>&lt;w:numIdMacAtCleanup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingInstance" /> <c>&lt;w:num></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingPictureBullet" /> <c>&lt;w:numPicBullet></c></description></item>
    /// </list>
    /// </remark>
    public partial class Numbering : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Numbering class.
        /// </summary>
        public Numbering() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Numbering class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Numbering(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Numbering class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Numbering(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Numbering class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Numbering(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numbering");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AbstractNum>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingIdMacAtCleanup>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingInstance>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingPictureBullet>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingPictureBullet), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AbstractNum), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingInstance), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingIdMacAtCleanup), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Numbering>(deep);

        internal Numbering(NumberingDefinitionsPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the NumberingDefinitionsPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(NumberingDefinitionsPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the NumberingDefinitionsPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(NumberingDefinitionsPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the NumberingDefinitionsPart associated with this element.
        /// </summary>
        public NumberingDefinitionsPart? NumberingDefinitionsPart
        {
            get => OpenXmlPart as NumberingDefinitionsPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Style Definitions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:styles.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocDefaults" /> <c>&lt;w:docDefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LatentStyles" /> <c>&lt;w:latentStyles></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Style" /> <c>&lt;w:style></c></description></item>
    /// </list>
    /// </remark>
    public partial class Styles : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Styles class.
        /// </summary>
        public Styles() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Styles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Styles(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Styles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Styles(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Styles class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Styles(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:styles");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LatentStyles>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Style>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocDefaults), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LatentStyles), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Style), 0, 0)
            };
        }

        /// <summary>
        /// <para>Document Default Paragraph and Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:docDefaults.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocDefaults? DocDefaults
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocDefaults>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Latent Style Information.</para>
        /// <para>Represents the following element tag in the schema: w:latentStyles.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LatentStyles? LatentStyles
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LatentStyles>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Styles>(deep);
    }

    /// <summary>
    /// <para>Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:document.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocumentBackground" /> <c>&lt;w:background></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Body" /> <c>&lt;w:body></c></description></item>
    /// </list>
    /// </remark>
    public partial class Document : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the Document class.
        /// </summary>
        public Document() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Document class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Document(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Document class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Document(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Document class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Document(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>conformance</para>
        /// <para>Represents the following attribute in the schema: w:conformance</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentConformance>? Conformance
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentConformance>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:document");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocumentBackground>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Body>();
            builder.AddElement<Document>()
                .AddAttribute("w:conformance", a => a.Conformance);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentBackground), 0, 1)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Body), 0, 1)
                }
            };
        }

        /// <summary>
        /// <para>Document Background.</para>
        /// <para>Represents the following element tag in the schema: w:background.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocumentBackground? DocumentBackground
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocumentBackground>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Body.</para>
        /// <para>Represents the following element tag in the schema: w:body.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Body? Body
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Body>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Document>(deep);

        internal Document(MainDocumentPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the MainDocumentPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(MainDocumentPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the MainDocumentPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(MainDocumentPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the MainDocumentPart associated with this element.
        /// </summary>
        public MainDocumentPart? MainDocumentPart
        {
            get => OpenXmlPart as MainDocumentPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Glossary Document Root Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:glossaryDocument.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocumentBackground" /> <c>&lt;w:background></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocParts" /> <c>&lt;w:docParts></c></description></item>
    /// </list>
    /// </remark>
    public partial class GlossaryDocument : OpenXmlPartRootElement
    {
        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class.
        /// </summary>
        public GlossaryDocument() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GlossaryDocument(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public GlossaryDocument(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GlossaryDocument class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public GlossaryDocument(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:glossaryDocument");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocumentBackground>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocParts>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentBackground), 0, 1)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocParts), 0, 1)
                }
            };
        }

        /// <summary>
        /// <para>Document Background.</para>
        /// <para>Represents the following element tag in the schema: w:background.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocumentBackground? DocumentBackground
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocumentBackground>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>List of Glossary Document Entries.</para>
        /// <para>Represents the following element tag in the schema: w:docParts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocParts? DocParts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocParts>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GlossaryDocument>(deep);

        internal GlossaryDocument(GlossaryDocumentPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the GlossaryDocumentPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(GlossaryDocumentPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the GlossaryDocumentPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(GlossaryDocumentPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the GlossaryDocumentPart associated with this element.
        /// </summary>
        public GlossaryDocumentPart? GlossaryDocumentPart
        {
            get => OpenXmlPart as GlossaryDocumentPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Previous Table-Level Property Exceptions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrEx.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableBorders" /> <c>&lt;w:tblBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault" /> <c>&lt;w:tblCellMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLayout" /> <c>&lt;w:tblLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLook" /> <c>&lt;w:tblLook></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableWidth" /> <c>&lt;w:tblW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableIndentation" /> <c>&lt;w:tblInd></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousTablePropertyExceptions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class.
        /// </summary>
        public PreviousTablePropertyExceptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTablePropertyExceptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTablePropertyExceptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTablePropertyExceptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTablePropertyExceptions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPrEx");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
            };
        }

        /// <summary>
        /// <para>Preferred Table Width Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableWidth? TableWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Alignment Exception.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableJustification? TableJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Spacing Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing? TableCellSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Indent from Leading Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableIndentation? TableIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Borders Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableBorders? TableBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Shading Exception.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Layout Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLayout? TableLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Margin Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault? TableCellMarginDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Settings Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLook? TableLook
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTablePropertyExceptions>(deep);
    }

    /// <summary>
    /// <para>Previous Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CellMerge" /> <c>&lt;w:cellMerge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle" /> <c>&lt;w:cnfStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridSpan" /> <c>&lt;w:gridSpan></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge" /> <c>&lt;w:hMerge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoWrap" /> <c>&lt;w:noWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellFitText" /> <c>&lt;w:tcFitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HideMark" /> <c>&lt;w:hideMark></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellWidth" /> <c>&lt;w:tcW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellBorders" /> <c>&lt;w:tcBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMargin" /> <c>&lt;w:tcMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CellInsertion" /> <c>&lt;w:cellIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CellDeletion" /> <c>&lt;w:cellDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment" /> <c>&lt;w:vAlign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalMerge" /> <c>&lt;w:vMerge></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousTableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class.
        /// </summary>
        public PreviousTableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableCellProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CellMerge>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridSpan>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellFitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HideMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CellInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CellDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalMerge>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellWidth), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridSpan), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalMerge), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellBorders), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellFitText), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideMark), 0, 1)
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellInsertion), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellDeletion), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellMerge), 0, 1)
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle? ConditionalFormatStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tcW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellWidth? TableCellWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GridSpan.</para>
        /// <para>Represents the following element tag in the schema: w:gridSpan.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.GridSpan? GridSpan
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.GridSpan>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HorizontalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:hMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge? HorizontalMerge
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:vMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalMerge? VerticalMerge
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tcBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellBorders? TableCellBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoWrap? NoWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMargin? TableCellMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellFitText.</para>
        /// <para>Represents the following element tag in the schema: w:tcFitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellFitText? TableCellFitText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellFitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment? TableCellVerticalAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HideMark.</para>
        /// <para>Represents the following element tag in the schema: w:hideMark.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HideMark? HideMark
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HideMark>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Table Row Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle" /> <c>&lt;w:cnfStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridBefore" /> <c>&lt;w:gridBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridAfter" /> <c>&lt;w:gridAfter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRowHeight" /> <c>&lt;w:trHeight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DivId" /> <c>&lt;w:divId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hidden" /> <c>&lt;w:hidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CantSplit" /> <c>&lt;w:cantSplit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableHeader" /> <c>&lt;w:tblHeader></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow" /> <c>&lt;w:wBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow" /> <c>&lt;w:wAfter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousTableRowProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class.
        /// </summary>
        public PreviousTableRowProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableRowProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableRowProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableRowProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableRowProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:trPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridAfter>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRowHeight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DivId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CantSplit>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 0)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridBefore), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridAfter), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowHeight), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hidden), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CantSplit), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableHeader), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableRowProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Table Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDiVisual" /> <c>&lt;w:bidiVisual></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCaption" /> <c>&lt;w:tblCaption></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableDescription" /> <c>&lt;w:tblDescription></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyle" /> <c>&lt;w:tblStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableBorders" /> <c>&lt;w:tblBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault" /> <c>&lt;w:tblCellMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLayout" /> <c>&lt;w:tblLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLook" /> <c>&lt;w:tblLook></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableOverlap" /> <c>&lt;w:tblOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties" /> <c>&lt;w:tblpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableWidth" /> <c>&lt;w:tblW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableIndentation" /> <c>&lt;w:tblInd></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousTableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class.
        /// </summary>
        public PreviousTableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDiVisual>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCaption>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableDescription>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyle), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableOverlap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDiVisual), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCaption), 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableDescription), 0, 1, version: FileFormatVersions.Office2010)
            };
        }

        /// <summary>
        /// <para>TableStyle.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyle? TableStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TablePositionProperties.</para>
        /// <para>Represents the following element tag in the schema: w:tblpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties? TablePositionProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:tblOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableOverlap? TableOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDiVisual.</para>
        /// <para>Represents the following element tag in the schema: w:bidiVisual.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDiVisual? BiDiVisual
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDiVisual>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableWidth? TableWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableJustification? TableJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing? TableCellSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableIndentation? TableIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableBorders? TableBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLayout.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLayout? TableLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault? TableCellMarginDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLook.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLook? TableLook
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCaption, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:tblCaption.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCaption? TableCaption
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCaption>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableDescription, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:tblDescription.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableDescription? TableDescription
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableDescription>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Section Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sectPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Columns" /> <c>&lt;w:cols></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns" /> <c>&lt;w15:footnoteColumns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocGrid" /> <c>&lt;w:docGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties" /> <c>&lt;w:endnotePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties" /> <c>&lt;w:footnotePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LineNumberType" /> <c>&lt;w:lnNumType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FormProtection" /> <c>&lt;w:formProt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoEndnote" /> <c>&lt;w:noEndnote></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TitlePage" /> <c>&lt;w:titlePg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GutterOnRight" /> <c>&lt;w:rtlGutter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBorders" /> <c>&lt;w:pgBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageMargin" /> <c>&lt;w:pgMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageNumberType" /> <c>&lt;w:pgNumType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageSize" /> <c>&lt;w:pgSz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PaperSource" /> <c>&lt;w:paperSrc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference" /> <c>&lt;w:printerSettings></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionType" /> <c>&lt;w:type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage" /> <c>&lt;w:vAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousSectionProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class.
        /// </summary>
        public PreviousSectionProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousSectionProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousSectionProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousSectionProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousSectionProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Physical Section Mark Character Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidRPr
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Section Deletion Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidDel
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Section Addition Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidR
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Section Properties Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidSect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidSect
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sectPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Columns>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LineNumberType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FormProtection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoEndnote>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TitlePage>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GutterOnRight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageNumberType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PaperSource>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SectionType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage>();
            builder.AddElement<PreviousSectionProperties>()
                .AddAttribute("w:rsidRPr", a => a.RsidRPr, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidDel", a => a.RsidDel, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidR", a => a.RsidR, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidSect", a => a.RsidSect, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionType), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageSize), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageMargin), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PaperSource), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LineNumberType), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageNumberType), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Columns), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormProtection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoEndnote), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TitlePage), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GutterOnRight), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), 0, 1, version: FileFormatVersions.Office2013)
                    }
                }
            };
        }

        /// <summary>
        /// <para>FootnoteProperties.</para>
        /// <para>Represents the following element tag in the schema: w:footnotePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties? FootnoteProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EndnoteProperties.</para>
        /// <para>Represents the following element tag in the schema: w:endnotePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties? EndnoteProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SectionType.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SectionType? SectionType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SectionType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageSize.</para>
        /// <para>Represents the following element tag in the schema: w:pgSz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageSize? PageSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageMargin.</para>
        /// <para>Represents the following element tag in the schema: w:pgMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageMargin? PageMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PaperSource.</para>
        /// <para>Represents the following element tag in the schema: w:paperSrc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PaperSource? PaperSource
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PaperSource>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pgBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageBorders? PageBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>LineNumberType.</para>
        /// <para>Represents the following element tag in the schema: w:lnNumType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LineNumberType? LineNumberType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LineNumberType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageNumberType.</para>
        /// <para>Represents the following element tag in the schema: w:pgNumType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageNumberType? PageNumberType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageNumberType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Columns.</para>
        /// <para>Represents the following element tag in the schema: w:cols.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Columns? Columns
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Columns>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FormProtection.</para>
        /// <para>Represents the following element tag in the schema: w:formProt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FormProtection? FormProtection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FormProtection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignmentOnPage.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage? VerticalTextAlignmentOnPage
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoEndnote.</para>
        /// <para>Represents the following element tag in the schema: w:noEndnote.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoEndnote? NoEndnote
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoEndnote>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TitlePage.</para>
        /// <para>Represents the following element tag in the schema: w:titlePg.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TitlePage? TitlePage
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TitlePage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDi? BiDi
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GutterOnRight.</para>
        /// <para>Represents the following element tag in the schema: w:rtlGutter.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.GutterOnRight? GutterOnRight
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.GutterOnRight>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DocGrid.</para>
        /// <para>Represents the following element tag in the schema: w:docGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocGrid? DocGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PrinterSettingsReference.</para>
        /// <para>Represents the following element tag in the schema: w:printerSettings.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference? PrinterSettingsReference
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FootnoteColumns, this property is only available in Office 2013 and later..</para>
        /// <para>Represents the following element tag in the schema: w15:footnoteColumns.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w15 = http://schemas.microsoft.com/office/word/2012/wordml
        /// </remark>
        public DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns? FootnoteColumns
        {
            get => GetElement<DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousSectionProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle" /> <c>&lt;w:cnfStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OutlineLevel" /> <c>&lt;w:outlineLvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameProperties" /> <c>&lt;w:framePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Indentation" /> <c>&lt;w:ind></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Justification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DivId" /> <c>&lt;w:divId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingProperties" /> <c>&lt;w:numPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepNext" /> <c>&lt;w:keepNext></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepLines" /> <c>&lt;w:keepLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore" /> <c>&lt;w:pageBreakBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidowControl" /> <c>&lt;w:widowControl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers" /> <c>&lt;w:suppressLineNumbers></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens" /> <c>&lt;w:suppressAutoHyphens></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kinsoku" /> <c>&lt;w:kinsoku></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordWrap" /> <c>&lt;w:wordWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation" /> <c>&lt;w:overflowPunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation" /> <c>&lt;w:topLinePunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE" /> <c>&lt;w:autoSpaceDE></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN" /> <c>&lt;w:autoSpaceDN></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent" /> <c>&lt;w:adjustRightInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing" /> <c>&lt;w:contextualSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MirrorIndents" /> <c>&lt;w:mirrorIndents></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap" /> <c>&lt;w:suppressOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders" /> <c>&lt;w:pBdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId" /> <c>&lt;w:pStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Tabs" /> <c>&lt;w:tabs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextAlignment" /> <c>&lt;w:textAlignment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap" /> <c>&lt;w:textboxTightWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphPropertiesExtended : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class.
        /// </summary>
        public ParagraphPropertiesExtended() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesExtended(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesExtended(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesExtended class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesExtended(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DivId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1)
                }
            };
        }

        /// <summary>
        /// <para>ParagraphStyleId.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId? ParagraphStyleId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepNext? KeepNext
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepLines? KeepLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore? PageBreakBefore
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameProperties? FrameProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WidowControl? WidowControl
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingProperties? NumberingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers? SuppressLineNumbers
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders? ParagraphBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Tabs? Tabs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens? SuppressAutoHyphens
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kinsoku? Kinsoku
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordWrap? WordWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation? OverflowPunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation? TopLinePunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE? AutoSpaceDE
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN? AutoSpaceDN
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDi? BiDi
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent? AdjustRightIndent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines? SpacingBetweenLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Indentation? Indentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing? ContextualSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MirrorIndents? MirrorIndents
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap? SuppressOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Justification? Justification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextAlignment? TextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap? TextBoxTightWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OutlineLevel? OutlineLevel
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DivId.</para>
        /// <para>Represents the following element tag in the schema: w:divId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DivId? DivId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DivId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle? ConditionalFormatStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesExtended>(deep);
    }

    /// <summary>
    /// <para>Previous Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Highlight" /> <c>&lt;w:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightToLeftText" /> <c>&lt;w:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ComplexScript" /> <c>&lt;w:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunStyle" /> <c>&lt;w:rStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.FillTextEffect" /> <c>&lt;w14:textFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Glow" /> <c>&lt;w14:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Ligatures" /> <c>&lt;w14:ligatures></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberingFormat" /> <c>&lt;w14:numForm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberSpacing" /> <c>&lt;w14:numSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives" /> <c>&lt;w14:cntxtAlts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Properties3D" /> <c>&lt;w14:props3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Reflection" /> <c>&lt;w14:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Scene3D" /> <c>&lt;w14:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Shadow" /> <c>&lt;w14:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.StylisticSets" /> <c>&lt;w14:stylisticSets></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect" /> <c>&lt;w14:textOutline></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class.
        /// </summary>
        public PreviousRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Highlight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.FillTextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Glow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Ligatures>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Properties3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Reflection>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Scene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.StylisticSets>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousRunProperties>(deep);
    }

    /// <summary>
    /// <para>Previous Run Properties for the Paragraph Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Highlight" /> <c>&lt;w:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightToLeftText" /> <c>&lt;w:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ComplexScript" /> <c>&lt;w:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OfficeMath" /> <c>&lt;w:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunStyle" /> <c>&lt;w:rStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Inserted" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Deleted" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFrom" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveTo" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.FillTextEffect" /> <c>&lt;w14:textFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Glow" /> <c>&lt;w14:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Ligatures" /> <c>&lt;w14:ligatures></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberingFormat" /> <c>&lt;w14:numForm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberSpacing" /> <c>&lt;w14:numSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives" /> <c>&lt;w14:cntxtAlts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Properties3D" /> <c>&lt;w14:props3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Reflection" /> <c>&lt;w14:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Scene3D" /> <c>&lt;w14:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Shadow" /> <c>&lt;w14:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.StylisticSets" /> <c>&lt;w14:stylisticSets></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect" /> <c>&lt;w14:textOutline></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousParagraphMarkRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class.
        /// </summary>
        public PreviousParagraphMarkRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphMarkRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphMarkRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphMarkRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousParagraphMarkRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Highlight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Deleted>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFrom>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveTo>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.FillTextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Glow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Ligatures>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Properties3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Reflection>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Scene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.StylisticSets>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Deleted), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFrom), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveTo), 0, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OfficeMath), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Inserted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:ins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Inserted? Inserted
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Deleted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:del.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Deleted? Deleted
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Deleted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Source Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveFrom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MoveFrom? MoveFrom
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MoveFrom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Destination Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveTo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MoveTo? MoveTo
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MoveTo>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousParagraphMarkRunProperties>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ilvl.</para>
    /// </summary>
    public partial class NumberingLevelReference : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingLevelReference class.
        /// </summary>
        public NumberingLevelReference() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ilvl");
            builder.AddElement<NumberingLevelReference>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (255L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingLevelReference>(deep);
    }

    /// <summary>
    /// <para>Numbering Definition Instance Reference.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numId.</para>
    /// </summary>
    public partial class NumberingId : NonNegativeDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the NumberingId class.
        /// </summary>
        public NumberingId() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numId");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingId>(deep);
    }

    /// <summary>
    /// <para>Starting Value.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:start.</para>
    /// </summary>
    public partial class StartNumberingValue : NonNegativeDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the StartNumberingValue class.
        /// </summary>
        public StartNumberingValue() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:start");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StartNumberingValue>(deep);
    }

    /// <summary>
    /// <para>Defines the AbstractNumId Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:abstractNumId.</para>
    /// </summary>
    public partial class AbstractNumId : NonNegativeDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the AbstractNumId class.
        /// </summary>
        public AbstractNumId() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:abstractNumId");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbstractNumId>(deep);
    }

    /// <summary>
    /// <para>Defines the NonNegativeDecimalNumberType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class NonNegativeDecimalNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NonNegativeDecimalNumberType class.
        /// </summary>
        protected NonNegativeDecimalNumberType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<NonNegativeDecimalNumberType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
        }
    }

    /// <summary>
    /// <para>Previous Paragraph Numbering Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numberingChange.</para>
    /// </summary>
    public partial class NumberingChange : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingChange class.
        /// </summary>
        public NumberingChange() : base()
        {
        }

        /// <summary>
        /// <para>original</para>
        /// <para>Represents the following attribute in the schema: w:original</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Original
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numberingChange");
            builder.AddElement<NumberingChange>()
                .AddAttribute("w:original", a => a.Original)
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new AttributeValueLengthConstraint(builder.CreateQName("w:original"), 0, 15));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingChange>(deep);
    }

    /// <summary>
    /// <para>Custom Tab Stop.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tab.</para>
    /// </summary>
    public partial class TabStop : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TabStop class.
        /// </summary>
        public TabStop() : base()
        {
        }

        /// <summary>
        /// <para>Tab Stop Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TabStopValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TabStopValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tab Leader Character</para>
        /// <para>Represents the following attribute in the schema: w:leader</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TabStopLeaderCharValues>? Leader
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TabStopLeaderCharValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tab Stop Position</para>
        /// <para>Represents the following attribute in the schema: w:pos</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Position
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tab");
            builder.AddElement<TabStop>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:leader", a => a.Leader)
                .AddAttribute("w:pos", a => a.Position, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-31680L), MaxInclusive = (31680L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TabStop>(deep);
    }

    /// <summary>
    /// <para>Run Properties for the Paragraph Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Highlight" /> <c>&lt;w:highlight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightToLeftText" /> <c>&lt;w:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ComplexScript" /> <c>&lt;w:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OfficeMath" /> <c>&lt;w:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunPropertiesChange" /> <c>&lt;w:rPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunStyle" /> <c>&lt;w:rStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Inserted" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Deleted" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFrom" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveTo" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.FillTextEffect" /> <c>&lt;w14:textFill></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Glow" /> <c>&lt;w14:glow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Ligatures" /> <c>&lt;w14:ligatures></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberingFormat" /> <c>&lt;w14:numForm></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.NumberSpacing" /> <c>&lt;w14:numSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives" /> <c>&lt;w14:cntxtAlts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Properties3D" /> <c>&lt;w14:props3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Reflection" /> <c>&lt;w14:reflection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Scene3D" /> <c>&lt;w14:scene3d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.Shadow" /> <c>&lt;w14:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.StylisticSets" /> <c>&lt;w14:stylisticSets></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect" /> <c>&lt;w14:textOutline></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphMarkRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class.
        /// </summary>
        public ParagraphMarkRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphMarkRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Highlight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Deleted>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFrom>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveTo>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.FillTextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Glow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Ligatures>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.NumberSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Properties3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Reflection>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Scene3D>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.StylisticSets>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Deleted), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFrom), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveTo), 0, 1),
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunStyle), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Highlight), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Glow), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Shadow), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Reflection), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.TextOutlineEffect), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.FillTextEffect), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Scene3D), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Properties3D), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1, version: FileFormatVersions.Office2010)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.Ligatures), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberingFormat), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.NumberSpacing), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.StylisticSets), 0, 1, version: FileFormatVersions.Office2010),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ContextualAlternatives), 0, 1, version: FileFormatVersions.Office2010)
                                    }
                                }
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OfficeMath), 0, 1)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunPropertiesChange), 0, 1)
            };
        }

        /// <summary>
        /// <para>Inserted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:ins.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Inserted? Inserted
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Deleted Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:del.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Deleted? Deleted
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Deleted>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Source Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveFrom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MoveFrom? MoveFrom
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MoveFrom>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Move Destination Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:moveTo.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MoveTo? MoveTo
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MoveTo>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphMarkRunProperties>(deep);
    }

    /// <summary>
    /// <para>Section Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sectPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Columns" /> <c>&lt;w:cols></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns" /> <c>&lt;w15:footnoteColumns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocGrid" /> <c>&lt;w:docGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties" /> <c>&lt;w:endnotePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties" /> <c>&lt;w:footnotePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HeaderReference" /> <c>&lt;w:headerReference></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FooterReference" /> <c>&lt;w:footerReference></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LineNumberType" /> <c>&lt;w:lnNumType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FormProtection" /> <c>&lt;w:formProt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoEndnote" /> <c>&lt;w:noEndnote></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TitlePage" /> <c>&lt;w:titlePg></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GutterOnRight" /> <c>&lt;w:rtlGutter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBorders" /> <c>&lt;w:pgBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageMargin" /> <c>&lt;w:pgMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageNumberType" /> <c>&lt;w:pgNumType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageSize" /> <c>&lt;w:pgSz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PaperSource" /> <c>&lt;w:paperSrc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference" /> <c>&lt;w:printerSettings></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionPropertiesChange" /> <c>&lt;w:sectPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionType" /> <c>&lt;w:type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage" /> <c>&lt;w:vAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class SectionProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SectionProperties class.
        /// </summary>
        public SectionProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SectionProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Physical Section Mark Character Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidRPr</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidRPr
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Section Deletion Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidDel
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Section Addition Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidR</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidR
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Section Properties Revision ID</para>
        /// <para>Represents the following attribute in the schema: w:rsidSect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? RsidSect
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sectPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Columns>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HeaderReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FooterReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LineNumberType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FormProtection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoEndnote>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TitlePage>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GutterOnRight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageNumberType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PaperSource>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SectionPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SectionType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage>();
            builder.AddElement<SectionProperties>()
                .AddAttribute("w:rsidRPr", a => a.RsidRPr, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidDel", a => a.RsidDel, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidR", a => a.RsidR, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:rsidSect", a => a.RsidSect, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 6)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HeaderReference), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FooterReference), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionType), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageSize), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageMargin), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PaperSource), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LineNumberType), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageNumberType), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Columns), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormProtection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignmentOnPage), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoEndnote), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TitlePage), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GutterOnRight), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrinterSettingsReference), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.FootnoteColumns), 0, 1, version: FileFormatVersions.Office2013)
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionPropertiesChange), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SectionProperties>(deep);
    }

    /// <summary>
    /// <para>Custom Field Data.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fldData.</para>
    /// </summary>
    public partial class FieldData : OpenXmlLeafTextElement
    {
        /// <summary>
        /// Initializes a new instance of the FieldData class.
        /// </summary>
        public FieldData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldData class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public FieldData(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new Base64BinaryValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fldData");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldData>(deep);
    }

    /// <summary>
    /// <para>Form Field Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ffData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CheckBox" /> <c>&lt;w:checkBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DropDownListFormField" /> <c>&lt;w:ddList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HelpText" /> <c>&lt;w:helpText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FormFieldName" /> <c>&lt;w:name></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StatusText" /> <c>&lt;w:statusText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextInput" /> <c>&lt;w:textInput></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EntryMacro" /> <c>&lt;w:entryMacro></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ExitMacro" /> <c>&lt;w:exitMacro></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Enabled" /> <c>&lt;w:enabled></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CalculateOnExit" /> <c>&lt;w:calcOnExit></c></description></item>
    /// </list>
    /// </remark>
    public partial class FormFieldData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FormFieldData class.
        /// </summary>
        public FormFieldData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormFieldData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormFieldData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormFieldData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FormFieldData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FormFieldData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FormFieldData(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ffData");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CheckBox>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DropDownListFormField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HelpText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FormFieldName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StatusText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextInput>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EntryMacro>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ExitMacro>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Enabled>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CalculateOnExit>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormFieldName), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Enabled), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CalculateOnExit), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EntryMacro), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ExitMacro), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HelpText), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StatusText), 0, 1),
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CheckBox), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DropDownListFormField), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextInput), 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormFieldData>(deep);
    }

    /// <summary>
    /// <para>Form Field Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    public partial class FormFieldName : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FormFieldName class.
        /// </summary>
        public FormFieldName() : base()
        {
        }

        /// <summary>
        /// <para>Form Field Name Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:name");
            builder.AddElement<FormFieldName>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (20L) });
                });
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @"[^,]*") { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FormFieldName>(deep);
    }

    /// <summary>
    /// <para>Script Function to Execute on Form Field Entry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:entryMacro.</para>
    /// </summary>
    public partial class EntryMacro : MacroNameType
    {
        /// <summary>
        /// Initializes a new instance of the EntryMacro class.
        /// </summary>
        public EntryMacro() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:entryMacro");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EntryMacro>(deep);
    }

    /// <summary>
    /// <para>Script Function to Execute on Form Field Exit.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:exitMacro.</para>
    /// </summary>
    public partial class ExitMacro : MacroNameType
    {
        /// <summary>
        /// Initializes a new instance of the ExitMacro class.
        /// </summary>
        public ExitMacro() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:exitMacro");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ExitMacro>(deep);
    }

    /// <summary>
    /// <para>Defines the MacroNameType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MacroNameType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MacroNameType class.
        /// </summary>
        protected MacroNameType() : base()
        {
        }

        /// <summary>
        /// <para>Name of Script Function</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<MacroNameType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (33L) });
                });
        }
    }

    /// <summary>
    /// <para>Associated Help Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:helpText.</para>
    /// </summary>
    public partial class HelpText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the HelpText class.
        /// </summary>
        public HelpText() : base()
        {
        }

        /// <summary>
        /// <para>Help Text Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.InfoTextValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.InfoTextValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Help Text Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:helpText");
            builder.AddElement<HelpText>()
                .AddAttribute("w:type", a => a.Type)
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HelpText>(deep);
    }

    /// <summary>
    /// <para>Associated Status Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:statusText.</para>
    /// </summary>
    public partial class StatusText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StatusText class.
        /// </summary>
        public StatusText() : base()
        {
        }

        /// <summary>
        /// <para>Status Text Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.InfoTextValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.InfoTextValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Status Text Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:statusText");
            builder.AddElement<StatusText>()
                .AddAttribute("w:type", a => a.Type)
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (138L), Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (140L), InitialVersion = (FileFormatVersions.Office2010) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StatusText>(deep);
    }

    /// <summary>
    /// <para>Checkbox Form Field Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:checkBox.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FormFieldSize" /> <c>&lt;w:size></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutomaticallySizeFormField" /> <c>&lt;w:sizeAuto></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DefaultCheckBoxFormFieldState" /> <c>&lt;w:default></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Checked" /> <c>&lt;w:checked></c></description></item>
    /// </list>
    /// </remark>
    public partial class CheckBox : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CheckBox class.
        /// </summary>
        public CheckBox() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CheckBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CheckBox(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CheckBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CheckBox(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CheckBox class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CheckBox(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:checkBox");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FormFieldSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutomaticallySizeFormField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DefaultCheckBoxFormFieldState>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FormFieldSize), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutomaticallySizeFormField), 1, 1)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultCheckBoxFormFieldState), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Checked), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CheckBox>(deep);
    }

    /// <summary>
    /// <para>Drop-Down List Form Field Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:ddList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DropDownListSelection" /> <c>&lt;w:result></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ListEntryFormField" /> <c>&lt;w:listEntry></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DefaultDropDownListItemIndex" /> <c>&lt;w:default></c></description></item>
    /// </list>
    /// </remark>
    public partial class DropDownListFormField : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class.
        /// </summary>
        public DropDownListFormField() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DropDownListFormField(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DropDownListFormField(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DropDownListFormField class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DropDownListFormField(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:ddList");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DropDownListSelection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ListEntryFormField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DefaultDropDownListItemIndex>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DropDownListSelection), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultDropDownListItemIndex), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListEntryFormField), 0, 25)
            };
        }

        /// <summary>
        /// <para>Drop-Down List Selection.</para>
        /// <para>Represents the following element tag in the schema: w:result.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DropDownListSelection? DropDownListSelection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DropDownListSelection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Default Drop-Down List Item Index.</para>
        /// <para>Represents the following element tag in the schema: w:default.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DefaultDropDownListItemIndex? DefaultDropDownListItemIndex
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DefaultDropDownListItemIndex>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DropDownListFormField>(deep);
    }

    /// <summary>
    /// <para>Text Box Form Field Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:textInput.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldType" /> <c>&lt;w:type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MaxLength" /> <c>&lt;w:maxLength></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DefaultTextBoxFormFieldString" /> <c>&lt;w:default></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Format" /> <c>&lt;w:format></c></description></item>
    /// </list>
    /// </remark>
    public partial class TextInput : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TextInput class.
        /// </summary>
        public TextInput() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextInput class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextInput(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextInput class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TextInput(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TextInput class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TextInput(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:textInput");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MaxLength>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DefaultTextBoxFormFieldString>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Format>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DefaultTextBoxFormFieldString), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MaxLength), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Format), 0, 1)
            };
        }

        /// <summary>
        /// <para>Text Box Form Field Type.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldType? TextBoxFormFieldType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Default Text Box Form Field String.</para>
        /// <para>Represents the following element tag in the schema: w:default.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DefaultTextBoxFormFieldString? DefaultTextBoxFormFieldString
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DefaultTextBoxFormFieldString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Box Form Field Maximum Length.</para>
        /// <para>Represents the following element tag in the schema: w:maxLength.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MaxLength? MaxLength
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MaxLength>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Text Box Form Field Formatting.</para>
        /// <para>Represents the following element tag in the schema: w:format.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Format? Format
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Format>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextInput>(deep);
    }

    /// <summary>
    /// <para>Default Drop-Down List Item Index.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:default.</para>
    /// </summary>
    public partial class DefaultDropDownListItemIndex : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DefaultDropDownListItemIndex class.
        /// </summary>
        public DefaultDropDownListItemIndex() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:default");
            builder.AddElement<DefaultDropDownListItemIndex>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (24L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultDropDownListItemIndex>(deep);
    }

    /// <summary>
    /// <para>Drop-Down List Entry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:listEntry.</para>
    /// </summary>
    public partial class ListEntryFormField : String255Type
    {
        /// <summary>
        /// Initializes a new instance of the ListEntryFormField class.
        /// </summary>
        public ListEntryFormField() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:listEntry");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListEntryFormField>(deep);
    }

    /// <summary>
    /// <para>Default Text Box Form Field String.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:default.</para>
    /// </summary>
    public partial class DefaultTextBoxFormFieldString : String255Type
    {
        /// <summary>
        /// Initializes a new instance of the DefaultTextBoxFormFieldString class.
        /// </summary>
        public DefaultTextBoxFormFieldString() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:default");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultTextBoxFormFieldString>(deep);
    }

    /// <summary>
    /// <para>Frame Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    public partial class FrameName : String255Type
    {
        /// <summary>
        /// Initializes a new instance of the FrameName class.
        /// </summary>
        public FrameName() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:name");
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @"[^,]*") { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameName>(deep);
    }

    /// <summary>
    /// <para>Defines the String255Type Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class String255Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the String255Type class.
        /// </summary>
        protected String255Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<String255Type>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                });
        }
    }

    /// <summary>
    /// <para>Text Box Form Field Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    public partial class TextBoxFormFieldType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TextBoxFormFieldType class.
        /// </summary>
        public TextBoxFormFieldType() : base()
        {
        }

        /// <summary>
        /// <para>Text Box Form Field Type Values</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TextBoxFormFieldValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:type");
            builder.AddElement<TextBoxFormFieldType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TextBoxFormFieldType>(deep);
    }

    /// <summary>
    /// <para>Text Box Form Field Maximum Length.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:maxLength.</para>
    /// </summary>
    public partial class MaxLength : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MaxLength class.
        /// </summary>
        public MaxLength() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? Val
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:maxLength");
            builder.AddElement<MaxLength>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (1L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MaxLength>(deep);
    }

    /// <summary>
    /// <para>Text Box Form Field Formatting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:format.</para>
    /// </summary>
    public partial class Format : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Format class.
        /// </summary>
        public Format() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:format");
            builder.AddElement<Format>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (64L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Format>(deep);
    }

    /// <summary>
    /// <para>Single Column Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:col.</para>
    /// </summary>
    public partial class Column : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Column class.
        /// </summary>
        public Column() : base()
        {
        }

        /// <summary>
        /// <para>Column Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Width
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Space Before Following Column</para>
        /// <para>Represents the following attribute in the schema: w:space</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Space
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:col");
            builder.AddElement<Column>()
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:space", a => a.Space, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Column>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Section Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sectPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousSectionProperties" /> <c>&lt;w:sectPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class SectionPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class.
        /// </summary>
        public SectionPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SectionPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SectionPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SectionPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sectPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousSectionProperties>();
            builder.AddElement<SectionPropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousSectionProperties), 0, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Section Properties.</para>
        /// <para>Represents the following element tag in the schema: w:sectPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousSectionProperties? PreviousSectionProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousSectionProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SectionPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Run Properties on the Paragraph Mark.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphMarkRunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphMarkRunPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class.
        /// </summary>
        public ParagraphMarkRunPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphMarkRunPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphMarkRunPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphMarkRunPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphMarkRunProperties>();
            builder.AddElement<ParagraphMarkRunPropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphMarkRunProperties), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Run Properties for the Paragraph Mark.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphMarkRunProperties? PreviousParagraphMarkRunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphMarkRunProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphMarkRunPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>External Content Import Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:altChunkPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MatchSource" /> <c>&lt;w:matchSrc></c></description></item>
    /// </list>
    /// </remark>
    public partial class AltChunkProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class.
        /// </summary>
        public AltChunkProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunkProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AltChunkProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AltChunkProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AltChunkProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:altChunkPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MatchSource>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MatchSource), 0, 1)
            };
        }

        /// <summary>
        /// <para>Keep Source Formatting on Import.</para>
        /// <para>Represents the following element tag in the schema: w:matchSrc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MatchSource? MatchSource
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MatchSource>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AltChunkProperties>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text Alignment.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rubyAlign.</para>
    /// </summary>
    public partial class RubyAlign : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RubyAlign class.
        /// </summary>
        public RubyAlign() : base()
        {
        }

        /// <summary>
        /// <para>Phonetic Guide Text Alignment Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.RubyAlignValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.RubyAlignValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rubyAlign");
            builder.AddElement<RubyAlign>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyAlign>(deep);
    }

    /// <summary>
    /// <para>Distance Between Phonetic Guide Text and Phonetic Guide Base Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hpsRaise.</para>
    /// </summary>
    public partial class PhoneticGuideRaise : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticGuideRaise class.
        /// </summary>
        public PhoneticGuideRaise() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? Val
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hpsRaise");
            builder.AddElement<PhoneticGuideRaise>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PhoneticGuideRaise>(deep);
    }

    /// <summary>
    /// <para>Language ID for Phonetic Guide.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lid.</para>
    /// </summary>
    public partial class LanguageId : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LanguageId class.
        /// </summary>
        public LanguageId() : base()
        {
        }

        /// <summary>
        /// <para>Language Code</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lid");
            builder.AddElement<LanguageId>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LanguageId>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rubyPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideTextFontSize" /> <c>&lt;w:hps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideBaseTextSize" /> <c>&lt;w:hpsBaseText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideRaise" /> <c>&lt;w:hpsRaise></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LanguageId" /> <c>&lt;w:lid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Dirty" /> <c>&lt;w:dirty></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RubyAlign" /> <c>&lt;w:rubyAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class RubyProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RubyProperties class.
        /// </summary>
        public RubyProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RubyProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rubyPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideTextFontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideBaseTextSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideRaise>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LanguageId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Dirty>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RubyAlign>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RubyAlign), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideTextFontSize), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideRaise), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideBaseTextSize), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LanguageId), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Dirty), 0, 1)
            };
        }

        /// <summary>
        /// <para>Phonetic Guide Text Alignment.</para>
        /// <para>Represents the following element tag in the schema: w:rubyAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RubyAlign? RubyAlign
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RubyAlign>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Text Font Size.</para>
        /// <para>Represents the following element tag in the schema: w:hps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideTextFontSize? PhoneticGuideTextFontSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideTextFontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Distance Between Phonetic Guide Text and Phonetic Guide Base Text.</para>
        /// <para>Represents the following element tag in the schema: w:hpsRaise.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideRaise? PhoneticGuideRaise
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideRaise>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Phonetic Guide Base Text Font Size.</para>
        /// <para>Represents the following element tag in the schema: w:hpsBaseText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideBaseTextSize? PhoneticGuideBaseTextSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PhoneticGuideBaseTextSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Language ID for Phonetic Guide.</para>
        /// <para>Represents the following element tag in the schema: w:lid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LanguageId? LanguageId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LanguageId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Invalidated Field Cache.</para>
        /// <para>Represents the following element tag in the schema: w:dirty.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Dirty? Dirty
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Dirty>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyProperties>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rt.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class RubyContent : RubyContentType
    {
        /// <summary>
        /// Initializes a new instance of the RubyContent class.
        /// </summary>
        public RubyContent() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyContent(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContent class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyContent(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContent class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RubyContent(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rt");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyContent>(deep);
    }

    /// <summary>
    /// <para>Phonetic Guide Base Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rubyBase.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class RubyBase : RubyContentType
    {
        /// <summary>
        /// Initializes a new instance of the RubyBase class.
        /// </summary>
        public RubyBase() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyBase(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RubyBase(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyBase class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RubyBase(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rubyBase");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RubyBase>(deep);
    }

    /// <summary>
    /// <para>Defines the RubyContentType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class RubyContentType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RubyContentType class.
        /// </summary>
        protected RubyContentType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContentType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RubyContentType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContentType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected RubyContentType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RubyContentType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected RubyContentType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
        }
    }

    /// <summary>
    /// <para>Custom XML Data Date Storage Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:storeMappedDataAs.</para>
    /// </summary>
    public partial class SdtDateMappingType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtDateMappingType class.
        /// </summary>
        public SdtDateMappingType() : base()
        {
        }

        /// <summary>
        /// <para>Date Storage Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DateFormatValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DateFormatValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:storeMappedDataAs");
            builder.AddElement<SdtDateMappingType>()
                .AddAttribute("w:val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtDateMappingType>(deep);
    }

    /// <summary>
    /// <para>Date Picker Calendar Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:calendar.</para>
    /// </summary>
    public partial class Calendar : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Calendar class.
        /// </summary>
        public Calendar() : base()
        {
        }

        /// <summary>
        /// <para>Calendar Type Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CalendarValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CalendarValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:calendar");
            builder.AddElement<Calendar>()
                .AddAttribute("w:val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Calendar>(deep);
    }

    /// <summary>
    /// <para>Combo Box List Item.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:listItem.</para>
    /// </summary>
    public partial class ListItem : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ListItem class.
        /// </summary>
        public ListItem() : base()
        {
        }

        /// <summary>
        /// <para>List Entry Display Text</para>
        /// <para>Represents the following attribute in the schema: w:displayText</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? DisplayText
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>List Entry Value</para>
        /// <para>Represents the following attribute in the schema: w:value</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Value
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:listItem");
            builder.AddElement<ListItem>()
                .AddAttribute("w:displayText", a => a.DisplayText)
                .AddAttribute("w:value", a => a.Value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ListItem>(deep);
    }

    /// <summary>
    /// <para>Structured Document Tag Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.Color" /> <c>&lt;w15:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DataBinding" /> <c>&lt;w:dataBinding></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.DataBinding" /> <c>&lt;w15:dataBinding></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtId" /> <c>&lt;w:id></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentEquation" /> <c>&lt;w:equation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentPicture" /> <c>&lt;w:picture></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentRichText" /> <c>&lt;w:richText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentCitation" /> <c>&lt;w:citation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentGroup" /> <c>&lt;w:group></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentBibliography" /> <c>&lt;w:bibliography></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty" /> <c>&lt;w14:entityPicker></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem" /> <c>&lt;w15:repeatingSectionItem></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Lock" /> <c>&lt;w:lock></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ShowingPlaceholder" /> <c>&lt;w:showingPlcHdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TemporarySdt" /> <c>&lt;w:temporary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked" /> <c>&lt;w15:webExtensionLinked></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated" /> <c>&lt;w15:webExtensionCreated></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtPlaceholder" /> <c>&lt;w:placeholder></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentComboBox" /> <c>&lt;w:comboBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentDate" /> <c>&lt;w:date></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartObject" /> <c>&lt;w:docPartObj></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartList" /> <c>&lt;w:docPartList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentDropDownList" /> <c>&lt;w:dropDownList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtContentText" /> <c>&lt;w:text></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtAlias" /> <c>&lt;w:alias></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Tag" /> <c>&lt;w:tag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox" /> <c>&lt;w14:checkbox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.Appearance" /> <c>&lt;w15:appearance></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection" /> <c>&lt;w15:repeatingSection></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtProperties class.
        /// </summary>
        public SdtProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtPr");
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DataBinding>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.DataBinding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentEquation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentPicture>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentRichText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentCitation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentGroup>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentBibliography>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Lock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ShowingPlaceholder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TemporarySdt>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtPlaceholder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentComboBox>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentDate>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartObject>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartList>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentDropDownList>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtContentText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtAlias>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Tag>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.Appearance>();
            builder.AddChild<DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtAlias), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Lock), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtPlaceholder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowingPlaceholder), 0, 1),
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataBinding), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.DataBinding), 0, 1, version: FileFormatVersions.Office2013)
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TemporarySdt), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tag), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.Color), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.Appearance), 0, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionLinked), 1, 1, version: FileFormatVersions.Office2013),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.WebExtensionCreated), 1, 1, version: FileFormatVersions.Office2013),
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentEquation), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentComboBox), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDate), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartObject), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDocPartList), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentDropDownList), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentPicture), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentRichText), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentText), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentCitation), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentGroup), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtContentBibliography), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.EntityPickerEmpty), 1, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.SdtContentCheckBox), 1, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSection), 1, 1, version: FileFormatVersions.Office2013),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2013.Word.SdtRepeatedSectionItem), 1, 1, version: FileFormatVersions.Office2013)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtProperties>(deep);
    }

    /// <summary>
    /// <para>Structured Document Tag End Character Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtEndPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunProperties" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtEndCharProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class.
        /// </summary>
        public SdtEndCharProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtEndCharProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtEndCharProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtEndCharProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtEndCharProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtEndPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunProperties), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtEndCharProperties>(deep);
    }

    /// <summary>
    /// <para>Block-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentBlock : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class.
        /// </summary>
        public SdtContentBlock() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentBlock(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentBlock(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentBlock class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentBlock(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtContent");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentBlock>(deep);
    }

    /// <summary>
    /// <para>Inline-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride" /> <c>&lt;w:bdo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" /> <c>&lt;w:dir></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hyperlink" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference" /> <c>&lt;w:subDoc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRun" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleField" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentRun : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRun class.
        /// </summary>
        public SdtContentRun() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRun(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRun class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRun(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRun class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentRun(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtContent");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hyperlink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleField>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRun), 1, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleField), 0, 0),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hyperlink), 1, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRun), 1, 1),
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                                    }
                                                                },
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                            }
                                                        }
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                                        new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                                                {
                                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                                    {
                                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1)
                                    }
                                },
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalOverride), 0, 1, version: FileFormatVersions.Office2010),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding), 0, 1, version: FileFormatVersions.Office2010)
                            }
                        },
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubDocumentReference), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRun>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentRunRuby Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Accent" /> <c>&lt;m:acc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Bar" /> <c>&lt;m:bar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.BorderBox" /> <c>&lt;m:borderBox></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Box" /> <c>&lt;m:box></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Delimiter" /> <c>&lt;m:d></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.EquationArray" /> <c>&lt;m:eqArr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Fraction" /> <c>&lt;m:f></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.MathFunction" /> <c>&lt;m:func></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.GroupChar" /> <c>&lt;m:groupChr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitLower" /> <c>&lt;m:limLow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.LimitUpper" /> <c>&lt;m:limUpp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Matrix" /> <c>&lt;m:m></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Nary" /> <c>&lt;m:nary></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.OfficeMath" /> <c>&lt;m:oMath></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Paragraph" /> <c>&lt;m:oMathPara></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Phantom" /> <c>&lt;m:phant></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Run" /> <c>&lt;m:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Radical" /> <c>&lt;m:rad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.PreSubSuper" /> <c>&lt;m:sPre></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Subscript" /> <c>&lt;m:sSub></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.SubSuperscript" /> <c>&lt;m:sSubSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Math.Superscript" /> <c>&lt;m:sSup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby" /> <c>&lt;w:hyperlink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Run" /> <c>&lt;w:r></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby" /> <c>&lt;w:fldSimple></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentRunRuby : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class.
        /// </summary>
        public SdtContentRunRuby() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRunRuby(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRunRuby(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRunRuby class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentRunRuby(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtContent");
            builder.AddChild<DocumentFormat.OpenXml.Math.Accent>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Bar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.BorderBox>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Box>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Delimiter>();
            builder.AddChild<DocumentFormat.OpenXml.Math.EquationArray>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Fraction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.MathFunction>();
            builder.AddChild<DocumentFormat.OpenXml.Math.GroupChar>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitLower>();
            builder.AddChild<DocumentFormat.OpenXml.Math.LimitUpper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Matrix>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Nary>();
            builder.AddChild<DocumentFormat.OpenXml.Math.OfficeMath>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Phantom>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Radical>();
            builder.AddChild<DocumentFormat.OpenXml.Math.PreSubSuper>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Subscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.SubSuperscript>();
            builder.AddChild<DocumentFormat.OpenXml.Math.Superscript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Run>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SimpleFieldRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HyperlinkRuby), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Run), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRunRuby), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                }
                                            },
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                        }
                                    }
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Paragraph), 1, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.OfficeMath), 1, 1),
                                    new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Accent), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Bar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Box), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.BorderBox), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Delimiter), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.EquationArray), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Fraction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.MathFunction), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.GroupChar), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitLower), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.LimitUpper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Matrix), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Nary), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Phantom), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Radical), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.PreSubSuper), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Subscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.SubSuperscript), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Superscript), 1, 1),
                                            new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Math.Run), 1, 1)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRunRuby>(deep);
    }

    /// <summary>
    /// <para>Cell-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtCell" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCell" /> <c>&lt;w:tc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentCell : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentCell class.
        /// </summary>
        public SdtContentCell() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentCell(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentCell class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentCell(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentCell class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentCell(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtContent");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCell), 0, 0),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlCell), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtCell), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentCell>(deep);
    }

    /// <summary>
    /// <para>Row-Level Structured Document Tag Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sdtContent.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRow" /> <c>&lt;w:tr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtRow" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentRow : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentRow class.
        /// </summary>
        public SdtContentRow() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRow(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRow class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentRow(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentRow class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentRow(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sdtContent");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Group, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRow), 0, 0),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlRow), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtRow), 1, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                        }
                                    },
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                        }
                                    },
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            },
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                            new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                            {
                                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                }
                            }
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentRow>(deep);
    }

    /// <summary>
    /// <para>Custom XML Element Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:customXmlPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlPlaceholder" /> <c>&lt;w:placeholder></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlAttribute" /> <c>&lt;w:attr></c></description></item>
    /// </list>
    /// </remark>
    public partial class CustomXmlProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class.
        /// </summary>
        public CustomXmlProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public CustomXmlProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the CustomXmlProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public CustomXmlProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:customXmlPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlPlaceholder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlAttribute>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlPlaceholder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlAttribute), 0, 0)
            };
        }

        /// <summary>
        /// <para>Custom XML Element Placeholder Text.</para>
        /// <para>Represents the following element tag in the schema: w:placeholder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CustomXmlPlaceholder? CustomXmlPlaceholder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CustomXmlPlaceholder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlProperties>(deep);
    }

    /// <summary>
    /// <para>Custom XML Attribute.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:attr.</para>
    /// </summary>
    public partial class CustomXmlAttribute : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CustomXmlAttribute class.
        /// </summary>
        public CustomXmlAttribute() : base()
        {
        }

        /// <summary>
        /// <para>uri</para>
        /// <para>Represents the following attribute in the schema: w:uri</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:attr");
            builder.AddElement<CustomXmlAttribute>()
                .AddAttribute("w:uri", a => a.Uri)
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), IsNcName = (true), MaxLength = (255L) });
                })
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CustomXmlAttribute>(deep);
    }

    /// <summary>
    /// <para>Grid Column Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gridCol.</para>
    /// </summary>
    public partial class GridColumn : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the GridColumn class.
        /// </summary>
        public GridColumn() : base()
        {
        }

        /// <summary>
        /// <para>Grid Column Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Width
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:gridCol");
            builder.AddElement<GridColumn>()
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GridColumn>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Grid Column Definitions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblGridChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid" /> <c>&lt;w:tblGrid></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableGridChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableGridChange class.
        /// </summary>
        public TableGridChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGridChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGridChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGridChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGridChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGridChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableGridChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblGridChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid>();
            builder.AddElement<TableGridChange>()
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid), 1, 1, version: FileFormatVersions.Office2007),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid), 0, 1, version: FileFormatVersions.Office2010)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Table Grid.</para>
        /// <para>Represents the following element tag in the schema: w:tblGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid? PreviousTableGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousTableGrid>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGridChange>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousTableCellProperties" /> <c>&lt;w:tcPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class.
        /// </summary>
        public TableCellPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousTableCellProperties>();
            builder.AddElement<TableCellPropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableCellProperties), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousTableCellProperties? PreviousTableCellProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousTableCellProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CellMerge" /> <c>&lt;w:cellMerge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle" /> <c>&lt;w:cnfStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridSpan" /> <c>&lt;w:gridSpan></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge" /> <c>&lt;w:hMerge></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoWrap" /> <c>&lt;w:noWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellFitText" /> <c>&lt;w:tcFitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HideMark" /> <c>&lt;w:hideMark></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellWidth" /> <c>&lt;w:tcW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellBorders" /> <c>&lt;w:tcBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMargin" /> <c>&lt;w:tcMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellPropertiesChange" /> <c>&lt;w:tcPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CellInsertion" /> <c>&lt;w:cellIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CellDeletion" /> <c>&lt;w:cellDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment" /> <c>&lt;w:vAlign></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalMerge" /> <c>&lt;w:vMerge></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableCellProperties class.
        /// </summary>
        public TableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableCellProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CellMerge>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridSpan>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellFitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HideMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CellInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CellDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalMerge>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellWidth), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridSpan), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalMerge), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellBorders), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellFitText), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HideMark), 0, 1)
                            }
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellInsertion), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellDeletion), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CellMerge), 0, 1)
                            }
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellPropertiesChange), 0, 1)
                }
            };
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle? ConditionalFormatStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tcW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellWidth? TableCellWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>GridSpan.</para>
        /// <para>Represents the following element tag in the schema: w:gridSpan.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.GridSpan? GridSpan
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.GridSpan>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HorizontalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:hMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge? HorizontalMerge
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HorizontalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalMerge.</para>
        /// <para>Represents the following element tag in the schema: w:vMerge.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalMerge? VerticalMerge
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalMerge>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tcBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellBorders? TableCellBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoWrap? NoWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMargin? TableCellMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellFitText.</para>
        /// <para>Represents the following element tag in the schema: w:tcFitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellFitText? TableCellFitText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellFitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment? TableCellVerticalAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>HideMark.</para>
        /// <para>Represents the following element tag in the schema: w:hideMark.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HideMark? HideMark
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HideMark>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousTableProperties" /> <c>&lt;w:tblPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TablePropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class.
        /// </summary>
        public TablePropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TablePropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousTableProperties>();
            builder.AddElement<TablePropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableProperties), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousTableProperties? PreviousTableProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousTableProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table-Level Property Exceptions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrExChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousTablePropertyExceptions" /> <c>&lt;w:tblPrEx></c></description></item>
    /// </list>
    /// </remark>
    public partial class TablePropertyExceptionsChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class.
        /// </summary>
        public TablePropertyExceptionsChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptionsChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptionsChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptionsChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TablePropertyExceptionsChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPrExChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousTablePropertyExceptions>();
            builder.AddElement<TablePropertyExceptionsChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTablePropertyExceptions), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Table-Level Property Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrEx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousTablePropertyExceptions? PreviousTablePropertyExceptions
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousTablePropertyExceptions>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePropertyExceptionsChange>(deep);
    }

    /// <summary>
    /// <para>Table Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDiVisual" /> <c>&lt;w:bidiVisual></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCaption" /> <c>&lt;w:tblCaption></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableDescription" /> <c>&lt;w:tblDescription></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyle" /> <c>&lt;w:tblStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableBorders" /> <c>&lt;w:tblBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault" /> <c>&lt;w:tblCellMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLayout" /> <c>&lt;w:tblLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLook" /> <c>&lt;w:tblLook></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableOverlap" /> <c>&lt;w:tblOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties" /> <c>&lt;w:tblpPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TablePropertiesChange" /> <c>&lt;w:tblPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableWidth" /> <c>&lt;w:tblW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableIndentation" /> <c>&lt;w:tblInd></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableProperties class.
        /// </summary>
        public TableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDiVisual>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCaption>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableDescription>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TablePropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyle), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableOverlap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDiVisual), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
                        }
                    },
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCaption), 0, 1, version: FileFormatVersions.Office2010),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableDescription), 0, 1, version: FileFormatVersions.Office2010)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePropertiesChange), 0, 1)
                }
            };
        }

        /// <summary>
        /// <para>TableStyle.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyle? TableStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TablePositionProperties.</para>
        /// <para>Represents the following element tag in the schema: w:tblpPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties? TablePositionProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TablePositionProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:tblOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableOverlap? TableOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDiVisual.</para>
        /// <para>Represents the following element tag in the schema: w:bidiVisual.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDiVisual? BiDiVisual
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDiVisual>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableWidth.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableWidth? TableWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableJustification? TableJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing? TableCellSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableIndentation? TableIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableBorders? TableBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLayout.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLayout? TableLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault? TableCellMarginDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableLook.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLook? TableLook
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCaption, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:tblCaption.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCaption? TableCaption
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCaption>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableDescription, this property is only available in Office 2010 and later..</para>
        /// <para>Represents the following element tag in the schema: w:tblDescription.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableDescription? TableDescription
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableDescription>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Revision Information for Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TablePropertiesChange? TablePropertiesChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TablePropertiesChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableProperties>(deep);
    }

    /// <summary>
    /// <para>Table Grid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblGrid.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableGridChange" /> <c>&lt;w:tblGridChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridColumn" /> <c>&lt;w:gridCol></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableGrid : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableGrid class.
        /// </summary>
        public TableGrid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableGrid(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableGrid class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableGrid(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblGrid");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableGridChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridColumn>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridColumn), 0, 0)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableGridChange), 0, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableGrid>(deep);
    }

    /// <summary>
    /// <para>Footnote Placement.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pos.</para>
    /// </summary>
    public partial class FootnotePosition : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnotePosition class.
        /// </summary>
        public FootnotePosition() : base()
        {
        }

        /// <summary>
        /// <para>Footnote Position Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FootnotePositionValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FootnotePositionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pos");
            builder.AddElement<FootnotePosition>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnotePosition>(deep);
    }

    /// <summary>
    /// <para>Footnote Numbering Format.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numFmt.</para>
    /// </summary>
    public partial class NumberingFormat : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingFormat class.
        /// </summary>
        public NumberingFormat() : base()
        {
        }

        /// <summary>
        /// <para>Numbering Format Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>format, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:format</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Format
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numFmt");
            builder.AddElement<NumberingFormat>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:format", a => a.Format, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingFormat>(deep);
    }

    /// <summary>
    /// <para>Endnote Placement.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pos.</para>
    /// </summary>
    public partial class EndnotePosition : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the EndnotePosition class.
        /// </summary>
        public EndnotePosition() : base()
        {
        }

        /// <summary>
        /// <para>Endnote Position Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.EndnotePositionValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.EndnotePositionValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pos");
            builder.AddElement<EndnotePosition>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnotePosition>(deep);
    }

    /// <summary>
    /// <para>Special Footnote List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnote.</para>
    /// </summary>
    public partial class FootnoteSpecialReference : FootnoteEndnoteSeparatorReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteSpecialReference class.
        /// </summary>
        public FootnoteSpecialReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnote");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "/MainDocumentPart/FootnotesPart", builder.CreateQName("w:footnote"), "w:footnote", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteSpecialReference>(deep);
    }

    /// <summary>
    /// <para>Special Endnote List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnote.</para>
    /// </summary>
    public partial class EndnoteSpecialReference : FootnoteEndnoteSeparatorReferenceType
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteSpecialReference class.
        /// </summary>
        public EndnoteSpecialReference() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnote");
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "/MainDocumentPart/EndnotesPart", builder.CreateQName("w:endnote"), "w:endnote", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteSpecialReference>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteEndnoteSeparatorReferenceType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class FootnoteEndnoteSeparatorReferenceType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteSeparatorReferenceType class.
        /// </summary>
        protected FootnoteEndnoteSeparatorReferenceType() : base()
        {
        }

        /// <summary>
        /// <para>Footnote/Endnote ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public IntegerValue? Id
        {
            get => GetAttribute<IntegerValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<FootnoteEndnoteSeparatorReferenceType>()
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-2147483648L), MaxInclusive = (32767L) });
                });
        }
    }

    /// <summary>
    /// <para>Index of Column Containing Unique Values for Record.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:column.</para>
    /// </summary>
    public partial class ColumnIndex : UnsignedDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the ColumnIndex class.
        /// </summary>
        public ColumnIndex() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:column");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnIndex>(deep);
    }

    /// <summary>
    /// <para>Column Delimiter for Data Source.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:colDelim.</para>
    /// </summary>
    public partial class ColumnDelimiter : UnsignedDecimalNumberType
    {
        /// <summary>
        /// Initializes a new instance of the ColumnDelimiter class.
        /// </summary>
        public ColumnDelimiter() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:colDelim");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnDelimiter>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedDecimalNumberType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UnsignedDecimalNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedDecimalNumberType class.
        /// </summary>
        protected UnsignedDecimalNumberType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<UnsignedDecimalNumberType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Unique Value for Record.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:uniqueTag.</para>
    /// </summary>
    public partial class UniqueTag : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UniqueTag class.
        /// </summary>
        public UniqueTag() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? Val
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:uniqueTag");
            builder.AddElement<UniqueTag>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UniqueTag>(deep);
    }

    /// <summary>
    /// <para>Data About Single Data Source Record.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:recipientData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UniqueTag" /> <c>&lt;w:uniqueTag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Active" /> <c>&lt;w:active></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ColumnIndex" /> <c>&lt;w:column></c></description></item>
    /// </list>
    /// </remark>
    public partial class RecipientData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RecipientData class.
        /// </summary>
        public RecipientData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecipientData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RecipientData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecipientData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RecipientData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecipientData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RecipientData(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:recipientData");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UniqueTag>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Active>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ColumnIndex>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Active), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColumnIndex), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UniqueTag), 1, 1)
            };
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/recipientData"));
        }

        /// <summary>
        /// <para>Record Is Included in Mail Merge.</para>
        /// <para>Represents the following element tag in the schema: w:active.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Active? Active
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Active>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Index of Column Containing Unique Values for Record.</para>
        /// <para>Represents the following element tag in the schema: w:column.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ColumnIndex? ColumnIndex
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ColumnIndex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Unique Value for Record.</para>
        /// <para>Represents the following element tag in the schema: w:uniqueTag.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UniqueTag? UniqueTag
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UniqueTag>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecipientData>(deep);
    }

    /// <summary>
    /// <para>Merge Field Mapping.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    public partial class MailMergeFieldType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MailMergeFieldType class.
        /// </summary>
        public MailMergeFieldType() : base()
        {
        }

        /// <summary>
        /// <para>Merge Field Mapping Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeOdsoFieldValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeOdsoFieldValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:type");
            builder.AddElement<MailMergeFieldType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMergeFieldType>(deep);
    }

    /// <summary>
    /// <para>ODSO Data Source Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    public partial class MailMergeSource : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MailMergeSource class.
        /// </summary>
        public MailMergeSource() : base()
        {
        }

        /// <summary>
        /// <para>Data Source Type Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeSourceValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeSourceValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:type");
            builder.AddElement<MailMergeSource>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMergeSource>(deep);
    }

    /// <summary>
    /// <para>External Data Source to Merge Field Mapping.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:fieldMapData.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LanguageId" /> <c>&lt;w:lid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MailMergeFieldType" /> <c>&lt;w:type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DynamicAddress" /> <c>&lt;w:dynamicAddress></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Name" /> <c>&lt;w:name></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MappedName" /> <c>&lt;w:mappedName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ColumnIndex" /> <c>&lt;w:column></c></description></item>
    /// </list>
    /// </remark>
    public partial class FieldMapData : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FieldMapData class.
        /// </summary>
        public FieldMapData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldMapData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldMapData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldMapData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FieldMapData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FieldMapData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FieldMapData(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:fieldMapData");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LanguageId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MailMergeFieldType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DynamicAddress>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Name>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MappedName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ColumnIndex>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.All, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailMergeFieldType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Name), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MappedName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColumnIndex), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LanguageId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DynamicAddress), 0, 1)
            };
        }

        /// <summary>
        /// <para>Merge Field Mapping.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MailMergeFieldType? MailMergeFieldType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MailMergeFieldType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Name for Column.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Name? Name
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Name>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Predefined Merge Field Name.</para>
        /// <para>Represents the following element tag in the schema: w:mappedName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MappedName? MappedName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MappedName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Index of Column Being Mapped.</para>
        /// <para>Represents the following element tag in the schema: w:column.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ColumnIndex? ColumnIndex
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ColumnIndex>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merge Field Name Language ID.</para>
        /// <para>Represents the following element tag in the schema: w:lid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LanguageId? LanguageId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LanguageId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Country/Region-Based Address Field Ordering.</para>
        /// <para>Represents the following element tag in the schema: w:dynamicAddress.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DynamicAddress? DynamicAddress
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DynamicAddress>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FieldMapData>(deep);
    }

    /// <summary>
    /// <para>Source Document Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mainDocumentType.</para>
    /// </summary>
    public partial class MainDocumentType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MainDocumentType class.
        /// </summary>
        public MainDocumentType() : base()
        {
        }

        /// <summary>
        /// <para>Mail Merge Source Document Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDocumentValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDocumentValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mainDocumentType");
            builder.AddElement<MainDocumentType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MainDocumentType>(deep);
    }

    /// <summary>
    /// <para>Data Source Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dataType.</para>
    /// </summary>
    public partial class DataType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DataType class.
        /// </summary>
        public DataType() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDataValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDataValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dataType");
            builder.AddElement<DataType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataType>(deep);
    }

    /// <summary>
    /// <para>Merged Document Destination.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:destination.</para>
    /// </summary>
    public partial class Destination : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Destination class.
        /// </summary>
        public Destination() : base()
        {
        }

        /// <summary>
        /// <para>Mail Merge Merged Document Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDestinationValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MailMergeDestinationValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:destination");
            builder.AddElement<Destination>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Destination>(deep);
    }

    /// <summary>
    /// <para>Office Data Source Object Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:odso.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MailMergeSource" /> <c>&lt;w:type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FieldMapData" /> <c>&lt;w:fieldMapData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FirstRowHeader" /> <c>&lt;w:fHdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SourceReference" /> <c>&lt;w:src></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RecipientDataReference" /> <c>&lt;w:recipientData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UdlConnectionString" /> <c>&lt;w:udl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DataSourceTableName" /> <c>&lt;w:table></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ColumnDelimiter" /> <c>&lt;w:colDelim></c></description></item>
    /// </list>
    /// </remark>
    public partial class DataSourceObject : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DataSourceObject class.
        /// </summary>
        public DataSourceObject() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataSourceObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataSourceObject(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataSourceObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DataSourceObject(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DataSourceObject class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DataSourceObject(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:odso");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MailMergeSource>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FieldMapData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FirstRowHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SourceReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RecipientDataReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UdlConnectionString>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DataSourceTableName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ColumnDelimiter>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UdlConnectionString), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataSourceTableName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SourceReference), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ColumnDelimiter), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailMergeSource), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FirstRowHeader), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FieldMapData), 0, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RecipientDataReference), 0, 1)
            };
        }

        /// <summary>
        /// <para>UDL Connection String.</para>
        /// <para>Represents the following element tag in the schema: w:udl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UdlConnectionString? UdlConnectionString
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UdlConnectionString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Table Name.</para>
        /// <para>Represents the following element tag in the schema: w:table.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DataSourceTableName? DataSourceTableName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DataSourceTableName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ODSO Data Source File Path.</para>
        /// <para>Represents the following element tag in the schema: w:src.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SourceReference? SourceReference
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SourceReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Column Delimiter for Data Source.</para>
        /// <para>Represents the following element tag in the schema: w:colDelim.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ColumnDelimiter? ColumnDelimiter
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ColumnDelimiter>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ODSO Data Source Type.</para>
        /// <para>Represents the following element tag in the schema: w:type.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MailMergeSource? MailMergeSource
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MailMergeSource>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>First Row of Data Source Contains Column Names.</para>
        /// <para>Represents the following element tag in the schema: w:fHdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FirstRowHeader? FirstRowHeader
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FirstRowHeader>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataSourceObject>(deep);
    }

    /// <summary>
    /// <para>Single Document Variable.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docVar.</para>
    /// </summary>
    public partial class DocumentVariable : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentVariable class.
        /// </summary>
        public DocumentVariable() : base()
        {
        }

        /// <summary>
        /// <para>Document Variable Name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Document Variable Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docVar");
            builder.AddElement<DocumentVariable>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MinLength = (1L), MaxLength = (255L) });
                })
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (65280L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentVariable>(deep);
    }

    /// <summary>
    /// <para>Original Document Revision Save ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rsidRoot.</para>
    /// </summary>
    public partial class RsidRoot : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the RsidRoot class.
        /// </summary>
        public RsidRoot() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rsidRoot");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RsidRoot>(deep);
    }

    /// <summary>
    /// <para>Single Session Revision Save ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rsid.</para>
    /// </summary>
    public partial class Rsid : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the Rsid class.
        /// </summary>
        public Rsid() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rsid");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rsid>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Identifier.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:nsid.</para>
    /// </summary>
    public partial class Nsid : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the Nsid class.
        /// </summary>
        public Nsid() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:nsid");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Nsid>(deep);
    }

    /// <summary>
    /// <para>Numbering Template Code.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tmpl.</para>
    /// </summary>
    public partial class TemplateCode : LongHexNumberType
    {
        /// <summary>
        /// Initializes a new instance of the TemplateCode class.
        /// </summary>
        public TemplateCode() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tmpl");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TemplateCode>(deep);
    }

    /// <summary>
    /// <para>Defines the LongHexNumberType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class LongHexNumberType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LongHexNumberType class.
        /// </summary>
        protected LongHexNumberType() : base()
        {
        }

        /// <summary>
        /// <para>Long Hexadecimal Number Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<LongHexNumberType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
        }
    }

    /// <summary>
    /// <para>Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class RunPropertiesBaseStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class.
        /// </summary>
        public RunPropertiesBaseStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesBaseStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesBaseStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesBaseStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunPropertiesBaseStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                            }
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunFonts? RunFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Bold? Bold
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript? BoldComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Italic? Italic
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript? ItalicComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Caps? Caps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SmallCaps? SmallCaps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Strike? Strike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoubleStrike? DoubleStrike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Outline? Outline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shadow? Shadow
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emboss? Emboss
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Imprint? Imprint
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoProof? NoProof
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Vanish? Vanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WebHidden? WebHidden
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Color? Color
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Spacing? Spacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CharacterScale? CharacterScale
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kern? Kern
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSize? FontSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript? FontSizeComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Underline? Underline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextEffect? TextEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Border? Border
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FitText? FitText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment? VerticalTextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emphasis? Emphasis
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Languages? Languages
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout? EastAsianLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpecVanish? SpecVanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertiesBaseStyle>(deep);
    }

    /// <summary>
    /// <para>Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OutlineLevel" /> <c>&lt;w:outlineLvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameProperties" /> <c>&lt;w:framePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Indentation" /> <c>&lt;w:ind></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Justification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingProperties" /> <c>&lt;w:numPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepNext" /> <c>&lt;w:keepNext></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepLines" /> <c>&lt;w:keepLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore" /> <c>&lt;w:pageBreakBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidowControl" /> <c>&lt;w:widowControl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers" /> <c>&lt;w:suppressLineNumbers></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens" /> <c>&lt;w:suppressAutoHyphens></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kinsoku" /> <c>&lt;w:kinsoku></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordWrap" /> <c>&lt;w:wordWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation" /> <c>&lt;w:overflowPunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation" /> <c>&lt;w:topLinePunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE" /> <c>&lt;w:autoSpaceDE></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN" /> <c>&lt;w:autoSpaceDN></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent" /> <c>&lt;w:adjustRightInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing" /> <c>&lt;w:contextualSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MirrorIndents" /> <c>&lt;w:mirrorIndents></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap" /> <c>&lt;w:suppressOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders" /> <c>&lt;w:pBdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Tabs" /> <c>&lt;w:tabs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextAlignment" /> <c>&lt;w:textAlignment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap" /> <c>&lt;w:textboxTightWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphPropertiesBaseStyle : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class.
        /// </summary>
        public ParagraphPropertiesBaseStyle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesBaseStyle(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesBaseStyle(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesBaseStyle class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesBaseStyle(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepNext? KeepNext
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepLines? KeepLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore? PageBreakBefore
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameProperties? FrameProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WidowControl? WidowControl
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingProperties? NumberingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers? SuppressLineNumbers
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders? ParagraphBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Tabs? Tabs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens? SuppressAutoHyphens
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kinsoku? Kinsoku
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordWrap? WordWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation? OverflowPunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation? TopLinePunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE? AutoSpaceDE
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN? AutoSpaceDN
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDi? BiDi
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent? AdjustRightIndent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines? SpacingBetweenLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Indentation? Indentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing? ContextualSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MirrorIndents? MirrorIndents
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap? SuppressOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Justification? Justification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextAlignment? TextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap? TextBoxTightWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OutlineLevel? OutlineLevel
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesBaseStyle>(deep);
    }

    /// <summary>
    /// <para>Default Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPrDefault.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle" /> <c>&lt;w:rPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class RunPropertiesDefault : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class.
        /// </summary>
        public RunPropertiesDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RunPropertiesDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RunPropertiesDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RunPropertiesDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPrDefault");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle? RunPropertiesBaseStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RunPropertiesDefault>(deep);
    }

    /// <summary>
    /// <para>Default Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPrDefault.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle" /> <c>&lt;w:pPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphPropertiesDefault : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class.
        /// </summary>
        public ParagraphPropertiesDefault() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesDefault(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphPropertiesDefault(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphPropertiesDefault class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphPropertiesDefault(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPrDefault");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle), 0, 1)
            };
        }

        /// <summary>
        /// <para>Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle? ParagraphPropertiesBaseStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphPropertiesDefault>(deep);
    }

    /// <summary>
    /// <para>Left and Right Margin for Frame.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marW.</para>
    /// </summary>
    public partial class MarginWidth : PixelsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the MarginWidth class.
        /// </summary>
        public MarginWidth() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:marW");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MarginWidth>(deep);
    }

    /// <summary>
    /// <para>Top and Bottom Margin for Frame.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marH.</para>
    /// </summary>
    public partial class MarginHeight : PixelsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the MarginHeight class.
        /// </summary>
        public MarginHeight() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:marH");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MarginHeight>(deep);
    }

    /// <summary>
    /// <para>Defines the PixelsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class PixelsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PixelsMeasureType class.
        /// </summary>
        protected PixelsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Measurement in Pixels</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Val
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<PixelsMeasureType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Scrollbar Display Option.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:scrollbar.</para>
    /// </summary>
    public partial class ScrollbarVisibility : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ScrollbarVisibility class.
        /// </summary>
        public ScrollbarVisibility() : base()
        {
        }

        /// <summary>
        /// <para>Scrollbar Display Option Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FrameScrollbarVisibilityValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FrameScrollbarVisibilityValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:scrollbar");
            builder.AddElement<ScrollbarVisibility>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ScrollbarVisibility>(deep);
    }

    /// <summary>
    /// <para>Frameset Splitter Width.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:w.</para>
    /// </summary>
    public partial class Width : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the Width class.
        /// </summary>
        public Width() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:w");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Width>(deep);
    }

    /// <summary>
    /// <para>Hyphenation Zone.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hyphenationZone.</para>
    /// </summary>
    public partial class HyphenationZone : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the HyphenationZone class.
        /// </summary>
        public HyphenationZone() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hyphenationZone");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HyphenationZone>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Horizontal Grid Unit Size.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridHorizontalSpacing.</para>
    /// </summary>
    public partial class DrawingGridHorizontalSpacing : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridHorizontalSpacing class.
        /// </summary>
        public DrawingGridHorizontalSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:drawingGridHorizontalSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridHorizontalSpacing>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Vertical Grid Unit Size.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridVerticalSpacing.</para>
    /// </summary>
    public partial class DrawingGridVerticalSpacing : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridVerticalSpacing class.
        /// </summary>
        public DrawingGridVerticalSpacing() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:drawingGridVerticalSpacing");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridVerticalSpacing>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Horizontal Origin Point.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridHorizontalOrigin.</para>
    /// </summary>
    public partial class DrawingGridHorizontalOrigin : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridHorizontalOrigin class.
        /// </summary>
        public DrawingGridHorizontalOrigin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:drawingGridHorizontalOrigin");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridHorizontalOrigin>(deep);
    }

    /// <summary>
    /// <para>Drawing Grid Vertical Origin Point.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:drawingGridVerticalOrigin.</para>
    /// </summary>
    public partial class DrawingGridVerticalOrigin : TwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the DrawingGridVerticalOrigin class.
        /// </summary>
        public DrawingGridVerticalOrigin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:drawingGridVerticalOrigin");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DrawingGridVerticalOrigin>(deep);
    }

    /// <summary>
    /// <para>Defines the TwipsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TwipsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TwipsMeasureType class.
        /// </summary>
        protected TwipsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Measurement in Twentieths of a Point</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TwipsMeasureType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Frameset Splitter Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:framesetSplitbar.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoBorder" /> <c>&lt;w:noBorder></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FlatBorders" /> <c>&lt;w:flatBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Width" /> <c>&lt;w:w></c></description></item>
    /// </list>
    /// </remark>
    public partial class FramesetSplitbar : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class.
        /// </summary>
        public FramesetSplitbar() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FramesetSplitbar(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FramesetSplitbar(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FramesetSplitbar class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FramesetSplitbar(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:framesetSplitbar");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FlatBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Width>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Width), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FlatBorders), 0, 1)
            };
        }

        /// <summary>
        /// <para>Frameset Splitter Width.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Width? Width
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Width>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Splitter Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Color? Color
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Display Frameset Splitters.</para>
        /// <para>Represents the following element tag in the schema: w:noBorder.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoBorder? NoBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Splitter Border Style.</para>
        /// <para>Represents the following element tag in the schema: w:flatBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FlatBorders? FlatBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FlatBorders>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FramesetSplitbar>(deep);
    }

    /// <summary>
    /// <para>Frameset Layout.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:frameLayout.</para>
    /// </summary>
    public partial class FrameLayout : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FrameLayout class.
        /// </summary>
        public FrameLayout() : base()
        {
        }

        /// <summary>
        /// <para>Frameset Layout Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FrameLayoutValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FrameLayoutValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:frameLayout");
            builder.AddElement<FrameLayout>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FrameLayout>(deep);
    }

    /// <summary>
    /// <para>Nested Frameset Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:frameset.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Frame" /> <c>&lt;w:frame></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameLayout" /> <c>&lt;w:frameLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Frameset" /> <c>&lt;w:frameset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FramesetSplitbar" /> <c>&lt;w:framesetSplitbar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameSize" /> <c>&lt;w:sz></c></description></item>
    /// </list>
    /// </remark>
    public partial class Frameset : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Frameset class.
        /// </summary>
        public Frameset() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frameset class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frameset(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frameset class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frameset(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frameset class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Frameset(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:frameset");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Frame>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Frameset>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FramesetSplitbar>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameSize>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameSize), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FramesetSplitbar), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameLayout), 0, 1),
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Frameset), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Frame), 1, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Nested Frameset Size.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameSize? FrameSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Splitter Properties.</para>
        /// <para>Represents the following element tag in the schema: w:framesetSplitbar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FramesetSplitbar? FramesetSplitbar
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FramesetSplitbar>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frameset Layout.</para>
        /// <para>Represents the following element tag in the schema: w:frameLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameLayout? FrameLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameLayout>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Frameset>(deep);
    }

    /// <summary>
    /// <para>Single Frame Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:frame.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ScrollbarVisibility" /> <c>&lt;w:scrollbar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoResizeAllowed" /> <c>&lt;w:noResizeAllowed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LinkedToFile" /> <c>&lt;w:linkedToFile></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MarginWidth" /> <c>&lt;w:marW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MarginHeight" /> <c>&lt;w:marH></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SourceFileReference" /> <c>&lt;w:sourceFileName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameName" /> <c>&lt;w:name></c></description></item>
    /// </list>
    /// </remark>
    public partial class Frame : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Frame class.
        /// </summary>
        public Frame() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frame(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frame class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Frame(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Frame class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Frame(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:frame");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ScrollbarVisibility>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoResizeAllowed>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LinkedToFile>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MarginWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MarginHeight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SourceFileReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameName>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameSize), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SourceFileReference), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MarginWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MarginHeight), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ScrollbarVisibility), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoResizeAllowed), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkedToFile), 0, 1)
            };
        }

        /// <summary>
        /// <para>Frame Size.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameSize? FrameSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frame Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameName? FrameName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Source File for Frame.</para>
        /// <para>Represents the following element tag in the schema: w:sourceFileName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SourceFileReference? SourceFileReference
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SourceFileReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left and Right Margin for Frame.</para>
        /// <para>Represents the following element tag in the schema: w:marW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MarginWidth? MarginWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MarginWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top and Bottom Margin for Frame.</para>
        /// <para>Represents the following element tag in the schema: w:marH.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MarginHeight? MarginHeight
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MarginHeight>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Scrollbar Display Option.</para>
        /// <para>Represents the following element tag in the schema: w:scrollbar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ScrollbarVisibility? ScrollbarVisibility
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ScrollbarVisibility>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Frame Cannot Be Resized.</para>
        /// <para>Represents the following element tag in the schema: w:noResizeAllowed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoResizeAllowed? NoResizeAllowed
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoResizeAllowed>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Maintain Link to Existing File.</para>
        /// <para>Represents the following element tag in the schema: w:linkedToFile.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LinkedToFile? LinkedToFile
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LinkedToFile>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Frame>(deep);
    }

    /// <summary>
    /// <para>Content Between Numbering Symbol and Paragraph Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:suff.</para>
    /// </summary>
    public partial class LevelSuffix : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelSuffix class.
        /// </summary>
        public LevelSuffix() : base()
        {
        }

        /// <summary>
        /// <para>Character Type Between Numbering and Text</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LevelSuffixValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.LevelSuffixValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:suff");
            builder.AddElement<LevelSuffix>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelSuffix>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Text.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlText.</para>
    /// </summary>
    public partial class LevelText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelText class.
        /// </summary>
        public LevelText() : base()
        {
        }

        /// <summary>
        /// <para>Level Text</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Level Text Is Null Character</para>
        /// <para>Represents the following attribute in the schema: w:null</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Null
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lvlText");
            builder.AddElement<LevelText>()
                .AddAttribute("w:val", a => a.Val)
                .AddAttribute("w:null", a => a.Null);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelText>(deep);
    }

    /// <summary>
    /// <para>Legacy Numbering Level Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:legacy.</para>
    /// </summary>
    public partial class LegacyNumbering : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LegacyNumbering class.
        /// </summary>
        public LegacyNumbering() : base()
        {
        }

        /// <summary>
        /// <para>Use Legacy Numbering Properties</para>
        /// <para>Represents the following attribute in the schema: w:legacy</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Legacy
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Legacy Spacing</para>
        /// <para>Represents the following attribute in the schema: w:legacySpace</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? LegacySpace
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Legacy Indent</para>
        /// <para>Represents the following attribute in the schema: w:legacyIndent</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? LegacyIndent
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:legacy");
            builder.AddElement<LegacyNumbering>()
                .AddAttribute("w:legacy", a => a.Legacy)
                .AddAttribute("w:legacySpace", a => a.LegacySpace, aBuilder =>
                {
                    aBuilder.AddValidator<UInt32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<UInt32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                })
                .AddAttribute("w:legacyIndent", a => a.LegacyIndent, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LegacyNumbering>(deep);
    }

    /// <summary>
    /// <para>Justification.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlJc.</para>
    /// </summary>
    public partial class LevelJustification : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelJustification class.
        /// </summary>
        public LevelJustification() : base()
        {
        }

        /// <summary>
        /// <para>Alignment Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LevelJustificationValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.LevelJustificationValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lvlJc");
            builder.AddElement<LevelJustification>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelJustification>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Associated Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OutlineLevel" /> <c>&lt;w:outlineLvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameProperties" /> <c>&lt;w:framePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Indentation" /> <c>&lt;w:ind></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Justification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingProperties" /> <c>&lt;w:numPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepNext" /> <c>&lt;w:keepNext></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepLines" /> <c>&lt;w:keepLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore" /> <c>&lt;w:pageBreakBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidowControl" /> <c>&lt;w:widowControl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers" /> <c>&lt;w:suppressLineNumbers></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens" /> <c>&lt;w:suppressAutoHyphens></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kinsoku" /> <c>&lt;w:kinsoku></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordWrap" /> <c>&lt;w:wordWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation" /> <c>&lt;w:overflowPunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation" /> <c>&lt;w:topLinePunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE" /> <c>&lt;w:autoSpaceDE></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN" /> <c>&lt;w:autoSpaceDN></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent" /> <c>&lt;w:adjustRightInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing" /> <c>&lt;w:contextualSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MirrorIndents" /> <c>&lt;w:mirrorIndents></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap" /> <c>&lt;w:suppressOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders" /> <c>&lt;w:pBdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId" /> <c>&lt;w:pStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Tabs" /> <c>&lt;w:tabs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextAlignment" /> <c>&lt;w:textAlignment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap" /> <c>&lt;w:textboxTightWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousParagraphProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class.
        /// </summary>
        public PreviousParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>ParagraphStyleId.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId? ParagraphStyleId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepNext? KeepNext
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepLines? KeepLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore? PageBreakBefore
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameProperties? FrameProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WidowControl? WidowControl
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingProperties? NumberingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers? SuppressLineNumbers
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders? ParagraphBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Tabs? Tabs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens? SuppressAutoHyphens
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kinsoku? Kinsoku
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordWrap? WordWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation? OverflowPunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation? TopLinePunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE? AutoSpaceDE
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN? AutoSpaceDN
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDi? BiDi
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent? AdjustRightIndent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines? SpacingBetweenLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Indentation? Indentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing? ContextualSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MirrorIndents? MirrorIndents
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap? SuppressOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Justification? Justification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextAlignment? TextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap? TextBoxTightWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OutlineLevel? OutlineLevel
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Numbering Symbol Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightToLeftText" /> <c>&lt;w:rtl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ComplexScript" /> <c>&lt;w:cs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class NumberingSymbolRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class.
        /// </summary>
        public NumberingSymbolRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingSymbolRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingSymbolRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingSymbolRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingSymbolRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightToLeftText), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ComplexScript), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunFonts? RunFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Bold? Bold
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript? BoldComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Italic? Italic
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript? ItalicComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Caps? Caps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SmallCaps? SmallCaps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Strike? Strike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoubleStrike? DoubleStrike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Outline? Outline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shadow? Shadow
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emboss? Emboss
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Imprint? Imprint
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoProof? NoProof
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Vanish? Vanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WebHidden? WebHidden
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Color? Color
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Spacing? Spacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CharacterScale? CharacterScale
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kern? Kern
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSize? FontSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript? FontSizeComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Underline? Underline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextEffect? TextEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Border? Border
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FitText? FitText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment? VerticalTextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RightToLeftText.</para>
        /// <para>Represents the following element tag in the schema: w:rtl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightToLeftText? RightToLeftText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightToLeftText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:cs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ComplexScript? ComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emphasis? Emphasis
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Languages? Languages
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout? EastAsianLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpecVanish? SpecVanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingSymbolRunProperties>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:multiLevelType.</para>
    /// </summary>
    public partial class MultiLevelType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the MultiLevelType class.
        /// </summary>
        public MultiLevelType() : base()
        {
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.MultiLevelValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.MultiLevelValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:multiLevelType");
            builder.AddElement<MultiLevelType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MultiLevelType>(deep);
    }

    /// <summary>
    /// <para>Numbering Level Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvl.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LevelRestart" /> <c>&lt;w:lvlRestart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LevelPictureBulletId" /> <c>&lt;w:lvlPicBulletId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LevelJustification" /> <c>&lt;w:lvlJc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LevelSuffix" /> <c>&lt;w:suff></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LevelText" /> <c>&lt;w:lvlText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LegacyNumbering" /> <c>&lt;w:legacy></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StartNumberingValue" /> <c>&lt;w:start></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingFormat" /> <c>&lt;w:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.IsLegalNumberingStyle" /> <c>&lt;w:isLgl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphProperties" /> <c>&lt;w:pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingSymbolRunProperties" /> <c>&lt;w:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleIdInLevel" /> <c>&lt;w:pStyle></c></description></item>
    /// </list>
    /// </remark>
    public partial class Level : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Level class.
        /// </summary>
        public Level() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Level(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Level class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Level(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Numbering Level</para>
        /// <para>Represents the following attribute in the schema: w:ilvl</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? LevelIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Template Code</para>
        /// <para>Represents the following attribute in the schema: w:tplc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? TemplateCode
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Tentative Numbering</para>
        /// <para>Represents the following attribute in the schema: w:tentative</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Tentative
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lvl");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LevelRestart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LevelPictureBulletId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LevelJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LevelSuffix>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LevelText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LegacyNumbering>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StartNumberingValue>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.IsLegalNumberingStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingSymbolRunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleIdInLevel>();
            builder.AddElement<Level>()
                .AddAttribute("w:ilvl", a => a.LevelIndex, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:tplc", a => a.TemplateCode, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:tentative", a => a.Tentative);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartNumberingValue), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelRestart), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleIdInLevel), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.IsLegalNumberingStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelSuffix), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelText), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelPictureBulletId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LegacyNumbering), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelJustification), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingSymbolRunProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:start.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StartNumberingValue? StartNumberingValue
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StartNumberingValue>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingFormat? NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Restart Numbering Level Symbol.</para>
        /// <para>Represents the following element tag in the schema: w:lvlRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LevelRestart? LevelRestart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LevelRestart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Paragraph Style's Associated Numbering Level.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleIdInLevel? ParagraphStyleIdInLevel
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleIdInLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Display All Levels Using Arabic Numerals.</para>
        /// <para>Represents the following element tag in the schema: w:isLgl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.IsLegalNumberingStyle? IsLegalNumberingStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.IsLegalNumberingStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Content Between Numbering Symbol and Paragraph Text.</para>
        /// <para>Represents the following element tag in the schema: w:suff.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LevelSuffix? LevelSuffix
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LevelSuffix>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Level Text.</para>
        /// <para>Represents the following element tag in the schema: w:lvlText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LevelText? LevelText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LevelText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Picture Numbering Symbol Definition Reference.</para>
        /// <para>Represents the following element tag in the schema: w:lvlPicBulletId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LevelPictureBulletId? LevelPictureBulletId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LevelPictureBulletId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Legacy Numbering Level Properties.</para>
        /// <para>Represents the following element tag in the schema: w:legacy.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LegacyNumbering? LegacyNumbering
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LegacyNumbering>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:lvlJc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LevelJustification? LevelJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LevelJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Level Associated Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphProperties? PreviousParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Symbol Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingSymbolRunProperties? NumberingSymbolRunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingSymbolRunProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Level>(deep);
    }

    /// <summary>
    /// <para>Picture Numbering Symbol Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:numPicBullet.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Drawing" /> <c>&lt;w:drawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PictureBulletBase" /> <c>&lt;w:pict></c></description></item>
    /// </list>
    /// </remark>
    public partial class NumberingPictureBullet : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class.
        /// </summary>
        public NumberingPictureBullet() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingPictureBullet(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingPictureBullet(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingPictureBullet class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingPictureBullet(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>numPicBulletId</para>
        /// <para>Represents the following attribute in the schema: w:numPicBulletId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? NumberingPictureBulletId
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:numPicBullet");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Drawing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PictureBulletBase>();
            builder.AddElement<NumberingPictureBullet>()
                .AddAttribute("w:numPicBulletId", a => a.NumberingPictureBulletId, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PictureBulletBase), 1, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Drawing), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:numPicBulletId"), true, null));
        }

        /// <summary>
        /// <para>PictureBulletBase.</para>
        /// <para>Represents the following element tag in the schema: w:pict.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PictureBulletBase? PictureBulletBase
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PictureBulletBase>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Drawing.</para>
        /// <para>Represents the following element tag in the schema: w:drawing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Drawing? Drawing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Drawing>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingPictureBullet>(deep);
    }

    /// <summary>
    /// <para>Abstract Numbering Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:abstractNum.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Nsid" /> <c>&lt;w:nsid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TemplateCode" /> <c>&lt;w:tmpl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Level" /> <c>&lt;w:lvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MultiLevelType" /> <c>&lt;w:multiLevelType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AbstractNumDefinitionName" /> <c>&lt;w:name></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleLink" /> <c>&lt;w:styleLink></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingStyleLink" /> <c>&lt;w:numStyleLink></c></description></item>
    /// </list>
    /// </remark>
    public partial class AbstractNum : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AbstractNum class.
        /// </summary>
        public AbstractNum() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbstractNum class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AbstractNum(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbstractNum class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AbstractNum(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbstractNum class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AbstractNum(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Abstract Numbering Definition ID</para>
        /// <para>Represents the following attribute in the schema: w:abstractNumId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? AbstractNumberId
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:abstractNum");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Nsid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TemplateCode>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Level>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MultiLevelType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AbstractNumDefinitionName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleLink>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingStyleLink>();
            builder.AddElement<AbstractNum>()
                .AddAttribute("w:abstractNumId", a => a.AbstractNumberId, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Nsid), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MultiLevelType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TemplateCode), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AbstractNumDefinitionName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleLink), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStyleLink), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Level), 0, 9)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:abstractNumId"), true, null));
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Identifier.</para>
        /// <para>Represents the following element tag in the schema: w:nsid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Nsid? Nsid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Nsid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Type.</para>
        /// <para>Represents the following element tag in the schema: w:multiLevelType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MultiLevelType? MultiLevelType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MultiLevelType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Template Code.</para>
        /// <para>Represents the following element tag in the schema: w:tmpl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TemplateCode? TemplateCode
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TemplateCode>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Abstract Numbering Definition Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AbstractNumDefinitionName? AbstractNumDefinitionName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AbstractNumDefinitionName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Style Definition.</para>
        /// <para>Represents the following element tag in the schema: w:styleLink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleLink? StyleLink
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleLink>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Style Reference.</para>
        /// <para>Represents the following element tag in the schema: w:numStyleLink.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingStyleLink? NumberingStyleLink
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingStyleLink>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbstractNum>(deep);
    }

    /// <summary>
    /// <para>Numbering Definition Instance.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:num.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AbstractNumId" /> <c>&lt;w:abstractNumId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LevelOverride" /> <c>&lt;w:lvlOverride></c></description></item>
    /// </list>
    /// </remark>
    public partial class NumberingInstance : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the NumberingInstance class.
        /// </summary>
        public NumberingInstance() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingInstance class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingInstance(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingInstance class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NumberingInstance(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberingInstance class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NumberingInstance(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>numId</para>
        /// <para>Represents the following attribute in the schema: w:numId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? NumberID
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>durableId</para>
        /// <para>Represents the following attribute in the schema: w:durableId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? DurableId
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:num");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AbstractNumId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LevelOverride>();
            builder.AddElement<NumberingInstance>()
                .AddAttribute("w:numId", a => a.NumberID, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:durableId", a => a.DurableId);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AbstractNumId), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LevelOverride), 0, 9)
            };
            builder.AddConstraint(new AttributeValueLengthConstraint(builder.CreateQName("w:numId"), 0, 32) { Application = ApplicationType.Word });
        }

        /// <summary>
        /// <para>AbstractNumId.</para>
        /// <para>Represents the following element tag in the schema: w:abstractNumId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AbstractNumId? AbstractNumId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AbstractNumId>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberingInstance>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OutlineLevel" /> <c>&lt;w:outlineLvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameProperties" /> <c>&lt;w:framePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Indentation" /> <c>&lt;w:ind></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Justification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingProperties" /> <c>&lt;w:numPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepNext" /> <c>&lt;w:keepNext></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepLines" /> <c>&lt;w:keepLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore" /> <c>&lt;w:pageBreakBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidowControl" /> <c>&lt;w:widowControl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers" /> <c>&lt;w:suppressLineNumbers></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens" /> <c>&lt;w:suppressAutoHyphens></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kinsoku" /> <c>&lt;w:kinsoku></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordWrap" /> <c>&lt;w:wordWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation" /> <c>&lt;w:overflowPunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation" /> <c>&lt;w:topLinePunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE" /> <c>&lt;w:autoSpaceDE></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN" /> <c>&lt;w:autoSpaceDN></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent" /> <c>&lt;w:adjustRightInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing" /> <c>&lt;w:contextualSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MirrorIndents" /> <c>&lt;w:mirrorIndents></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap" /> <c>&lt;w:suppressOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders" /> <c>&lt;w:pBdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange" /> <c>&lt;w:pPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Tabs" /> <c>&lt;w:tabs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextAlignment" /> <c>&lt;w:textAlignment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap" /> <c>&lt;w:textboxTightWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    /// </list>
    /// </remark>
    public partial class StyleParagraphProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class.
        /// </summary>
        public StyleParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange), 0, 1)
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepNext? KeepNext
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepLines? KeepLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore? PageBreakBefore
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameProperties? FrameProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WidowControl? WidowControl
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingProperties? NumberingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers? SuppressLineNumbers
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders? ParagraphBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Tabs? Tabs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens? SuppressAutoHyphens
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kinsoku? Kinsoku
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordWrap? WordWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation? OverflowPunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation? TopLinePunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE? AutoSpaceDE
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN? AutoSpaceDN
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDi? BiDi
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent? AdjustRightIndent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines? SpacingBetweenLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Indentation? Indentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing? ContextualSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MirrorIndents? MirrorIndents
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap? SuppressOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Justification? Justification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextAlignment? TextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap? TextBoxTightWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OutlineLevel? OutlineLevel
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:pPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange? ParagraphPropertiesChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Table Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableBorders" /> <c>&lt;w:tblBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault" /> <c>&lt;w:tblCellMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableIndentation" /> <c>&lt;w:tblInd></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleConditionalFormattingTableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class.
        /// </summary>
        public TableStyleConditionalFormattingTableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleConditionalFormattingTableProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableJustification? TableJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing? TableCellSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableIndentation? TableIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableBorders? TableBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault? TableCellMarginDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleConditionalFormattingTableProperties>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Table Row Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hidden" /> <c>&lt;w:hidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CantSplit" /> <c>&lt;w:cantSplit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableHeader" /> <c>&lt;w:tblHeader></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleConditionalFormattingTableRowProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class.
        /// </summary>
        public TableStyleConditionalFormattingTableRowProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableRowProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableRowProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableRowProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleConditionalFormattingTableRowProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:trPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CantSplit>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 0)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hidden), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CantSplit), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableHeader), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleConditionalFormattingTableRowProperties>(deep);
    }

    /// <summary>
    /// <para>Table Style Conditional Formatting Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoWrap" /> <c>&lt;w:noWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellBorders" /> <c>&lt;w:tcBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMargin" /> <c>&lt;w:tcMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment" /> <c>&lt;w:vAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleConditionalFormattingTableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class.
        /// </summary>
        public TableStyleConditionalFormattingTableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleConditionalFormattingTableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleConditionalFormattingTableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleConditionalFormattingTableCellProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellBorders), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>TableCellBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tcBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellBorders? TableCellBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoWrap? NoWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMargin? TableCellMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment? TableCellVerticalAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleConditionalFormattingTableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Primary Style Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    public partial class StyleName : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleName class.
        /// </summary>
        public StyleName() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:name");
            builder.AddElement<StyleName>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[^,]*") });
                });
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @"[^,]*") { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleName>(deep);
    }

    /// <summary>
    /// <para>Optional User Interface Sorting Order.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:uiPriority.</para>
    /// </summary>
    public partial class UIPriority : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UIPriority class.
        /// </summary>
        public UIPriority() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:uiPriority");
            builder.AddElement<UIPriority>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (99L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UIPriority>(deep);
    }

    /// <summary>
    /// <para>Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Border" /> <c>&lt;w:bdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Color" /> <c>&lt;w:color></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout" /> <c>&lt;w:eastAsianLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emphasis" /> <c>&lt;w:em></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FitText" /> <c>&lt;w:fitText></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunFonts" /> <c>&lt;w:rFonts></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kern" /> <c>&lt;w:kern></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSize" /> <c>&lt;w:sz></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript" /> <c>&lt;w:szCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Languages" /> <c>&lt;w:lang></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Bold" /> <c>&lt;w:b></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript" /> <c>&lt;w:bCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Italic" /> <c>&lt;w:i></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript" /> <c>&lt;w:iCs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caps" /> <c>&lt;w:caps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SmallCaps" /> <c>&lt;w:smallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Strike" /> <c>&lt;w:strike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoubleStrike" /> <c>&lt;w:dstrike></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Outline" /> <c>&lt;w:outline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shadow" /> <c>&lt;w:shadow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Emboss" /> <c>&lt;w:emboss></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Imprint" /> <c>&lt;w:imprint></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoProof" /> <c>&lt;w:noProof></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Vanish" /> <c>&lt;w:vanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WebHidden" /> <c>&lt;w:webHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpecVanish" /> <c>&lt;w:specVanish></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange" /> <c>&lt;w:rPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Spacing" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Position" /> <c>&lt;w:position></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextEffect" /> <c>&lt;w:effect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CharacterScale" /> <c>&lt;w:w></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Underline" /> <c>&lt;w:u></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment" /> <c>&lt;w:vertAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class StyleRunProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class.
        /// </summary>
        public StyleRunProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleRunProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleRunProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleRunProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleRunProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Border>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Color>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Position>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunFonts), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Bold), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Italic), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SmallCaps), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Strike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoubleStrike), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Outline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shadow), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emboss), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Imprint), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoProof), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Vanish), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WebHidden), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Color), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Spacing), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CharacterScale), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kern), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Position), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSize), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Underline), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextEffect), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Border), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FitText), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment), 0, 1)
                                    }
                                },
                                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                    {
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Emphasis), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Languages), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout), 0, 1),
                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpecVanish), 0, 1)
                                    }
                                }
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange), 0, 1)
                            }
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>RunFonts.</para>
        /// <para>Represents the following element tag in the schema: w:rFonts.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunFonts? RunFonts
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunFonts>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bold.</para>
        /// <para>Represents the following element tag in the schema: w:b.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Bold? Bold
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Bold>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BoldComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:bCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript? BoldComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BoldComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Italic.</para>
        /// <para>Represents the following element tag in the schema: w:i.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Italic? Italic
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Italic>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ItalicComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:iCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript? ItalicComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ItalicComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Caps.</para>
        /// <para>Represents the following element tag in the schema: w:caps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Caps? Caps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Caps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SmallCaps.</para>
        /// <para>Represents the following element tag in the schema: w:smallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SmallCaps? SmallCaps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Strike.</para>
        /// <para>Represents the following element tag in the schema: w:strike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Strike? Strike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Strike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DoubleStrike.</para>
        /// <para>Represents the following element tag in the schema: w:dstrike.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoubleStrike? DoubleStrike
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoubleStrike>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Outline.</para>
        /// <para>Represents the following element tag in the schema: w:outline.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Outline? Outline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Outline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shadow.</para>
        /// <para>Represents the following element tag in the schema: w:shadow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shadow? Shadow
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shadow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emboss.</para>
        /// <para>Represents the following element tag in the schema: w:emboss.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emboss? Emboss
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emboss>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Imprint.</para>
        /// <para>Represents the following element tag in the schema: w:imprint.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Imprint? Imprint
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Imprint>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoProof.</para>
        /// <para>Represents the following element tag in the schema: w:noProof.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoProof? NoProof
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoProof>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Vanish.</para>
        /// <para>Represents the following element tag in the schema: w:vanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Vanish? Vanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Vanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WebHidden.</para>
        /// <para>Represents the following element tag in the schema: w:webHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WebHidden? WebHidden
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WebHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Color.</para>
        /// <para>Represents the following element tag in the schema: w:color.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Color? Color
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Color>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Spacing? Spacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Spacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>CharacterScale.</para>
        /// <para>Represents the following element tag in the schema: w:w.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CharacterScale? CharacterScale
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CharacterScale>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kern.</para>
        /// <para>Represents the following element tag in the schema: w:kern.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kern? Kern
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kern>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Position.</para>
        /// <para>Represents the following element tag in the schema: w:position.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Position? Position
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Position>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSize.</para>
        /// <para>Represents the following element tag in the schema: w:sz.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSize? FontSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSizeComplexScript.</para>
        /// <para>Represents the following element tag in the schema: w:szCs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript? FontSizeComplexScript
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSizeComplexScript>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline.</para>
        /// <para>Represents the following element tag in the schema: w:u.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Underline? Underline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Underline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextEffect.</para>
        /// <para>Represents the following element tag in the schema: w:effect.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextEffect? TextEffect
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextEffect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Border.</para>
        /// <para>Represents the following element tag in the schema: w:bdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Border? Border
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Border>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FitText.</para>
        /// <para>Represents the following element tag in the schema: w:fitText.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FitText? FitText
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FitText>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>VerticalTextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vertAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment? VerticalTextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.VerticalTextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emphasis.</para>
        /// <para>Represents the following element tag in the schema: w:em.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Emphasis? Emphasis
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Emphasis>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Languages.</para>
        /// <para>Represents the following element tag in the schema: w:lang.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Languages? Languages
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Languages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EastAsianLayout.</para>
        /// <para>Represents the following element tag in the schema: w:eastAsianLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout? EastAsianLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EastAsianLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpecVanish.</para>
        /// <para>Represents the following element tag in the schema: w:specVanish.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpecVanish? SpecVanish
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpecVanish>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>RunPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:rPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange? RunPropertiesChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleRunProperties>(deep);
    }

    /// <summary>
    /// <para>Style Table Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableBorders" /> <c>&lt;w:tblBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault" /> <c>&lt;w:tblCellMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableIndentation" /> <c>&lt;w:tblInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleRowBandSize" /> <c>&lt;w:tblStyleRowBandSize></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleColumnBandSize" /> <c>&lt;w:tblStyleColBandSize></c></description></item>
    /// </list>
    /// </remark>
    public partial class StyleTableProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class.
        /// </summary>
        public StyleTableProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleTableProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleRowBandSize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleColumnBandSize>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleRowBandSize), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleColumnBandSize), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>TableStyleRowBandSize.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyleRowBandSize.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyleRowBandSize? TableStyleRowBandSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyleRowBandSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableStyleColumnBandSize.</para>
        /// <para>Represents the following element tag in the schema: w:tblStyleColBandSize.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyleColumnBandSize? TableStyleColumnBandSize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyleColumnBandSize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableJustification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableJustification? TableJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing? TableCellSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableIndentation.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableIndentation? TableIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableBorders.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableBorders? TableBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMarginDefault.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault? TableCellMarginDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleTableProperties>(deep);
    }

    /// <summary>
    /// <para>Style Table Cell Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tcPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoWrap" /> <c>&lt;w:noWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMargin" /> <c>&lt;w:tcMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment" /> <c>&lt;w:vAlign></c></description></item>
    /// </list>
    /// </remark>
    public partial class StyleTableCellProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class.
        /// </summary>
        public StyleTableCellProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableCellProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public StyleTableCellProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the StyleTableCellProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public StyleTableCellProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tcPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoWrap), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMargin), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment), 0, 1)
                    }
                }
            };
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NoWrap.</para>
        /// <para>Represents the following element tag in the schema: w:noWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoWrap? NoWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellMargin.</para>
        /// <para>Represents the following element tag in the schema: w:tcMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMargin? TableCellMargin
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMargin>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TableCellVerticalAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:vAlign.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment? TableCellVerticalAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellVerticalAlignment>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StyleTableCellProperties>(deep);
    }

    /// <summary>
    /// <para>Style Conditional Table Formatting Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblStylePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties" /> <c>&lt;w:pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle" /> <c>&lt;w:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableProperties" /> <c>&lt;w:tblPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableCellProperties" /> <c>&lt;w:tcPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties" /> <c>&lt;w:trPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableStyleProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class.
        /// </summary>
        public TableStyleProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableStyleProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableStyleProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableStyleProperties(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableStyleOverrideValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableStyleOverrideValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblStylePr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableCellProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties>();
            builder.AddElement<TableStyleProperties>()
                .AddAttribute("w:type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableCellProperties), 0, 1)
            };
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties? StyleParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle? RunPropertiesBaseStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesBaseStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableProperties? TableStyleConditionalFormattingTableProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties? TableStyleConditionalFormattingTableRowProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableCellProperties? TableStyleConditionalFormattingTableCellProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableCellProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableStyleProperties>(deep);
    }

    /// <summary>
    /// <para>Latent Style Exception.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lsdException.</para>
    /// </summary>
    public partial class LatentStyleExceptionInfo : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the LatentStyleExceptionInfo class.
        /// </summary>
        public LatentStyleExceptionInfo() : base()
        {
        }

        /// <summary>
        /// <para>Primary Style Name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Latent Style Locking Setting</para>
        /// <para>Represents the following attribute in the schema: w:locked</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Locked
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Override default sorting order</para>
        /// <para>Represents the following attribute in the schema: w:uiPriority</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? UiPriority
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Semi hidden text override</para>
        /// <para>Represents the following attribute in the schema: w:semiHidden</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? SemiHidden
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Unhide when used</para>
        /// <para>Represents the following attribute in the schema: w:unhideWhenUsed</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? UnhideWhenUsed
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Latent Style Primary Style Setting</para>
        /// <para>Represents the following attribute in the schema: w:qFormat</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? PrimaryStyle
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lsdException");
            builder.AddElement<LatentStyleExceptionInfo>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:locked", a => a.Locked)
                .AddAttribute("w:uiPriority", a => a.UiPriority, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (99L) });
                })
                .AddAttribute("w:semiHidden", a => a.SemiHidden)
                .AddAttribute("w:unhideWhenUsed", a => a.UnhideWhenUsed)
                .AddAttribute("w:qFormat", a => a.PrimaryStyle);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatentStyleExceptionInfo>(deep);
    }

    /// <summary>
    /// <para>Document Default Paragraph and Run Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesDefault" /> <c>&lt;w:pPrDefault></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RunPropertiesDefault" /> <c>&lt;w:rPrDefault></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocDefaults : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocDefaults class.
        /// </summary>
        public DocDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocDefaults(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docDefaults");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesDefault>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RunPropertiesDefault), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesDefault), 0, 1)
            };
        }

        /// <summary>
        /// <para>Default Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPrDefault.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RunPropertiesDefault? RunPropertiesDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RunPropertiesDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Default Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPrDefault.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesDefault? ParagraphPropertiesDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesDefault>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocDefaults>(deep);
    }

    /// <summary>
    /// <para>Latent Style Information.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:latentStyles.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LatentStyleExceptionInfo" /> <c>&lt;w:lsdException></c></description></item>
    /// </list>
    /// </remark>
    public partial class LatentStyles : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LatentStyles class.
        /// </summary>
        public LatentStyles() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LatentStyles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LatentStyles(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LatentStyles class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LatentStyles(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LatentStyles class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LatentStyles(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Default Style Locking Setting</para>
        /// <para>Represents the following attribute in the schema: w:defLockedState</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DefaultLockedState
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default User Interface Priority Setting</para>
        /// <para>Represents the following attribute in the schema: w:defUIPriority</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? DefaultUiPriority
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Semi-Hidden Setting</para>
        /// <para>Represents the following attribute in the schema: w:defSemiHidden</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DefaultSemiHidden
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Hidden Until Used Setting</para>
        /// <para>Represents the following attribute in the schema: w:defUnhideWhenUsed</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DefaultUnhideWhenUsed
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Primary Style Setting</para>
        /// <para>Represents the following attribute in the schema: w:defQFormat</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DefaultPrimaryStyle
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Latent Style Count</para>
        /// <para>Represents the following attribute in the schema: w:count</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Count
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:latentStyles");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LatentStyleExceptionInfo>();
            builder.AddElement<LatentStyles>()
                .AddAttribute("w:defLockedState", a => a.DefaultLockedState)
                .AddAttribute("w:defUIPriority", a => a.DefaultUiPriority, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (99L) });
                })
                .AddAttribute("w:defSemiHidden", a => a.DefaultSemiHidden)
                .AddAttribute("w:defUnhideWhenUsed", a => a.DefaultUnhideWhenUsed)
                .AddAttribute("w:defQFormat", a => a.DefaultPrimaryStyle)
                .AddAttribute("w:count", a => a.Count);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LatentStyleExceptionInfo), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LatentStyles>(deep);
    }

    /// <summary>
    /// <para>Style Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:style.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Rsid" /> <c>&lt;w:rsid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoRedefine" /> <c>&lt;w:autoRedefine></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleHidden" /> <c>&lt;w:hidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SemiHidden" /> <c>&lt;w:semiHidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UnhideWhenUsed" /> <c>&lt;w:unhideWhenUsed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrimaryStyle" /> <c>&lt;w:qFormat></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Locked" /> <c>&lt;w:locked></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Personal" /> <c>&lt;w:personal></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PersonalCompose" /> <c>&lt;w:personalCompose></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PersonalReply" /> <c>&lt;w:personalReply></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties" /> <c>&lt;w:pPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleRunProperties" /> <c>&lt;w:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Aliases" /> <c>&lt;w:aliases></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BasedOn" /> <c>&lt;w:basedOn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NextParagraphStyle" /> <c>&lt;w:next></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LinkedStyle" /> <c>&lt;w:link></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleName" /> <c>&lt;w:name></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleTableProperties" /> <c>&lt;w:tblPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleProperties" /> <c>&lt;w:tblStylePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleTableCellProperties" /> <c>&lt;w:tcPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties" /> <c>&lt;w:trPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UIPriority" /> <c>&lt;w:uiPriority></c></description></item>
    /// </list>
    /// </remark>
    public partial class Style : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Style class.
        /// </summary>
        public Style() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Style class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Style(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Style class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Style(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Style class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Style(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Style Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.StyleValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.StyleValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Style ID</para>
        /// <para>Represents the following attribute in the schema: w:styleId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? StyleId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Default Style</para>
        /// <para>Represents the following attribute in the schema: w:default</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Default
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>User-Defined Style</para>
        /// <para>Represents the following attribute in the schema: w:customStyle</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? CustomStyle
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:style");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Rsid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoRedefine>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SemiHidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UnhideWhenUsed>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrimaryStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Locked>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Personal>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PersonalCompose>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PersonalReply>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleRunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Aliases>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BasedOn>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NextParagraphStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LinkedStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleTableProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleTableCellProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UIPriority>();
            builder.AddElement<Style>()
                .AddAttribute("w:type", a => a.Type)
                .AddAttribute("w:styleId", a => a.StyleId, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (253L) });
                })
                .AddAttribute("w:default", a => a.Default)
                .AddAttribute("w:customStyle", a => a.CustomStyle);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Aliases), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BasedOn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NextParagraphStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkedStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoRedefine), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleHidden), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UIPriority), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SemiHidden), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UnhideWhenUsed), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrimaryStyle), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Locked), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Personal), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PersonalCompose), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PersonalReply), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Rsid), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleRunProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleTableProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleTableCellProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableStyleProperties), 0, 0)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:styleId"), true, null));
        }

        /// <summary>
        /// <para>Primary Style Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleName? StyleName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Alternate Style Names.</para>
        /// <para>Represents the following element tag in the schema: w:aliases.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Aliases? Aliases
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Aliases>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Parent Style ID.</para>
        /// <para>Represents the following element tag in the schema: w:basedOn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BasedOn? BasedOn
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BasedOn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style For Next Paragraph.</para>
        /// <para>Represents the following element tag in the schema: w:next.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NextParagraphStyle? NextParagraphStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NextParagraphStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Linked Style Reference.</para>
        /// <para>Represents the following element tag in the schema: w:link.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LinkedStyle? LinkedStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LinkedStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Automatically Merge User Formatting Into Style Definition.</para>
        /// <para>Represents the following element tag in the schema: w:autoRedefine.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoRedefine? AutoRedefine
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoRedefine>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hide Style From User Interface.</para>
        /// <para>Represents the following element tag in the schema: w:hidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleHidden? StyleHidden
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Optional User Interface Sorting Order.</para>
        /// <para>Represents the following element tag in the schema: w:uiPriority.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UIPriority? UIPriority
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UIPriority>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Hide Style From Main User Interface.</para>
        /// <para>Represents the following element tag in the schema: w:semiHidden.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SemiHidden? SemiHidden
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SemiHidden>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Semi-Hidden Property When Style Is Used.</para>
        /// <para>Represents the following element tag in the schema: w:unhideWhenUsed.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UnhideWhenUsed? UnhideWhenUsed
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UnhideWhenUsed>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Primary Style.</para>
        /// <para>Represents the following element tag in the schema: w:qFormat.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrimaryStyle? PrimaryStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrimaryStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Cannot Be Applied.</para>
        /// <para>Represents the following element tag in the schema: w:locked.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Locked? Locked
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Locked>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>E-Mail Message Text Style.</para>
        /// <para>Represents the following element tag in the schema: w:personal.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Personal? Personal
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Personal>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>E-Mail Message Composition Style.</para>
        /// <para>Represents the following element tag in the schema: w:personalCompose.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PersonalCompose? PersonalCompose
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PersonalCompose>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>E-Mail Message Reply Style.</para>
        /// <para>Represents the following element tag in the schema: w:personalReply.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PersonalReply? PersonalReply
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PersonalReply>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Revision Identifier for Style Definition.</para>
        /// <para>Represents the following element tag in the schema: w:rsid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Rsid? Rsid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Rsid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Paragraph Properties.</para>
        /// <para>Represents the following element tag in the schema: w:pPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties? StyleParagraphProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleParagraphProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Run Properties.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleRunProperties? StyleRunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleRunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Table Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tblPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleTableProperties? StyleTableProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleTableProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties? TableStyleConditionalFormattingTableRowProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableStyleConditionalFormattingTableRowProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Style Table Cell Properties.</para>
        /// <para>Represents the following element tag in the schema: w:tcPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleTableCellProperties? StyleTableCellProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleTableCellProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Style>(deep);
    }

    /// <summary>
    /// <para>Properties for a Single Font.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:font.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontCharSet" /> <c>&lt;w:charset></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontFamily" /> <c>&lt;w:family></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbedRegularFont" /> <c>&lt;w:embedRegular></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbedBoldFont" /> <c>&lt;w:embedBold></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbedItalicFont" /> <c>&lt;w:embedItalic></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EmbedBoldItalicFont" /> <c>&lt;w:embedBoldItalic></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FontSignature" /> <c>&lt;w:sig></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NotTrueType" /> <c>&lt;w:notTrueType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Panose1Number" /> <c>&lt;w:panose1></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Pitch" /> <c>&lt;w:pitch></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltName" /> <c>&lt;w:altName></c></description></item>
    /// </list>
    /// </remark>
    public partial class Font : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Font class.
        /// </summary>
        public Font() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Font class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Font(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Font class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Font(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Font class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Font(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:font");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontCharSet>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontFamily>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbedRegularFont>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbedBoldFont>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbedItalicFont>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EmbedBoldItalicFont>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FontSignature>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NotTrueType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Panose1Number>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Pitch>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltName>();
            builder.AddElement<Font>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Panose1Number), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontCharSet), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontFamily), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NotTrueType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Pitch), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FontSignature), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedRegularFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedBoldFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedItalicFont), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EmbedBoldItalicFont), 0, 1)
            };
        }

        /// <summary>
        /// <para>AltName.</para>
        /// <para>Represents the following element tag in the schema: w:altName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AltName? AltName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AltName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Panose1Number.</para>
        /// <para>Represents the following element tag in the schema: w:panose1.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Panose1Number? Panose1Number
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Panose1Number>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontCharSet.</para>
        /// <para>Represents the following element tag in the schema: w:charset.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontCharSet? FontCharSet
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontCharSet>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontFamily.</para>
        /// <para>Represents the following element tag in the schema: w:family.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontFamily? FontFamily
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontFamily>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NotTrueType.</para>
        /// <para>Represents the following element tag in the schema: w:notTrueType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NotTrueType? NotTrueType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NotTrueType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Pitch.</para>
        /// <para>Represents the following element tag in the schema: w:pitch.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Pitch? Pitch
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Pitch>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FontSignature.</para>
        /// <para>Represents the following element tag in the schema: w:sig.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FontSignature? FontSignature
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FontSignature>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedRegularFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedRegular.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EmbedRegularFont? EmbedRegularFont
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EmbedRegularFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedBoldFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedBold.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EmbedBoldFont? EmbedBoldFont
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EmbedBoldFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedItalicFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedItalic.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EmbedItalicFont? EmbedItalicFont
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EmbedItalicFont>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>EmbedBoldItalicFont.</para>
        /// <para>Represents the following element tag in the schema: w:embedBoldItalic.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EmbedBoldItalicFont? EmbedBoldItalicFont
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EmbedBoldItalicFont>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Font>(deep);
    }

    /// <summary>
    /// <para>Left Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marLeft.</para>
    /// </summary>
    public partial class LeftMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the LeftMarginDiv class.
        /// </summary>
        public LeftMarginDiv() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:marLeft");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LeftMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Right Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marRight.</para>
    /// </summary>
    public partial class RightMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the RightMarginDiv class.
        /// </summary>
        public RightMarginDiv() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:marRight");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RightMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Top Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marTop.</para>
    /// </summary>
    public partial class TopMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the TopMarginDiv class.
        /// </summary>
        public TopMarginDiv() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:marTop");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TopMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Bottom Margin for HTML div.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:marBottom.</para>
    /// </summary>
    public partial class BottomMarginDiv : SignedTwipsMeasureType
    {
        /// <summary>
        /// Initializes a new instance of the BottomMarginDiv class.
        /// </summary>
        public BottomMarginDiv() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:marBottom");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BottomMarginDiv>(deep);
    }

    /// <summary>
    /// <para>Defines the SignedTwipsMeasureType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class SignedTwipsMeasureType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SignedTwipsMeasureType class.
        /// </summary>
        protected SignedTwipsMeasureType() : base()
        {
        }

        /// <summary>
        /// <para>Positive or Negative Value in Twentieths of a Point</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<SignedTwipsMeasureType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<IntegerValue>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)"), InitialVersion = (FileFormatVersions.Office2010) });
                    });
                });
        }
    }

    /// <summary>
    /// <para>Set of Borders for HTML div.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divBdr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopBorder" /> <c>&lt;w:top></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftBorder" /> <c>&lt;w:left></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomBorder" /> <c>&lt;w:bottom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightBorder" /> <c>&lt;w:right></c></description></item>
    /// </list>
    /// </remark>
    public partial class DivBorder : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DivBorder class.
        /// </summary>
        public DivBorder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivBorder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivBorder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivBorder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivBorder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DivBorder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:divBdr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightBorder), 0, 1)
            };
        }

        /// <summary>
        /// <para>Top Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:top.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopBorder? TopBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:left.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftBorder? LeftBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:bottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomBorder? BottomBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomBorder>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Border for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:right.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightBorder? RightBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightBorder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DivBorder>(deep);
    }

    /// <summary>
    /// <para>Child div Elements Contained within Current div.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divsChild.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Div" /> <c>&lt;w:div></c></description></item>
    /// </list>
    /// </remark>
    public partial class DivsChild : DivsType
    {
        /// <summary>
        /// Initializes a new instance of the DivsChild class.
        /// </summary>
        public DivsChild() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsChild class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivsChild(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsChild class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DivsChild(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsChild class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DivsChild(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:divsChild");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Div), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DivsChild>(deep);
    }

    /// <summary>
    /// <para>Defines the Divs Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:divs.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Div" /> <c>&lt;w:div></c></description></item>
    /// </list>
    /// </remark>
    public partial class Divs : DivsType
    {
        /// <summary>
        /// Initializes a new instance of the Divs class.
        /// </summary>
        public Divs() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Divs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Divs(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Divs class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Divs(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Divs class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Divs(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:divs");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Div), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Divs>(deep);
    }

    /// <summary>
    /// <para>Defines the DivsType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Div" /> <c>&lt;w:div></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class DivsType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DivsType class.
        /// </summary>
        protected DivsType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DivsType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected DivsType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DivsType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected DivsType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Div>();
        }
    }

    /// <summary>
    /// <para>Information About Single HTML div Element.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:div.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DivBorder" /> <c>&lt;w:divBdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DivsChild" /> <c>&lt;w:divsChild></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BlockQuote" /> <c>&lt;w:blockQuote></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BodyDiv" /> <c>&lt;w:bodyDiv></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LeftMarginDiv" /> <c>&lt;w:marLeft></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RightMarginDiv" /> <c>&lt;w:marRight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopMarginDiv" /> <c>&lt;w:marTop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BottomMarginDiv" /> <c>&lt;w:marBottom></c></description></item>
    /// </list>
    /// </remark>
    public partial class Div : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Div class.
        /// </summary>
        public Div() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Div class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Div(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Div class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Div(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Div class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Div(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>div Data ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:div");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DivBorder>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DivsChild>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BlockQuote>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BodyDiv>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LeftMarginDiv>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RightMarginDiv>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopMarginDiv>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BottomMarginDiv>();
            builder.AddElement<Div>()
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (1L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-1L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BlockQuote), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BodyDiv), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LeftMarginDiv), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RightMarginDiv), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopMarginDiv), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BottomMarginDiv), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivBorder), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivsChild), 0, 0)
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Data for HTML blockquote Element.</para>
        /// <para>Represents the following element tag in the schema: w:blockQuote.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BlockQuote? BlockQuote
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BlockQuote>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data for HTML body Element.</para>
        /// <para>Represents the following element tag in the schema: w:bodyDiv.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BodyDiv? BodyDiv
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BodyDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Left Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marLeft.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LeftMarginDiv? LeftMarginDiv
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LeftMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Right Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marRight.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RightMarginDiv? RightMarginDiv
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RightMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Top Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marTop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopMarginDiv? TopMarginDiv
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Bottom Margin for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:marBottom.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BottomMarginDiv? BottomMarginDiv
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BottomMarginDiv>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Set of Borders for HTML div.</para>
        /// <para>Represents the following element tag in the schema: w:divBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DivBorder? DivBorder
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DivBorder>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Div>(deep);
    }

    /// <summary>
    /// <para>Comment Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:comment.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    /// </list>
    /// </remark>
    public partial class Comment : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Comment class.
        /// </summary>
        public Comment() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comment class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comment(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comment class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Comment(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comment class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Comment(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>initials</para>
        /// <para>Represents the following attribute in the schema: w:initials</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Initials
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:comment");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddElement<Comment>()
                .AddAttribute("w:initials", a => a.Initials, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (9L) });
                })
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                                }
                            },
                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                            {
                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                {
                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                                }
                                            },
                                            new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                        }
                                                    },
                                                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                        {
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comment>(deep);
    }

    /// <summary>
    /// <para>Footnote Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnote.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Footnote : FootnoteEndnoteType
    {
        /// <summary>
        /// Initializes a new instance of the Footnote class.
        /// </summary>
        public Footnote() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnote(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Footnote(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Footnote class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Footnote(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnote");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "/MainDocumentPart/FootnotesPart", builder.CreateQName("w:footnote"), "w:footnote", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Footnote>(deep);
    }

    /// <summary>
    /// <para>Endnote Content.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnote.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Endnote : FootnoteEndnoteType
    {
        /// <summary>
        /// Initializes a new instance of the Endnote class.
        /// </summary>
        public Endnote() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnote(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnote class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Endnote(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Endnote class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Endnote(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnote");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
            builder.AddConstraint(new ReferenceExistConstraint(builder.CreateQName("w:id"), "/MainDocumentPart/EndnotesPart", builder.CreateQName("w:endnote"), "w:endnote", builder.CreateQName("w:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Endnote>(deep);
    }

    /// <summary>
    /// <para>Defines the FootnoteEndnoteType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class FootnoteEndnoteType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class.
        /// </summary>
        protected FootnoteEndnoteType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FootnoteEndnoteType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected FootnoteEndnoteType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteEndnoteType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected FootnoteEndnoteType(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Footnote/Endnote Type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FootnoteEndnoteValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FootnoteEndnoteValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Footnote/Endnote ID</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public IntegerValue? Id
        {
            get => GetAttribute<IntegerValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
            builder.AddElement<FootnoteEndnoteType>()
                .AddAttribute("w:type", a => a.Type)
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (-2147483648L), MaxInclusive = (32767L) });
                });
        }
    }

    /// <summary>
    /// <para>Entry Insertion Behavior.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:behavior.</para>
    /// </summary>
    public partial class Behavior : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Behavior class.
        /// </summary>
        public Behavior() : base()
        {
        }

        /// <summary>
        /// <para>Insertion Behavior Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartBehaviorValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartBehaviorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:behavior");
            builder.AddElement<Behavior>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Behavior>(deep);
    }

    /// <summary>
    /// <para>Entry Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:type.</para>
    /// </summary>
    public partial class DocPartType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartType class.
        /// </summary>
        public DocPartType() : base()
        {
        }

        /// <summary>
        /// <para>Type Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:type");
            builder.AddElement<DocPartType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartType>(deep);
    }

    /// <summary>
    /// <para>Gallery Associated With Entry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:gallery.</para>
    /// </summary>
    public partial class Gallery : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Gallery class.
        /// </summary>
        public Gallery() : base()
        {
        }

        /// <summary>
        /// <para>Gallery Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartGalleryValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocPartGalleryValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:gallery");
            builder.AddElement<Gallery>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Gallery>(deep);
    }

    /// <summary>
    /// <para>Single Automatic Captioning Setting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoCaption.</para>
    /// </summary>
    public partial class AutoCaption : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the AutoCaption class.
        /// </summary>
        public AutoCaption() : base()
        {
        }

        /// <summary>
        /// <para>Identifier of Object to be Automatically Captioned</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Caption Used for Automatic Captioning</para>
        /// <para>Represents the following attribute in the schema: w:caption</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Caption
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoCaption");
            builder.AddElement<AutoCaption>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:caption", a => a.Caption, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                });
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:name"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoCaption>(deep);
    }

    /// <summary>
    /// <para>Single Caption Type Definition.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:caption.</para>
    /// </summary>
    public partial class Caption : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Caption class.
        /// </summary>
        public Caption() : base()
        {
        }

        /// <summary>
        /// <para>Caption Type Name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Automatic Caption Placement</para>
        /// <para>Represents the following attribute in the schema: w:pos</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CaptionPositionValues>? Position
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CaptionPositionValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Include Chapter Number in Field for Caption</para>
        /// <para>Represents the following attribute in the schema: w:chapNum</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? ChapterNumber
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Style for Chapter Headings</para>
        /// <para>Represents the following attribute in the schema: w:heading</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Heading
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Do Not Include Name In Caption</para>
        /// <para>Represents the following attribute in the schema: w:noLabel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? NoLabel
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Caption Numbering Format</para>
        /// <para>Represents the following attribute in the schema: w:numFmt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues>? NumberFormat
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.NumberFormatValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Chapter Number/Item Index Separator</para>
        /// <para>Represents the following attribute in the schema: w:sep</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ChapterSeparatorValues>? Separator
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ChapterSeparatorValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:caption");
            builder.AddElement<Caption>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:pos", a => a.Position)
                .AddAttribute("w:chapNum", a => a.ChapterNumber)
                .AddAttribute("w:heading", a => a.Heading)
                .AddAttribute("w:noLabel", a => a.NoLabel)
                .AddAttribute("w:numFmt", a => a.NumberFormat)
                .AddAttribute("w:sep", a => a.Separator);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Caption>(deep);
    }

    /// <summary>
    /// <para>Automatic Captioning Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:autoCaptions.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoCaption" /> <c>&lt;w:autoCaption></c></description></item>
    /// </list>
    /// </remark>
    public partial class AutoCaptions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the AutoCaptions class.
        /// </summary>
        public AutoCaptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AutoCaptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AutoCaptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AutoCaptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AutoCaptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AutoCaptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AutoCaptions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:autoCaptions");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoCaption>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoCaption), 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AutoCaptions>(deep);
    }

    /// <summary>
    /// <para>Document Background.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:background.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Background" /> <c>&lt;v:background></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocumentBackground : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentBackground class.
        /// </summary>
        public DocumentBackground() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentBackground(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentBackground class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentBackground(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentBackground class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocumentBackground(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>color</para>
        /// <para>Represents the following attribute in the schema: w:color</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Color
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>themeColor</para>
        /// <para>Represents the following attribute in the schema: w:themeColor</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>? ThemeColor
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ThemeColorValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>themeTint</para>
        /// <para>Represents the following attribute in the schema: w:themeTint</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeTint
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>themeShade</para>
        /// <para>Represents the following attribute in the schema: w:themeShade</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ThemeShade
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:background");
            builder.AddChild<DocumentFormat.OpenXml.Vml.Background>();
            builder.AddElement<DocumentBackground>()
                .AddAttribute("w:color", a => a.Color, aBuilder =>
                {
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.AutomaticColorValues>>(EnumValidator.Instance);
                        union.AddValidator<HexBinaryValue>(new StringValidator() { Length = (3L) });
                    });
                })
                .AddAttribute("w:themeColor", a => a.ThemeColor)
                .AddAttribute("w:themeTint", a => a.ThemeTint, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:themeShade", a => a.ThemeShade, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Background), 1, 1)
            };
        }

        /// <summary>
        /// <para>Background.</para>
        /// <para>Represents the following element tag in the schema: v:background.</para>
        /// </summary>
        /// <remark>
        /// xmlns:v = urn:schemas-microsoft-com:vml
        /// </remark>
        public DocumentFormat.OpenXml.Vml.Background? Background
        {
            get => GetElement<DocumentFormat.OpenXml.Vml.Background>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentBackground>(deep);
    }

    /// <summary>
    /// <para>List of Glossary Document Entries.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docParts.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPart" /> <c>&lt;w:docPart></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocParts : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocParts class.
        /// </summary>
        public DocParts() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocParts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocParts(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocParts class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocParts(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocParts class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocParts(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docParts");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPart), 0, 0, version: FileFormatVersions.Office2007),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPart), 1, 0, version: FileFormatVersions.Office2010)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocParts>(deep);
    }

    /// <summary>
    /// <para>Entry Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:name.</para>
    /// </summary>
    public partial class DocPartName : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartName class.
        /// </summary>
        public DocPartName() : base()
        {
        }

        /// <summary>
        /// <para>Name Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Built-In Entry</para>
        /// <para>Represents the following attribute in the schema: w:decorated</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Decorated
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:name");
            builder.AddElement<DocPartName>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:decorated", a => a.Decorated);
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:val"), @"[^,]*") { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartName>(deep);
    }

    /// <summary>
    /// <para>Entry Categorization.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:category.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Gallery" /> <c>&lt;w:gallery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Name" /> <c>&lt;w:name></c></description></item>
    /// </list>
    /// </remark>
    public partial class Category : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Category class.
        /// </summary>
        public Category() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Category class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Category(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Category class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Category(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Category class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Category(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:category");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Gallery>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Name>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Name), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Gallery), 1, 1)
            };
        }

        /// <summary>
        /// <para>Category Associated With Entry.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Name? Name
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Name>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Gallery Associated With Entry.</para>
        /// <para>Represents the following element tag in the schema: w:gallery.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Gallery? Gallery
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Gallery>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Category>(deep);
    }

    /// <summary>
    /// <para>Entry Types.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:types.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartType" /> <c>&lt;w:type></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocPartTypes : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartTypes class.
        /// </summary>
        public DocPartTypes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartTypes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartTypes(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartTypes class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartTypes(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartTypes class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPartTypes(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Entry Is Of All Types</para>
        /// <para>Represents the following attribute in the schema: w:all</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? All
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:types");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartType>();
            builder.AddElement<DocPartTypes>()
                .AddAttribute("w:all", a => a.All);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartType), 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartTypes>(deep);
    }

    /// <summary>
    /// <para>Entry Insertion Behaviors.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:behaviors.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Behavior" /> <c>&lt;w:behavior></c></description></item>
    /// </list>
    /// </remark>
    public partial class Behaviors : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Behaviors class.
        /// </summary>
        public Behaviors() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Behaviors class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Behaviors(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Behaviors class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Behaviors(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Behaviors class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Behaviors(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:behaviors");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Behavior>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Behavior), 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Behaviors>(deep);
    }

    /// <summary>
    /// <para>Entry ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:guid.</para>
    /// </summary>
    public partial class DocPartId : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartId class.
        /// </summary>
        public DocPartId() : base()
        {
        }

        /// <summary>
        /// <para>GUID Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:guid");
            builder.AddElement<DocPartId>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                });
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:val"), false, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartId>(deep);
    }

    /// <summary>
    /// <para>Glossary Document Entry Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Behaviors" /> <c>&lt;w:behaviors></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Category" /> <c>&lt;w:category></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartName" /> <c>&lt;w:name></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartTypes" /> <c>&lt;w:types></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartId" /> <c>&lt;w:guid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StyleId" /> <c>&lt;w:style></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Description" /> <c>&lt;w:description></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocPartProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPartProperties class.
        /// </summary>
        public DocPartProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPartProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Behaviors>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Category>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartTypes>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StyleId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Description>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StyleId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Category), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartTypes), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Behaviors), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Description), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartId), 0, 1)
            };
        }

        /// <summary>
        /// <para>Entry Name.</para>
        /// <para>Represents the following element tag in the schema: w:name.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartName? DocPartName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Associated Paragraph Style Name.</para>
        /// <para>Represents the following element tag in the schema: w:style.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StyleId? StyleId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry Categorization.</para>
        /// <para>Represents the following element tag in the schema: w:category.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Category? Category
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Category>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry Types.</para>
        /// <para>Represents the following element tag in the schema: w:types.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartTypes? DocPartTypes
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartTypes>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry Insertion Behaviors.</para>
        /// <para>Represents the following element tag in the schema: w:behaviors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Behaviors? Behaviors
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Behaviors>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Description for Entry.</para>
        /// <para>Represents the following element tag in the schema: w:description.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Description? Description
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Description>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Entry ID.</para>
        /// <para>Represents the following element tag in the schema: w:guid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartId? DocPartId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartId>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartProperties>(deep);
    }

    /// <summary>
    /// <para>Contents of Glossary Document Entry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartBody.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionProperties" /> <c>&lt;w:sectPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocPartBody : BodyType
    {
        /// <summary>
        /// Initializes a new instance of the DocPartBody class.
        /// </summary>
        public DocPartBody() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartBody(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartBody class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPartBody(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPartBody class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPartBody(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartBody");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionProperties), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPartBody>(deep);
    }

    /// <summary>
    /// <para>Defines the Body Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:body.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionProperties" /> <c>&lt;w:sectPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public partial class Body : BodyType
    {
        /// <summary>
        /// Initializes a new instance of the Body class.
        /// </summary>
        public Body() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Body class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Body(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Body class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Body(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Body class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Body(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:body");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AltChunk), 0, 0)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                        {
                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                            {
                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                {
                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                    {
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtBlock), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Paragraph), 0, 0),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Table), 0, 0)
                                            }
                                        },
                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                        {
                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                            {
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ProofError), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermStart), 0, 1),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PermEnd), 0, 1)
                                                    }
                                                },
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                    {
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                                                        {
                                                            new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                                                            {
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart), 1, 1),
                                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd), 1, 1)
                                                            }
                                                        },
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                },
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.InsertedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DeletedRun), 0, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveFromRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MoveToRun), 1, 1),
                                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContentPart), 0, 0, version: FileFormatVersions.Office2010),
                                                new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                                                {
                                                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                                                    {
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                                                        new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionProperties), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Body>(deep);
    }

    /// <summary>
    /// <para>Defines the BodyType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AltChunk" /> <c>&lt;w:altChunk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkStart" /> <c>&lt;w:bookmarkStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContentPart" /> <c>&lt;w:contentPart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock" /> <c>&lt;w:customXml></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd" /> <c>&lt;w:customXmlInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd" /> <c>&lt;w:customXmlDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd" /> <c>&lt;w:customXmlMoveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd" /> <c>&lt;w:customXmlMoveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd" /> <c>&lt;w14:customXmlConflictInsRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd" /> <c>&lt;w14:customXmlConflictDelRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd" /> <c>&lt;w:bookmarkEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart" /> <c>&lt;w:commentRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd" /> <c>&lt;w:commentRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd" /> <c>&lt;w:moveFromRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd" /> <c>&lt;w:moveToRangeEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart" /> <c>&lt;w:moveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart" /> <c>&lt;w:moveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Paragraph" /> <c>&lt;w:p></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermEnd" /> <c>&lt;w:permEnd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PermStart" /> <c>&lt;w:permStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ProofError" /> <c>&lt;w:proofErr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.InsertedRun" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DeletedRun" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveFromRun" /> <c>&lt;w:moveFrom></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MoveToRun" /> <c>&lt;w:moveTo></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtBlock" /> <c>&lt;w:sdt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionProperties" /> <c>&lt;w:sectPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Table" /> <c>&lt;w:tbl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart" /> <c>&lt;w:customXmlInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart" /> <c>&lt;w:customXmlDelRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart" /> <c>&lt;w:customXmlMoveFromRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart" /> <c>&lt;w:customXmlMoveToRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart" /> <c>&lt;w14:customXmlConflictInsRangeStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart" /> <c>&lt;w14:customXmlConflictDelRangeStart></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class BodyType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the BodyType class.
        /// </summary>
        protected BodyType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected BodyType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected BodyType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BodyType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected BodyType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AltChunk>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContentPart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CommentRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermEnd>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PermStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ProofError>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.InsertedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DeletedRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveFromRun>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MoveToRun>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtBlock>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SectionProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Table>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlInsRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlDelRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveFromRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CustomXmlMoveToRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart>();
        }
    }

    /// <summary>
    /// <para>Glossary Document Entry.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPart.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartBody" /> <c>&lt;w:docPartBody></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartProperties" /> <c>&lt;w:docPartPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocPart : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocPart class.
        /// </summary>
        public DocPart() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPart class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPart(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPart class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocPart(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocPart class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocPart(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPart");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartBody>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartProperties>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartProperties), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartBody), 0, 1)
            };
        }

        /// <summary>
        /// <para>Glossary Document Entry Properties.</para>
        /// <para>Represents the following element tag in the schema: w:docPartPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartProperties? DocPartProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Contents of Glossary Document Entry.</para>
        /// <para>Represents the following element tag in the schema: w:docPartBody.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartBody? DocPartBody
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartBody>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocPart>(deep);
    }

    /// <summary>
    /// <para>Defines the CompatibilitySetting Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:compatSetting.</para>
    /// </summary>
    public partial class CompatibilitySetting : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CompatibilitySetting class.
        /// </summary>
        public CompatibilitySetting() : base()
        {
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CompatSettingNameValues>? Name
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CompatSettingNameValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>uri</para>
        /// <para>Represents the following attribute in the schema: w:uri</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:compatSetting");
            builder.AddElement<CompatibilitySetting>()
                .AddAttribute("w:name", a => a.Name, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:uri", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.AddConstraint(new AttributeValueConditionToAnother(builder.CreateQName("w:val"), builder.CreateQName("w:name"), new string[] { "11", "12", "14", "15" }, new string[] { "compatibilityMode" }) { Version = FileFormatVersions.Office2010 });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CompatibilitySetting>(deep);
    }

    /// <summary>
    /// <para>Table Cell Left Margin Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:left.</para>
    /// </summary>
    public partial class TableCellLeftMargin : TableWidthDxaNilType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellLeftMargin class.
        /// </summary>
        public TableCellLeftMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:left");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellLeftMargin>(deep);
    }

    /// <summary>
    /// <para>Table Cell Right Margin Default.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:right.</para>
    /// </summary>
    public partial class TableCellRightMargin : TableWidthDxaNilType
    {
        /// <summary>
        /// Initializes a new instance of the TableCellRightMargin class.
        /// </summary>
        public TableCellRightMargin() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:right");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableCellRightMargin>(deep);
    }

    /// <summary>
    /// <para>Defines the TableWidthDxaNilType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class TableWidthDxaNilType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TableWidthDxaNilType class.
        /// </summary>
        protected TableWidthDxaNilType() : base()
        {
        }

        /// <summary>
        /// <para>w</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? Width
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>type</para>
        /// <para>Represents the following attribute in the schema: w:type</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthValues>? Type
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TableWidthValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<TableWidthDxaNilType>()
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:type", a => a.Type, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Table-Level Property Exceptions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblPrEx.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableBorders" /> <c>&lt;w:tblBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault" /> <c>&lt;w:tblCellMar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLayout" /> <c>&lt;w:tblLayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableLook" /> <c>&lt;w:tblLook></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptionsChange" /> <c>&lt;w:tblPrExChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableWidth" /> <c>&lt;w:tblW></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableIndentation" /> <c>&lt;w:tblInd></c></description></item>
    /// </list>
    /// </remark>
    public partial class TablePropertyExceptions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class.
        /// </summary>
        public TablePropertyExceptions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TablePropertyExceptions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TablePropertyExceptions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TablePropertyExceptions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblPrEx");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptionsChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableWidth), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableIndentation), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableBorders), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLayout), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableLook), 0, 1)
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptionsChange), 0, 1)
                }
            };
        }

        /// <summary>
        /// <para>Preferred Table Width Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblW.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableWidth? TableWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Alignment Exception.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableJustification? TableJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Spacing Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing? TableCellSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Indent from Leading Margin Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableIndentation? TableIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Borders Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableBorders? TableBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Shading Exception.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Layout Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLayout? TableLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Cell Margin Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblCellMar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault? TableCellMarginDefault
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableCellMarginDefault>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Table Style Conditional Formatting Settings Exception.</para>
        /// <para>Represents the following element tag in the schema: w:tblLook.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TableLook? TableLook
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TableLook>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Revision Information for Table-Level Property Exceptions.</para>
        /// <para>Represents the following element tag in the schema: w:tblPrExChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptionsChange? TablePropertyExceptionsChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TablePropertyExceptionsChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TablePropertyExceptions>(deep);
    }

    /// <summary>
    /// <para>Table Row Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle" /> <c>&lt;w:cnfStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridBefore" /> <c>&lt;w:gridBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridAfter" /> <c>&lt;w:gridAfter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRowHeight" /> <c>&lt;w:trHeight></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DivId" /> <c>&lt;w:divId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Hidden" /> <c>&lt;w:hidden></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CantSplit" /> <c>&lt;w:cantSplit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableHeader" /> <c>&lt;w:tblHeader></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableJustification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow" /> <c>&lt;w:wBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow" /> <c>&lt;w:wAfter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing" /> <c>&lt;w:tblCellSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Inserted" /> <c>&lt;w:ins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Deleted" /> <c>&lt;w:del></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion" /> <c>&lt;w14:conflictIns></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion" /> <c>&lt;w14:conflictDel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TableRowPropertiesChange" /> <c>&lt;w:trPrChange></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableRowProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRowProperties class.
        /// </summary>
        public TableRowProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRowProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:trPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridAfter>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRowHeight>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DivId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Hidden>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CantSplit>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Inserted>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Deleted>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion>();
            builder.AddChild<DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TableRowPropertiesChange>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 1, 0)
                {
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridBefore), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridAfter), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthBeforeTableRow), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidthAfterTableRow), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowHeight), 0, 1)
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Group, 0, 0)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Hidden), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CantSplit), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableHeader), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableCellSpacing), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableJustification), 0, 1)
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Inserted), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Deleted), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TableRowPropertiesChange), 0, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1, version: FileFormatVersions.Office2010)
                    {
                        new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictInsertion), 0, 1, version: FileFormatVersions.Office2010),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Office2010.Word.ConflictDeletion), 0, 1, version: FileFormatVersions.Office2010)
                        }
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRowProperties>(deep);
    }

    /// <summary>
    /// <para>Revision Information for Table Row Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:trPrChange.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PreviousTableRowProperties" /> <c>&lt;w:trPr></c></description></item>
    /// </list>
    /// </remark>
    public partial class TableRowPropertiesChange : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class.
        /// </summary>
        public TableRowPropertiesChange() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowPropertiesChange(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TableRowPropertiesChange(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TableRowPropertiesChange class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TableRowPropertiesChange(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>author</para>
        /// <para>Represents the following attribute in the schema: w:author</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Author
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>date</para>
        /// <para>Represents the following attribute in the schema: w:date</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? Date
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>dateUtc, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: w16du:dateUtc</para>
        /// </summary>
        /// <remark>
        /// xmlns:w16du=http://schemas.microsoft.com/office/word/2023/wordml/word16du
        /// </remark>
        public DateTimeValue? DateUtc
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Annotation Identifier</para>
        /// <para>Represents the following attribute in the schema: w:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:trPrChange");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PreviousTableRowProperties>();
            builder.AddElement<TableRowPropertiesChange>()
                .AddAttribute("w:author", a => a.Author, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (255L) });
                })
                .AddAttribute("w:date", a => a.Date)
                .AddAttribute("w16du:dateUtc", a => a.DateUtc, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Microsoft365));
                })
                .AddAttribute("w:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator<Int32Value>(new NumberValidator() { MinInclusive = (0L) });
                        union.AddValidator<Int32Value>(new NumberValidator() { MaxInclusive = (-2L) });
                    });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PreviousTableRowProperties), 1, 1)
                }
            };
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:id"), true, null));
        }

        /// <summary>
        /// <para>Previous Table Row Properties.</para>
        /// <para>Represents the following element tag in the schema: w:trPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PreviousTableRowProperties? PreviousTableRowProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PreviousTableRowProperties>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TableRowPropertiesChange>(deep);
    }

    /// <summary>
    /// <para>Paragraph Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pPr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle" /> <c>&lt;w:cnfStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OutlineLevel" /> <c>&lt;w:outlineLvl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FrameProperties" /> <c>&lt;w:framePr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Indentation" /> <c>&lt;w:ind></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Justification" /> <c>&lt;w:jc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DivId" /> <c>&lt;w:divId></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingProperties" /> <c>&lt;w:numPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepNext" /> <c>&lt;w:keepNext></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.KeepLines" /> <c>&lt;w:keepLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore" /> <c>&lt;w:pageBreakBefore></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WidowControl" /> <c>&lt;w:widowControl></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers" /> <c>&lt;w:suppressLineNumbers></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens" /> <c>&lt;w:suppressAutoHyphens></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Kinsoku" /> <c>&lt;w:kinsoku></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordWrap" /> <c>&lt;w:wordWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation" /> <c>&lt;w:overflowPunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation" /> <c>&lt;w:topLinePunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE" /> <c>&lt;w:autoSpaceDE></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN" /> <c>&lt;w:autoSpaceDN></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BiDi" /> <c>&lt;w:bidi></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent" /> <c>&lt;w:adjustRightInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SnapToGrid" /> <c>&lt;w:snapToGrid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing" /> <c>&lt;w:contextualSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MirrorIndents" /> <c>&lt;w:mirrorIndents></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap" /> <c>&lt;w:suppressOverlap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunProperties" /> <c>&lt;w:rPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders" /> <c>&lt;w:pBdr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange" /> <c>&lt;w:pPrChange></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SectionProperties" /> <c>&lt;w:sectPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Shading" /> <c>&lt;w:shd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines" /> <c>&lt;w:spacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId" /> <c>&lt;w:pStyle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Tabs" /> <c>&lt;w:tabs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextAlignment" /> <c>&lt;w:textAlignment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap" /> <c>&lt;w:textboxTightWrap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TextDirection" /> <c>&lt;w:textDirection></c></description></item>
    /// </list>
    /// </remark>
    public partial class ParagraphProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class.
        /// </summary>
        public ParagraphProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ParagraphProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ParagraphProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ParagraphProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pPr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DivId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SectionProperties>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId), 0, 1)
                            }
                        },
                        new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                        {
                            new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                            {
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepNext), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.KeepLines), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FrameProperties), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WidowControl), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingProperties), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Shading), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Tabs), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Kinsoku), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordWrap), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BiDi), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SnapToGrid), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Indentation), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MirrorIndents), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Justification), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextDirection), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextAlignment), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap), 0, 1),
                                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.OutlineLevel), 0, 1)
                            }
                        }
                    },
                    new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DivId), 0, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle), 0, 1)
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunProperties), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SectionProperties), 0, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange), 0, 1)
                        }
                    }
                }
            };
        }

        /// <summary>
        /// <para>ParagraphStyleId.</para>
        /// <para>Represents the following element tag in the schema: w:pStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId? ParagraphStyleId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphStyleId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepNext.</para>
        /// <para>Represents the following element tag in the schema: w:keepNext.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepNext? KeepNext
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepNext>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>KeepLines.</para>
        /// <para>Represents the following element tag in the schema: w:keepLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.KeepLines? KeepLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.KeepLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>PageBreakBefore.</para>
        /// <para>Represents the following element tag in the schema: w:pageBreakBefore.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore? PageBreakBefore
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PageBreakBefore>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>FrameProperties.</para>
        /// <para>Represents the following element tag in the schema: w:framePr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FrameProperties? FrameProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FrameProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WidowControl.</para>
        /// <para>Represents the following element tag in the schema: w:widowControl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WidowControl? WidowControl
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WidowControl>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>NumberingProperties.</para>
        /// <para>Represents the following element tag in the schema: w:numPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingProperties? NumberingProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressLineNumbers.</para>
        /// <para>Represents the following element tag in the schema: w:suppressLineNumbers.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers? SuppressLineNumbers
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressLineNumbers>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphBorders.</para>
        /// <para>Represents the following element tag in the schema: w:pBdr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders? ParagraphBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Shading.</para>
        /// <para>Represents the following element tag in the schema: w:shd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Shading? Shading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Shading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Tabs.</para>
        /// <para>Represents the following element tag in the schema: w:tabs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Tabs? Tabs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Tabs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressAutoHyphens.</para>
        /// <para>Represents the following element tag in the schema: w:suppressAutoHyphens.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens? SuppressAutoHyphens
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressAutoHyphens>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Kinsoku.</para>
        /// <para>Represents the following element tag in the schema: w:kinsoku.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Kinsoku? Kinsoku
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Kinsoku>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>WordWrap.</para>
        /// <para>Represents the following element tag in the schema: w:wordWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordWrap? WordWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OverflowPunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:overflowPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation? OverflowPunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OverflowPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TopLinePunctuation.</para>
        /// <para>Represents the following element tag in the schema: w:topLinePunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation? TopLinePunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TopLinePunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDE.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDE.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE? AutoSpaceDE
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDE>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AutoSpaceDN.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceDN.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN? AutoSpaceDN
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceDN>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>BiDi.</para>
        /// <para>Represents the following element tag in the schema: w:bidi.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BiDi? BiDi
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BiDi>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>AdjustRightIndent.</para>
        /// <para>Represents the following element tag in the schema: w:adjustRightInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent? AdjustRightIndent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AdjustRightIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SnapToGrid.</para>
        /// <para>Represents the following element tag in the schema: w:snapToGrid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SnapToGrid? SnapToGrid
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SnapToGrid>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SpacingBetweenLines.</para>
        /// <para>Represents the following element tag in the schema: w:spacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines? SpacingBetweenLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpacingBetweenLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:ind.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Indentation? Indentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Indentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ContextualSpacing.</para>
        /// <para>Represents the following element tag in the schema: w:contextualSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing? ContextualSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ContextualSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>MirrorIndents.</para>
        /// <para>Represents the following element tag in the schema: w:mirrorIndents.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MirrorIndents? MirrorIndents
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MirrorIndents>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>SuppressOverlap.</para>
        /// <para>Represents the following element tag in the schema: w:suppressOverlap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap? SuppressOverlap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressOverlap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Justification.</para>
        /// <para>Represents the following element tag in the schema: w:jc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Justification? Justification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Justification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextDirection.</para>
        /// <para>Represents the following element tag in the schema: w:textDirection.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextDirection? TextDirection
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextDirection>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextAlignment.</para>
        /// <para>Represents the following element tag in the schema: w:textAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextAlignment? TextAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>TextBoxTightWrap.</para>
        /// <para>Represents the following element tag in the schema: w:textboxTightWrap.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap? TextBoxTightWrap
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TextBoxTightWrap>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>OutlineLevel.</para>
        /// <para>Represents the following element tag in the schema: w:outlineLvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.OutlineLevel? OutlineLevel
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.OutlineLevel>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>DivId.</para>
        /// <para>Represents the following element tag in the schema: w:divId.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DivId? DivId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DivId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ConditionalFormatStyle.</para>
        /// <para>Represents the following element tag in the schema: w:cnfStyle.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle? ConditionalFormatStyle
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ConditionalFormatStyle>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Run Properties for the Paragraph Mark.</para>
        /// <para>Represents the following element tag in the schema: w:rPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunProperties? ParagraphMarkRunProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphMarkRunProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Section Properties.</para>
        /// <para>Represents the following element tag in the schema: w:sectPr.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SectionProperties? SectionProperties
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SectionProperties>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>ParagraphPropertiesChange.</para>
        /// <para>Represents the following element tag in the schema: w:pPrChange.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange? ParagraphPropertiesChange
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ParagraphProperties>(deep);
    }

    /// <summary>
    /// <para>Defines the Control Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:control.</para>
    /// </summary>
    public partial class Control : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Control class.
        /// </summary>
        public Control() : base()
        {
        }

        /// <summary>
        /// <para>Unique Name for Embedded Control</para>
        /// <para>Represents the following attribute in the schema: w:name</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Associated VML Data Reference</para>
        /// <para>Represents the following attribute in the schema: w:shapeid</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ShapeId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Embedded Control Properties Relationship Reference</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:control");
            builder.AddElement<Control>()
                .AddAttribute("w:name", a => a.Name)
                .AddAttribute("w:shapeid", a => a.ShapeId, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (254L) });
                })
                .AddAttribute("r:id", a => a.Id);
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control"));
            builder.AddConstraint(new UniqueAttributeValueConstraint(builder.CreateQName("w:name"), true, null));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Control>(deep);
    }

    /// <summary>
    /// <para>Previous Table Grid.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:tblGrid.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GridColumn" /> <c>&lt;w:gridCol></c></description></item>
    /// </list>
    /// </remark>
    public partial class PreviousTableGrid : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class.
        /// </summary>
        public PreviousTableGrid() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableGrid(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PreviousTableGrid(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PreviousTableGrid class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PreviousTableGrid(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:tblGrid");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GridColumn>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GridColumn), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PreviousTableGrid>(deep);
    }

    /// <summary>
    /// <para>Defines the ObjectEmbed Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:objectEmbed.</para>
    /// </summary>
    public partial class ObjectEmbed : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ObjectEmbed class.
        /// </summary>
        public ObjectEmbed() : base()
        {
        }

        /// <summary>
        /// <para>drawAspect</para>
        /// <para>Represents the following attribute in the schema: w:drawAspect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectDrawAspect>? drawAspect
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectDrawAspect>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>progId</para>
        /// <para>Represents the following attribute in the schema: w:progId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ProgId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>shapeId</para>
        /// <para>Represents the following attribute in the schema: w:shapeId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ShapeId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>fieldCodes</para>
        /// <para>Represents the following attribute in the schema: w:fieldCodes</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? FieldCodes
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:objectEmbed");
            builder.AddElement<ObjectEmbed>()
                .AddAttribute("w:drawAspect", a => a.drawAspect)
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:progId", a => a.ProgId)
                .AddAttribute("w:shapeId", a => a.ShapeId)
                .AddAttribute("w:fieldCodes", a => a.FieldCodes);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectEmbed>(deep);
    }

    /// <summary>
    /// <para>Defines the ObjectLink Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:objectLink.</para>
    /// </summary>
    public partial class ObjectLink : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ObjectLink class.
        /// </summary>
        public ObjectLink() : base()
        {
        }

        /// <summary>
        /// <para>updateMode</para>
        /// <para>Represents the following attribute in the schema: w:updateMode</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectUpdateMode>? UpdateMode
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectUpdateMode>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>lockedField</para>
        /// <para>Represents the following attribute in the schema: w:lockedField</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LockedField
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>drawAspect</para>
        /// <para>Represents the following attribute in the schema: w:drawAspect</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectDrawAspect>? drawAspect
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ObjectDrawAspect>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>progId</para>
        /// <para>Represents the following attribute in the schema: w:progId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ProgId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>shapeId</para>
        /// <para>Represents the following attribute in the schema: w:shapeId</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ShapeId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>fieldCodes</para>
        /// <para>Represents the following attribute in the schema: w:fieldCodes</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? FieldCodes
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:objectLink");
            builder.AddElement<ObjectLink>()
                .AddAttribute("w:updateMode", a => a.UpdateMode, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:lockedField", a => a.LockedField)
                .AddAttribute("w:drawAspect", a => a.drawAspect)
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:progId", a => a.ProgId)
                .AddAttribute("w:shapeId", a => a.ShapeId)
                .AddAttribute("w:fieldCodes", a => a.FieldCodes);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ObjectLink>(deep);
    }

    /// <summary>
    /// <para>Defines the Lock Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lock.</para>
    /// </summary>
    public partial class Lock : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Lock class.
        /// </summary>
        public Lock() : base()
        {
        }

        /// <summary>
        /// <para>Locking Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.LockingValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.LockingValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lock");
            builder.AddElement<Lock>()
                .AddAttribute("w:val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Lock>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtPlaceholder Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:placeholder.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartReference" /> <c>&lt;w:docPart></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtPlaceholder : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class.
        /// </summary>
        public SdtPlaceholder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtPlaceholder(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtPlaceholder(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtPlaceholder class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtPlaceholder(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:placeholder");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartReference>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartReference), 1, 1)
            };
        }

        /// <summary>
        /// <para>Document Part Reference.</para>
        /// <para>Represents the following element tag in the schema: w:docPart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartReference? DocPartReference
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartReference>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtPlaceholder>(deep);
    }

    /// <summary>
    /// <para>Defines the DataBinding Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dataBinding.</para>
    /// </summary>
    public partial class DataBinding : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DataBinding class.
        /// </summary>
        public DataBinding() : base()
        {
        }

        /// <summary>
        /// <para>XML Namespace Prefix Mappings</para>
        /// <para>Represents the following attribute in the schema: w:prefixMappings</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? PrefixMappings
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>XPath</para>
        /// <para>Represents the following attribute in the schema: w:xpath</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? XPath
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Custom XML Data Storage ID</para>
        /// <para>Represents the following attribute in the schema: w:storeItemID</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? StoreItemId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dataBinding");
            builder.AddElement<DataBinding>()
                .AddAttribute("w:prefixMappings", a => a.PrefixMappings)
                .AddAttribute("w:xpath", a => a.XPath, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:storeItemID", a => a.StoreItemId, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DataBinding>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentComboBox Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:comboBox.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ListItem" /> <c>&lt;w:listItem></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentComboBox : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class.
        /// </summary>
        public SdtContentComboBox() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentComboBox(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentComboBox(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentComboBox class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentComboBox(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Combo Box Last Saved Value</para>
        /// <para>Represents the following attribute in the schema: w:lastValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? LastValue
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:comboBox");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ListItem>();
            builder.AddElement<SdtContentComboBox>()
                .AddAttribute("w:lastValue", a => a.LastValue);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListItem), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentComboBox>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentDate Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:date.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Calendar" /> <c>&lt;w:calendar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LanguageId" /> <c>&lt;w:lid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SdtDateMappingType" /> <c>&lt;w:storeMappedDataAs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DateFormat" /> <c>&lt;w:dateFormat></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentDate : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDate class.
        /// </summary>
        public SdtContentDate() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDate class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDate(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDate class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDate(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDate class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDate(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Last Known Date in XML Schema DateTime Format</para>
        /// <para>Represents the following attribute in the schema: w:fullDate</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DateTimeValue? FullDate
        {
            get => GetAttribute<DateTimeValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:date");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Calendar>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LanguageId>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SdtDateMappingType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DateFormat>();
            builder.AddElement<SdtContentDate>()
                .AddAttribute("w:fullDate", a => a.FullDate);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DateFormat), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LanguageId), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SdtDateMappingType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Calendar), 0, 1)
            };
        }

        /// <summary>
        /// <para>Date Display Mask.</para>
        /// <para>Represents the following element tag in the schema: w:dateFormat.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DateFormat? DateFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DateFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Date Picker Language ID.</para>
        /// <para>Represents the following element tag in the schema: w:lid.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LanguageId? LanguageId
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LanguageId>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Custom XML Data Date Storage Format.</para>
        /// <para>Represents the following element tag in the schema: w:storeMappedDataAs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SdtDateMappingType? SdtDateMappingType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SdtDateMappingType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Date Picker Calendar Type.</para>
        /// <para>Represents the following element tag in the schema: w:calendar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Calendar? Calendar
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Calendar>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDate>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentDocPartObject Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartObj.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartUnique" /> <c>&lt;w:docPartUnique></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartGallery" /> <c>&lt;w:docPartGallery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartCategory" /> <c>&lt;w:docPartCategory></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentDocPartObject : SdtDocPartType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class.
        /// </summary>
        public SdtContentDocPartObject() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartObject(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartObject(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartObject class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDocPartObject(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartObj");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartGallery), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartCategory), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartUnique), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDocPartObject>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentDocPartList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docPartList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartUnique" /> <c>&lt;w:docPartUnique></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartGallery" /> <c>&lt;w:docPartGallery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartCategory" /> <c>&lt;w:docPartCategory></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentDocPartList : SdtDocPartType
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class.
        /// </summary>
        public SdtContentDocPartList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDocPartList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDocPartList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDocPartList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docPartList");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartGallery), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartCategory), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocPartUnique), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDocPartList>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtDocPartType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartUnique" /> <c>&lt;w:docPartUnique></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartGallery" /> <c>&lt;w:docPartGallery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocPartCategory" /> <c>&lt;w:docPartCategory></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class SdtDocPartType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class.
        /// </summary>
        protected SdtDocPartType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected SdtDocPartType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected SdtDocPartType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtDocPartType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected SdtDocPartType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartUnique>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartGallery>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocPartCategory>();
        }

        /// <summary>
        /// <para>Document Part Gallery Filter.</para>
        /// <para>Represents the following element tag in the schema: w:docPartGallery.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartGallery? DocPartGallery
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartGallery>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Document Part Category Filter.</para>
        /// <para>Represents the following element tag in the schema: w:docPartCategory.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartCategory? DocPartCategory
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartCategory>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Built-In Document Part.</para>
        /// <para>Represents the following element tag in the schema: w:docPartUnique.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DocPartUnique? DocPartUnique
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DocPartUnique>();
            set => SetElement(value);
        }
    }

    /// <summary>
    /// <para>Defines the SdtContentDropDownList Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:dropDownList.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ListItem" /> <c>&lt;w:listItem></c></description></item>
    /// </list>
    /// </remark>
    public partial class SdtContentDropDownList : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class.
        /// </summary>
        public SdtContentDropDownList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDropDownList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SdtContentDropDownList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SdtContentDropDownList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SdtContentDropDownList(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Drop-down List Last Saved Value</para>
        /// <para>Represents the following attribute in the schema: w:lastValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? LastValue
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:dropDownList");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ListItem>();
            builder.AddElement<SdtContentDropDownList>()
                .AddAttribute("w:lastValue", a => a.LastValue);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ListItem), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentDropDownList>(deep);
    }

    /// <summary>
    /// <para>Defines the SdtContentText Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:text.</para>
    /// </summary>
    public partial class SdtContentText : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SdtContentText class.
        /// </summary>
        public SdtContentText() : base()
        {
        }

        /// <summary>
        /// <para>Allow Soft Line Breaks</para>
        /// <para>Represents the following attribute in the schema: w:multiLine</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? MultiLine
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:text");
            builder.AddElement<SdtContentText>()
                .AddAttribute("w:multiLine", a => a.MultiLine);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SdtContentText>(deep);
    }

    /// <summary>
    /// <para>Write Protection.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:writeProtection.</para>
    /// </summary>
    public partial class WriteProtection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the WriteProtection class.
        /// </summary>
        public WriteProtection() : base()
        {
        }

        /// <summary>
        /// <para>Recommend Write Protection in User Interface</para>
        /// <para>Represents the following attribute in the schema: w:recommended</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Recommended
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Provider Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptProviderValues>? CryptographicProviderType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptProviderValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Algorithm Class</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmClass</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmClassValues>? CryptographicAlgorithmClass
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmClassValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Algorithm Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmValues>? CryptographicAlgorithmType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmSid</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? CryptographicAlgorithmSid
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Iterations to Run Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptSpinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? CryptographicSpinCount
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Provider</para>
        /// <para>Represents the following attribute in the schema: w:cryptProvider</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? CryptographicProvider
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Algorithm Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:algIdExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? AlgorithmIdExtensibility
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Algorithm Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:algIdExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? AlgorithmIdExtensibilitySource
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Provider Type Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? CryptographicProviderTypeExtensibility
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Provider Type Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? CryptographicProviderTypeExtSource
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Password Hash</para>
        /// <para>Represents the following attribute in the schema: w:hash</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? Hash
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Salt for Password Verifier</para>
        /// <para>Represents the following attribute in the schema: w:salt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? Salt
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>algorithmName, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:algorithmName</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? AlgorithmName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>hashValue, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:hashValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? HashValue
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>saltValue, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:saltValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? SaltValue
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>spinCount, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:spinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? SpinCount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:writeProtection");
            builder.AddElement<WriteProtection>()
                .AddAttribute("w:recommended", a => a.Recommended)
                .AddAttribute("w:cryptProviderType", a => a.CryptographicProviderType)
                .AddAttribute("w:cryptAlgorithmClass", a => a.CryptographicAlgorithmClass)
                .AddAttribute("w:cryptAlgorithmType", a => a.CryptographicAlgorithmType)
                .AddAttribute("w:cryptAlgorithmSid", a => a.CryptographicAlgorithmSid)
                .AddAttribute("w:cryptSpinCount", a => a.CryptographicSpinCount, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (5000000L) });
                })
                .AddAttribute("w:cryptProvider", a => a.CryptographicProvider)
                .AddAttribute("w:algIdExt", a => a.AlgorithmIdExtensibility, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:algIdExtSource", a => a.AlgorithmIdExtensibilitySource)
                .AddAttribute("w:cryptProviderTypeExt", a => a.CryptographicProviderTypeExtensibility, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:cryptProviderTypeExtSource", a => a.CryptographicProviderTypeExtSource)
                .AddAttribute("w:hash", a => a.Hash)
                .AddAttribute("w:salt", a => a.Salt)
                .AddAttribute("w:algorithmName", a => a.AlgorithmName, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:hashValue", a => a.HashValue, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:saltValue", a => a.SaltValue, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:spinCount", a => a.SpinCount, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WriteProtection>(deep);
    }

    /// <summary>
    /// <para>Document View Setting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:view.</para>
    /// </summary>
    public partial class View : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the View class.
        /// </summary>
        public View() : base()
        {
        }

        /// <summary>
        /// <para>Document View Setting  Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ViewValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ViewValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:view");
            builder.AddElement<View>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<View>(deep);
    }

    /// <summary>
    /// <para>Magnification Setting.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:zoom.</para>
    /// </summary>
    public partial class Zoom : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Zoom class.
        /// </summary>
        public Zoom() : base()
        {
        }

        /// <summary>
        /// <para>Zoom Type</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.PresetZoomValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.PresetZoomValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Zoom Percentage</para>
        /// <para>Represents the following attribute in the schema: w:percent</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Percent
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:zoom");
            builder.AddElement<Zoom>()
                .AddAttribute("w:val", a => a.Val)
                .AddAttribute("w:percent", a => a.Percent, aBuilder =>
                {
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?%"), Version = (FileFormatVersions.Office2010) });
                        union.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2010) });
                    });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?%"), InitialVersion = (FileFormatVersions.Office2013) });
                        union.AddValidator<Int32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2013) });
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Zoom>(deep);
    }

    /// <summary>
    /// <para>Grammar Checking Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:activeWritingStyle.</para>
    /// </summary>
    public partial class ActiveWritingStyle : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ActiveWritingStyle class.
        /// </summary>
        public ActiveWritingStyle() : base()
        {
        }

        /// <summary>
        /// <para>Writing Style Language</para>
        /// <para>Represents the following attribute in the schema: w:lang</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Language
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grammatical Engine ID</para>
        /// <para>Represents the following attribute in the schema: w:vendorID</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt16Value? VendorID
        {
            get => GetAttribute<UInt16Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grammatical Check Engine Version</para>
        /// <para>Represents the following attribute in the schema: w:dllVersion</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? DllVersion
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Natural Language Grammar Check</para>
        /// <para>Represents the following attribute in the schema: w:nlCheck</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? NaturalLanguageGrammarCheck
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Check Stylistic Rules With Grammar</para>
        /// <para>Represents the following attribute in the schema: w:checkStyle</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? CheckStyle
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Application Name</para>
        /// <para>Represents the following attribute in the schema: w:appName</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? ApplicationName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:activeWritingStyle");
            builder.AddElement<ActiveWritingStyle>()
                .AddAttribute("w:lang", a => a.Language, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                })
                .AddAttribute("w:vendorID", a => a.VendorID, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:dllVersion", a => a.DllVersion, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                })
                .AddAttribute("w:nlCheck", a => a.NaturalLanguageGrammarCheck)
                .AddAttribute("w:checkStyle", a => a.CheckStyle, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:appName", a => a.ApplicationName, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ActiveWritingStyle>(deep);
    }

    /// <summary>
    /// <para>Spelling and Grammatical Checking State.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:proofState.</para>
    /// </summary>
    public partial class ProofState : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ProofState class.
        /// </summary>
        public ProofState() : base()
        {
        }

        /// <summary>
        /// <para>Spell Checking State</para>
        /// <para>Represents the following attribute in the schema: w:spelling</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingStateValues>? Spelling
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingStateValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Grammatical Checking State</para>
        /// <para>Represents the following attribute in the schema: w:grammar</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingStateValues>? Grammar
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ProofingStateValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:proofState");
            builder.AddElement<ProofState>()
                .AddAttribute("w:spelling", a => a.Spelling)
                .AddAttribute("w:grammar", a => a.Grammar);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProofState>(deep);
    }

    /// <summary>
    /// <para>Suggested Filtering for List of Document Styles.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:stylePaneFormatFilter.</para>
    /// </summary>
    public partial class StylePaneFormatFilter : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StylePaneFormatFilter class.
        /// </summary>
        public StylePaneFormatFilter() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>allStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:allStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? AllStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>customStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:customStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? CustomStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>latentStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:latentStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? LatentStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>stylesInUse, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:stylesInUse</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? StylesInUse
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>headingStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:headingStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? HeadingStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>numberingStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:numberingStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? NumberingStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>tableStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:tableStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? TableStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>directFormattingOnRuns, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnRuns</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DirectFormattingOnRuns
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>directFormattingOnParagraphs, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnParagraphs</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DirectFormattingOnParagraphs
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>directFormattingOnNumbering, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnNumbering</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DirectFormattingOnNumbering
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>directFormattingOnTables, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:directFormattingOnTables</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DirectFormattingOnTables
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>clearFormatting, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:clearFormatting</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? ClearFormatting
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>top3HeadingStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:top3HeadingStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Top3HeadingStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>visibleStyles, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:visibleStyles</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? VisibleStyles
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>alternateStyleNames, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:alternateStyleNames</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? AlternateStyleNames
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:stylePaneFormatFilter");
            builder.AddElement<StylePaneFormatFilter>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("w:allStyles", a => a.AllStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:customStyles", a => a.CustomStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:latentStyles", a => a.LatentStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:stylesInUse", a => a.StylesInUse, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:headingStyles", a => a.HeadingStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:numberingStyles", a => a.NumberingStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:tableStyles", a => a.TableStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:directFormattingOnRuns", a => a.DirectFormattingOnRuns, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:directFormattingOnParagraphs", a => a.DirectFormattingOnParagraphs, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:directFormattingOnNumbering", a => a.DirectFormattingOnNumbering, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:directFormattingOnTables", a => a.DirectFormattingOnTables, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:clearFormatting", a => a.ClearFormatting, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:top3HeadingStyles", a => a.Top3HeadingStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:visibleStyles", a => a.VisibleStyles, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:alternateStyleNames", a => a.AlternateStyleNames, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
            builder.AddConstraint(new AttributeValueSetConstraint(builder.CreateQName("w:val"), false, new string[] { "0x0040", "0x0080", "0x0800" }) { Application = ApplicationType.Word });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StylePaneFormatFilter>(deep);
    }

    /// <summary>
    /// <para>Suggested Sorting for List of Document Styles.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:stylePaneSortMethod.</para>
    /// </summary>
    public partial class StylePaneSortMethods : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the StylePaneSortMethods class.
        /// </summary>
        public StylePaneSortMethods() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:stylePaneSortMethod");
            builder.AddElement<StylePaneSortMethods>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator<HexBinaryValue>(new StringValidator() { Length = (2L), Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddValidator<EnumValue<DocumentFormat.OpenXml.Wordprocessing.StylePaneSortMethodsValues>>(new EnumValidator() { InitialVersion = (FileFormatVersions.Office2010) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StylePaneSortMethods>(deep);
    }

    /// <summary>
    /// <para>Document Classification.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:documentType.</para>
    /// </summary>
    public partial class DocumentType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentType class.
        /// </summary>
        public DocumentType() : base()
        {
        }

        /// <summary>
        /// <para>Document Classification Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentTypeValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentTypeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:documentType");
            builder.AddElement<DocumentType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentType>(deep);
    }

    /// <summary>
    /// <para>Mail Merge Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:mailMerge.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ActiveRecord" /> <c>&lt;w:activeRecord></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CheckErrors" /> <c>&lt;w:checkErrors></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DataType" /> <c>&lt;w:dataType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Destination" /> <c>&lt;w:destination></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MainDocumentType" /> <c>&lt;w:mainDocumentType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DataSourceObject" /> <c>&lt;w:odso></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LinkToQuery" /> <c>&lt;w:linkToQuery></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressBlankLines" /> <c>&lt;w:doNotSuppressBlankLines></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MailAsAttachment" /> <c>&lt;w:mailAsAttachment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ViewMergedData" /> <c>&lt;w:viewMergedData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DataSourceReference" /> <c>&lt;w:dataSource></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.HeaderSource" /> <c>&lt;w:headerSource></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConnectString" /> <c>&lt;w:connectString></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Query" /> <c>&lt;w:query></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AddressFieldName" /> <c>&lt;w:addressFieldName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MailSubject" /> <c>&lt;w:mailSubject></c></description></item>
    /// </list>
    /// </remark>
    public partial class MailMerge : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the MailMerge class.
        /// </summary>
        public MailMerge() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMerge class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MailMerge(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMerge class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MailMerge(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMerge class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MailMerge(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:mailMerge");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ActiveRecord>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CheckErrors>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DataType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Destination>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MainDocumentType>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DataSourceObject>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LinkToQuery>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressBlankLines>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MailAsAttachment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ViewMergedData>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DataSourceReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.HeaderSource>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConnectString>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Query>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AddressFieldName>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MailSubject>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MainDocumentType), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LinkToQuery), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataType), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConnectString), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Query), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataSourceReference), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.HeaderSource), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressBlankLines), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Destination), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AddressFieldName), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailSubject), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MailAsAttachment), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ViewMergedData), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ActiveRecord), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CheckErrors), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DataSourceObject), 0, 1)
            };
        }

        /// <summary>
        /// <para>Source Document Type.</para>
        /// <para>Represents the following element tag in the schema: w:mainDocumentType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MainDocumentType? MainDocumentType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MainDocumentType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Query Contains Link to External Query File.</para>
        /// <para>Represents the following element tag in the schema: w:linkToQuery.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LinkToQuery? LinkToQuery
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LinkToQuery>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Type.</para>
        /// <para>Represents the following element tag in the schema: w:dataType.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DataType? DataType
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DataType>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source Connection String.</para>
        /// <para>Represents the following element tag in the schema: w:connectString.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ConnectString? ConnectString
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ConnectString>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Query For Data Source Records To Merge.</para>
        /// <para>Represents the following element tag in the schema: w:query.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Query? Query
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Query>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Data Source File Path.</para>
        /// <para>Represents the following element tag in the schema: w:dataSource.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DataSourceReference? DataSourceReference
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DataSourceReference>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Header Definition File Path.</para>
        /// <para>Represents the following element tag in the schema: w:headerSource.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.HeaderSource? HeaderSource
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.HeaderSource>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Remove Blank Lines from Merged Documents.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSuppressBlankLines.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressBlankLines? DoNotSuppressBlankLines
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressBlankLines>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merged Document Destination.</para>
        /// <para>Represents the following element tag in the schema: w:destination.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Destination? Destination
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Destination>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Column Containing E-mail Address.</para>
        /// <para>Represents the following element tag in the schema: w:addressFieldName.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AddressFieldName? AddressFieldName
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AddressFieldName>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merged E-mail or Fax Subject Line.</para>
        /// <para>Represents the following element tag in the schema: w:mailSubject.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MailSubject? MailSubject
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MailSubject>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Merged Document To E-Mail Attachment.</para>
        /// <para>Represents the following element tag in the schema: w:mailAsAttachment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MailAsAttachment? MailAsAttachment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MailAsAttachment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>View Merged Data Within Document.</para>
        /// <para>Represents the following element tag in the schema: w:viewMergedData.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ViewMergedData? ViewMergedData
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ViewMergedData>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Record Currently Displayed In Merged Document.</para>
        /// <para>Represents the following element tag in the schema: w:activeRecord.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ActiveRecord? ActiveRecord
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ActiveRecord>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Mail Merge Error Reporting Setting.</para>
        /// <para>Represents the following element tag in the schema: w:checkErrors.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CheckErrors? CheckErrors
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CheckErrors>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Office Data Source Object Settings.</para>
        /// <para>Represents the following element tag in the schema: w:odso.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DataSourceObject? DataSourceObject
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DataSourceObject>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMerge>(deep);
    }

    /// <summary>
    /// <para>Visibility of Annotation Types.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:revisionView.</para>
    /// </summary>
    public partial class RevisionView : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the RevisionView class.
        /// </summary>
        public RevisionView() : base()
        {
        }

        /// <summary>
        /// <para>Display Visual Indicator Of Markup Area</para>
        /// <para>Represents the following attribute in the schema: w:markup</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Markup
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Display Comments</para>
        /// <para>Represents the following attribute in the schema: w:comments</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Comments
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Display Content Revisions</para>
        /// <para>Represents the following attribute in the schema: w:insDel</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? DisplayRevision
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Display Formatting Revisions</para>
        /// <para>Represents the following attribute in the schema: w:formatting</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Formatting
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Display Ink Annotations</para>
        /// <para>Represents the following attribute in the schema: w:inkAnnotations</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? InkAnnotations
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:revisionView");
            builder.AddElement<RevisionView>()
                .AddAttribute("w:markup", a => a.Markup)
                .AddAttribute("w:comments", a => a.Comments)
                .AddAttribute("w:insDel", a => a.DisplayRevision)
                .AddAttribute("w:formatting", a => a.Formatting)
                .AddAttribute("w:inkAnnotations", a => a.InkAnnotations);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RevisionView>(deep);
    }

    /// <summary>
    /// <para>Document Editing Restrictions.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:documentProtection.</para>
    /// </summary>
    public partial class DocumentProtection : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentProtection class.
        /// </summary>
        public DocumentProtection() : base()
        {
        }

        /// <summary>
        /// <para>Document Editing Restrictions</para>
        /// <para>Represents the following attribute in the schema: w:edit</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentProtectionValues>? Edit
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.DocumentProtectionValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Only Allow Formatting With Unlocked Styles</para>
        /// <para>Represents the following attribute in the schema: w:formatting</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Formatting
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Enforce Document Protection Settings</para>
        /// <para>Represents the following attribute in the schema: w:enforcement</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Enforcement
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Provider Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptProviderValues>? CryptographicProviderType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptProviderValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Algorithm Class</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmClass</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmClassValues>? CryptographicAlgorithmClass
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmClassValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Algorithm Type</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmType</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmValues>? CryptographicAlgorithmType
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CryptAlgorithmValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptAlgorithmSid</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? CryptographicAlgorithmSid
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Iterations to Run Hashing Algorithm</para>
        /// <para>Represents the following attribute in the schema: w:cryptSpinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? CryptographicSpinCount
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Provider</para>
        /// <para>Represents the following attribute in the schema: w:cryptProvider</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? CryptographicProvider
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Algorithm Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:algIdExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? AlgorithmIdExtensibility
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Algorithm Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:algIdExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? AlgorithmIdExtensibilitySource
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Cryptographic Provider Type Extensibility</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? CryptographicProviderTypeExtensibility
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Provider Type Extensibility Source</para>
        /// <para>Represents the following attribute in the schema: w:cryptProviderTypeExtSource</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? CryptographicProviderTypeExtSource
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Password Hash</para>
        /// <para>Represents the following attribute in the schema: w:hash</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? Hash
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Salt for Password Verifier</para>
        /// <para>Represents the following attribute in the schema: w:salt</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? Salt
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>algorithmName, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:algorithmName</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? AlgorithmName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>hashValue, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:hashValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? HashValue
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>saltValue, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:saltValue</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Base64BinaryValue? SaltValue
        {
            get => GetAttribute<Base64BinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>spinCount, this property is only available in Office 2010 and later.</para>
        /// <para>Represents the following attribute in the schema: w:spinCount</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? SpinCount
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:documentProtection");
            builder.AddElement<DocumentProtection>()
                .AddAttribute("w:edit", a => a.Edit)
                .AddAttribute("w:formatting", a => a.Formatting)
                .AddAttribute("w:enforcement", a => a.Enforcement)
                .AddAttribute("w:cryptProviderType", a => a.CryptographicProviderType)
                .AddAttribute("w:cryptAlgorithmClass", a => a.CryptographicAlgorithmClass)
                .AddAttribute("w:cryptAlgorithmType", a => a.CryptographicAlgorithmType)
                .AddAttribute("w:cryptAlgorithmSid", a => a.CryptographicAlgorithmSid)
                .AddAttribute("w:cryptSpinCount", a => a.CryptographicSpinCount, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (5000000L) });
                })
                .AddAttribute("w:cryptProvider", a => a.CryptographicProvider)
                .AddAttribute("w:algIdExt", a => a.AlgorithmIdExtensibility, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:algIdExtSource", a => a.AlgorithmIdExtensibilitySource)
                .AddAttribute("w:cryptProviderTypeExt", a => a.CryptographicProviderTypeExtensibility, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:cryptProviderTypeExtSource", a => a.CryptographicProviderTypeExtSource)
                .AddAttribute("w:hash", a => a.Hash)
                .AddAttribute("w:salt", a => a.Salt)
                .AddAttribute("w:algorithmName", a => a.AlgorithmName, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:hashValue", a => a.HashValue, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:saltValue", a => a.SaltValue, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                })
                .AddAttribute("w:spinCount", a => a.SpinCount, aBuilder =>
                {
                    aBuilder.AddValidator(new OfficeVersionValidator(FileFormatVersions.Office2010));
                });
            builder.AddConstraint(new AttributeValueSetConstraint(builder.CreateQName("w:cryptAlgorithmSid"), true, new string[] { "1", "2", "3", "4", "12", "13", "14" }));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentProtection>(deep);
    }

    /// <summary>
    /// <para>Distance Between Automatic Tab Stops.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:defaultTabStop.</para>
    /// </summary>
    public partial class DefaultTabStop : NonNegativeShortType
    {
        /// <summary>
        /// Initializes a new instance of the DefaultTabStop class.
        /// </summary>
        public DefaultTabStop() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:defaultTabStop");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DefaultTabStop>(deep);
    }

    /// <summary>
    /// <para>Number of Pages Per Booklet.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:bookFoldPrintingSheets.</para>
    /// </summary>
    public partial class BookFoldPrintingSheets : NonNegativeShortType
    {
        /// <summary>
        /// Initializes a new instance of the BookFoldPrintingSheets class.
        /// </summary>
        public BookFoldPrintingSheets() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:bookFoldPrintingSheets");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookFoldPrintingSheets>(deep);
    }

    /// <summary>
    /// <para>Defines the NonNegativeShortType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class NonNegativeShortType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NonNegativeShortType class.
        /// </summary>
        protected NonNegativeShortType() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int16Value? Val
        {
            get => GetAttribute<Int16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<NonNegativeShortType>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L) });
                });
        }
    }

    /// <summary>
    /// <para>Maximum Number of Consecutively Hyphenated Lines.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:consecutiveHyphenLimit.</para>
    /// </summary>
    public partial class ConsecutiveHyphenLimit : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ConsecutiveHyphenLimit class.
        /// </summary>
        public ConsecutiveHyphenLimit() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt16Value? Val
        {
            get => GetAttribute<UInt16Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:consecutiveHyphenLimit");
            builder.AddElement<ConsecutiveHyphenLimit>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConsecutiveHyphenLimit>(deep);
    }

    /// <summary>
    /// <para>Percentage of Document to Use When Generating Summary.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:summaryLength.</para>
    /// </summary>
    public partial class SummaryLength : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SummaryLength class.
        /// </summary>
        public SummaryLength() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:summaryLength");
            builder.AddElement<SummaryLength>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (100L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SummaryLength>(deep);
    }

    /// <summary>
    /// <para>Distance between Horizontal Gridlines.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayHorizontalDrawingGridEvery.</para>
    /// </summary>
    public partial class DisplayHorizontalDrawingGrid : UnsignedInt7Type
    {
        /// <summary>
        /// Initializes a new instance of the DisplayHorizontalDrawingGrid class.
        /// </summary>
        public DisplayHorizontalDrawingGrid() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:displayHorizontalDrawingGridEvery");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayHorizontalDrawingGrid>(deep);
    }

    /// <summary>
    /// <para>Distance between Vertical Gridlines.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:displayVerticalDrawingGridEvery.</para>
    /// </summary>
    public partial class DisplayVerticalDrawingGrid : UnsignedInt7Type
    {
        /// <summary>
        /// Initializes a new instance of the DisplayVerticalDrawingGrid class.
        /// </summary>
        public DisplayVerticalDrawingGrid() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:displayVerticalDrawingGridEvery");
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DisplayVerticalDrawingGrid>(deep);
    }

    /// <summary>
    /// <para>Defines the UnsignedInt7Type Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class UnsignedInt7Type : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the UnsignedInt7Type class.
        /// </summary>
        protected UnsignedInt7Type() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? Val
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<UnsignedInt7Type>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new NumberValidator() { MinInclusive = (0L), MaxInclusive = (127L) });
                });
        }
    }

    /// <summary>
    /// <para>Character-Level Whitespace Compression.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:characterSpacingControl.</para>
    /// </summary>
    public partial class CharacterSpacingControl : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the CharacterSpacingControl class.
        /// </summary>
        public CharacterSpacingControl() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.CharacterSpacingValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:characterSpacingControl");
            builder.AddElement<CharacterSpacingControl>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterSpacingControl>(deep);
    }

    /// <summary>
    /// <para>Custom Set of Characters Which Cannot End a Line.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noLineBreaksAfter.</para>
    /// </summary>
    public partial class NoLineBreaksAfterKinsoku : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoLineBreaksAfterKinsoku class.
        /// </summary>
        public NoLineBreaksAfterKinsoku() : base()
        {
        }

        /// <summary>
        /// <para>lang</para>
        /// <para>Represents the following attribute in the schema: w:lang</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Language
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noLineBreaksAfter");
            builder.AddElement<NoLineBreaksAfterKinsoku>()
                .AddAttribute("w:lang", a => a.Language, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                })
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (50L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoLineBreaksAfterKinsoku>(deep);
    }

    /// <summary>
    /// <para>Custom Set Of Characters Which Cannot Begin A Line.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:noLineBreaksBefore.</para>
    /// </summary>
    public partial class NoLineBreaksBeforeKinsoku : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the NoLineBreaksBeforeKinsoku class.
        /// </summary>
        public NoLineBreaksBeforeKinsoku() : base()
        {
        }

        /// <summary>
        /// <para>lang</para>
        /// <para>Represents the following attribute in the schema: w:lang</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Language
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:noLineBreaksBefore");
            builder.AddElement<NoLineBreaksBeforeKinsoku>()
                .AddAttribute("w:lang", a => a.Language, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (84L) });
                })
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { MaxLength = (100L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NoLineBreaksBeforeKinsoku>(deep);
    }

    /// <summary>
    /// <para>Custom XSL Transform To Use When Saving As XML File.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:saveThroughXslt.</para>
    /// </summary>
    public partial class SaveThroughXslt : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the SaveThroughXslt class.
        /// </summary>
        public SaveThroughXslt() : base()
        {
        }

        /// <summary>
        /// <para>XSL Transformation Location</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Local Identifier for XSL Transform</para>
        /// <para>Represents the following attribute in the schema: w:solutionID</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? SolutionId
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:saveThroughXslt");
            builder.AddElement<SaveThroughXslt>()
                .AddAttribute("r:id", a => a.Id)
                .AddAttribute("w:solutionID", a => a.SolutionId);
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName(":id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/transform"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SaveThroughXslt>(deep);
    }

    /// <summary>
    /// <para>Default Properties for VML Objects in Header and Footer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:hdrShapeDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.ShapeDefaults" /> <c>&lt;o:shapedefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.ShapeLayout" /> <c>&lt;o:shapelayout></c></description></item>
    /// </list>
    /// </remark>
    public partial class HeaderShapeDefaults : ShapeDefaultsType
    {
        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class.
        /// </summary>
        public HeaderShapeDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HeaderShapeDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public HeaderShapeDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the HeaderShapeDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public HeaderShapeDefaults(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:hdrShapeDefaults");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeDefaults), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeLayout), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<HeaderShapeDefaults>(deep);
    }

    /// <summary>
    /// <para>Default Properties for VML Objects in Main Document.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:shapeDefaults.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.ShapeDefaults" /> <c>&lt;o:shapedefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.ShapeLayout" /> <c>&lt;o:shapelayout></c></description></item>
    /// </list>
    /// </remark>
    public partial class ShapeDefaults : ShapeDefaultsType
    {
        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class.
        /// </summary>
        public ShapeDefaults() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefaults(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ShapeDefaults(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaults class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ShapeDefaults(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:shapeDefaults");
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeDefaults), 1, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Office.ShapeLayout), 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShapeDefaults>(deep);
    }

    /// <summary>
    /// <para>Defines the ShapeDefaultsType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.ShapeDefaults" /> <c>&lt;o:shapedefaults></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Office.ShapeLayout" /> <c>&lt;o:shapelayout></c></description></item>
    /// </list>
    /// </remark>
    public abstract partial class ShapeDefaultsType : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class.
        /// </summary>
        protected ShapeDefaultsType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ShapeDefaultsType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected ShapeDefaultsType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShapeDefaultsType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected ShapeDefaultsType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.ShapeDefaults>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Office.ShapeLayout>();
        }
    }

    /// <summary>
    /// <para>Document-Wide Footnote Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:footnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingStart" /> <c>&lt;w:numStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteSpecialReference" /> <c>&lt;w:footnote></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnotePosition" /> <c>&lt;w:pos></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingFormat" /> <c>&lt;w:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingRestart" /> <c>&lt;w:numRestart></c></description></item>
    /// </list>
    /// </remark>
    public partial class FootnoteDocumentWideProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class.
        /// </summary>
        public FootnoteDocumentWideProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteDocumentWideProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public FootnoteDocumentWideProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the FootnoteDocumentWideProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public FootnoteDocumentWideProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:footnotePr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteSpecialReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnotePosition>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnotePosition), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteSpecialReference), 0, 3)
                }
            };
        }

        /// <summary>
        /// <para>Footnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FootnotePosition? FootnotePosition
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FootnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingFormat? NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingStart? NumberingStart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingRestart? NumberingRestart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FootnoteDocumentWideProperties>(deep);
    }

    /// <summary>
    /// <para>Document-Wide Endnote Properties.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:endnotePr.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnotePosition" /> <c>&lt;w:pos></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingStart" /> <c>&lt;w:numStart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.EndnoteSpecialReference" /> <c>&lt;w:endnote></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingFormat" /> <c>&lt;w:numFmt></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NumberingRestart" /> <c>&lt;w:numRestart></c></description></item>
    /// </list>
    /// </remark>
    public partial class EndnoteDocumentWideProperties : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class.
        /// </summary>
        public EndnoteDocumentWideProperties() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteDocumentWideProperties(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public EndnoteDocumentWideProperties(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the EndnoteDocumentWideProperties class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public EndnoteDocumentWideProperties(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:endnotePr");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnotePosition>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.EndnoteSpecialReference>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnotePosition), 0, 1),
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingFormat), 0, 1),
                    new CompositeParticle.Builder(ParticleType.Group, 0, 1)
                    {
                        new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                        {
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingStart), 0, 1),
                            new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NumberingRestart), 0, 1)
                        }
                    }
                },
                new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
                {
                    new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.EndnoteSpecialReference), 0, 3)
                }
            };
        }

        /// <summary>
        /// <para>Endnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:pos.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.EndnotePosition? EndnotePosition
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.EndnotePosition>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Endnote Numbering Format.</para>
        /// <para>Represents the following element tag in the schema: w:numFmt.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingFormat? NumberingFormat
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingFormat>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Starting Value.</para>
        /// <para>Represents the following element tag in the schema: w:numStart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingStart? NumberingStart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingStart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Footnote and Endnote Numbering Restart Location.</para>
        /// <para>Represents the following element tag in the schema: w:numRestart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NumberingRestart? NumberingRestart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NumberingRestart>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EndnoteDocumentWideProperties>(deep);
    }

    /// <summary>
    /// <para>Compatibility Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:compat.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CompatibilitySetting" /> <c>&lt;w:compatSetting></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseSingleBorderForContiguousCells" /> <c>&lt;w:useSingleBorderforContiguousCells></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordPerfectJustification" /> <c>&lt;w:wpJustification></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoTabHangIndent" /> <c>&lt;w:noTabHangInd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoLeading" /> <c>&lt;w:noLeading></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpaceForUnderline" /> <c>&lt;w:spaceForUL></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoColumnBalance" /> <c>&lt;w:noColumnBalance></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.BalanceSingleByteDoubleByteWidth" /> <c>&lt;w:balanceSingleByteDoubleByteWidth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoExtraLineSpacing" /> <c>&lt;w:noExtraLineSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotLeaveBackslashAlone" /> <c>&lt;w:doNotLeaveBackslashAlone></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UnderlineTrailingSpaces" /> <c>&lt;w:ulTrailSpace></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotExpandShiftReturn" /> <c>&lt;w:doNotExpandShiftReturn></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SpacingInWholePoints" /> <c>&lt;w:spacingInWholePoints></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LineWrapLikeWord6" /> <c>&lt;w:lineWrapLikeWord6></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrintBodyTextBeforeHeader" /> <c>&lt;w:printBodyTextBeforeHeader></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.PrintColorBlackWhite" /> <c>&lt;w:printColBlack></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WordPerfectSpaceWidth" /> <c>&lt;w:wpSpaceWidth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ShowBreaksInFrames" /> <c>&lt;w:showBreaksInFrames></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SubFontBySize" /> <c>&lt;w:subFontBySize></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressBottomSpacing" /> <c>&lt;w:suppressBottomSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacing" /> <c>&lt;w:suppressTopSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingAtTopOfPage" /> <c>&lt;w:suppressSpacingAtTopOfPage></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacingWordPerfect" /> <c>&lt;w:suppressTopSpacingWP></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingBeforeAfterPageBreak" /> <c>&lt;w:suppressSpBfAfterPgBrk></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SwapBordersFacingPages" /> <c>&lt;w:swapBordersFacingPages></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ConvertMailMergeEscape" /> <c>&lt;w:convMailMergeEsc></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.TruncateFontHeightsLikeWordPerfect" /> <c>&lt;w:truncateFontHeightsLikeWP6></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.MacWordSmallCaps" /> <c>&lt;w:mwSmallCaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UsePrinterMetrics" /> <c>&lt;w:usePrinterMetrics></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressParagraphBorders" /> <c>&lt;w:doNotSuppressParagraphBorders></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.WrapTrailSpaces" /> <c>&lt;w:wrapTrailSpaces></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.FootnoteLayoutLikeWord8" /> <c>&lt;w:footnoteLayoutLikeWW8></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ShapeLayoutLikeWord8" /> <c>&lt;w:shapeLayoutLikeWW8></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AlignTablesRowByRow" /> <c>&lt;w:alignTablesRowByRow></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ForgetLastTabAlignment" /> <c>&lt;w:forgetLastTabAlignment></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AdjustLineHeightInTable" /> <c>&lt;w:adjustLineHeightInTable></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoSpaceLikeWord95" /> <c>&lt;w:autoSpaceLikeWord95></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.NoSpaceRaiseLower" /> <c>&lt;w:noSpaceRaiseLower></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotUseHTMLParagraphAutoSpacing" /> <c>&lt;w:doNotUseHTMLParagraphAutoSpacing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LayoutRawTableWidth" /> <c>&lt;w:layoutRawTableWidth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.LayoutTableRowsApart" /> <c>&lt;w:layoutTableRowsApart></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules" /> <c>&lt;w:useWord97LineBreakRules></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotBreakWrappedTables" /> <c>&lt;w:doNotBreakWrappedTables></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotSnapToGridInCell" /> <c>&lt;w:doNotSnapToGridInCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SelectFieldWithFirstOrLastChar" /> <c>&lt;w:selectFldWithFirstOrLastChar></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.ApplyBreakingRules" /> <c>&lt;w:applyBreakingRules></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotWrapTextWithPunctuation" /> <c>&lt;w:doNotWrapTextWithPunct></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotUseEastAsianBreakRules" /> <c>&lt;w:doNotUseEastAsianBreakRules></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseWord2002TableStyleRules" /> <c>&lt;w:useWord2002TableStyleRules></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.GrowAutofit" /> <c>&lt;w:growAutofit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseFarEastLayout" /> <c>&lt;w:useFELayout></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseNormalStyleForList" /> <c>&lt;w:useNormalStyleForList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotUseIndentAsNumberingTabStop" /> <c>&lt;w:doNotUseIndentAsNumberingTabStop></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseAltKinsokuLineBreakRules" /> <c>&lt;w:useAltKinsokuLineBreakRules></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AllowSpaceOfSameStyleInTable" /> <c>&lt;w:allowSpaceOfSameStyleInTable></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressIndentation" /> <c>&lt;w:doNotSuppressIndentation></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotAutofitConstrainedTables" /> <c>&lt;w:doNotAutofitConstrainedTables></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutofitToFirstFixedWidthCell" /> <c>&lt;w:autofitToFirstFixedWidthCell></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UnderlineTabInNumberingList" /> <c>&lt;w:underlineTabInNumList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DisplayHangulFixedWidth" /> <c>&lt;w:displayHangulFixedWidth></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.SplitPageBreakAndParagraphMark" /> <c>&lt;w:splitPgBreakAndParaMark></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignCellWithShape" /> <c>&lt;w:doNotVertAlignCellWithSp></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotBreakConstrainedForcedTable" /> <c>&lt;w:doNotBreakConstrainedForcedTable></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignInTextBox" /> <c>&lt;w:doNotVertAlignInTxbx></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.UseAnsiKerningPairs" /> <c>&lt;w:useAnsiKerningPairs></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.CachedColumnBalance" /> <c>&lt;w:cachedColBalance></c></description></item>
    /// </list>
    /// </remark>
    public partial class Compatibility : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Compatibility class.
        /// </summary>
        public Compatibility() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compatibility class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compatibility(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compatibility class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compatibility(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compatibility class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Compatibility(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:compat");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CompatibilitySetting>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseSingleBorderForContiguousCells>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordPerfectJustification>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoTabHangIndent>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoLeading>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpaceForUnderline>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoColumnBalance>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.BalanceSingleByteDoubleByteWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoExtraLineSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotLeaveBackslashAlone>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UnderlineTrailingSpaces>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotExpandShiftReturn>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SpacingInWholePoints>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LineWrapLikeWord6>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrintBodyTextBeforeHeader>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.PrintColorBlackWhite>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WordPerfectSpaceWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ShowBreaksInFrames>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SubFontBySize>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressBottomSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingAtTopOfPage>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacingWordPerfect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingBeforeAfterPageBreak>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SwapBordersFacingPages>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ConvertMailMergeEscape>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.TruncateFontHeightsLikeWordPerfect>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.MacWordSmallCaps>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UsePrinterMetrics>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressParagraphBorders>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.WrapTrailSpaces>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.FootnoteLayoutLikeWord8>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ShapeLayoutLikeWord8>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AlignTablesRowByRow>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ForgetLastTabAlignment>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AdjustLineHeightInTable>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceLikeWord95>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.NoSpaceRaiseLower>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotUseHTMLParagraphAutoSpacing>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LayoutRawTableWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.LayoutTableRowsApart>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotBreakWrappedTables>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotSnapToGridInCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SelectFieldWithFirstOrLastChar>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.ApplyBreakingRules>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotWrapTextWithPunctuation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotUseEastAsianBreakRules>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseWord2002TableStyleRules>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.GrowAutofit>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseFarEastLayout>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseNormalStyleForList>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotUseIndentAsNumberingTabStop>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseAltKinsokuLineBreakRules>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AllowSpaceOfSameStyleInTable>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressIndentation>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotAutofitConstrainedTables>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutofitToFirstFixedWidthCell>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UnderlineTabInNumberingList>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DisplayHangulFixedWidth>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.SplitPageBreakAndParagraphMark>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignCellWithShape>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotBreakConstrainedForcedTable>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignInTextBox>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.UseAnsiKerningPairs>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.CachedColumnBalance>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseSingleBorderForContiguousCells), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordPerfectJustification), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoTabHangIndent), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoLeading), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpaceForUnderline), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoColumnBalance), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.BalanceSingleByteDoubleByteWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoExtraLineSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotLeaveBackslashAlone), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UnderlineTrailingSpaces), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotExpandShiftReturn), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SpacingInWholePoints), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LineWrapLikeWord6), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintBodyTextBeforeHeader), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.PrintColorBlackWhite), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WordPerfectSpaceWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShowBreaksInFrames), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SubFontBySize), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressBottomSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingAtTopOfPage), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacingWordPerfect), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingBeforeAfterPageBreak), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SwapBordersFacingPages), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ConvertMailMergeEscape), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.TruncateFontHeightsLikeWordPerfect), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.MacWordSmallCaps), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UsePrinterMetrics), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressParagraphBorders), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.WrapTrailSpaces), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.FootnoteLayoutLikeWord8), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ShapeLayoutLikeWord8), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AlignTablesRowByRow), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ForgetLastTabAlignment), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AdjustLineHeightInTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoSpaceLikeWord95), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.NoSpaceRaiseLower), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseHTMLParagraphAutoSpacing), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LayoutRawTableWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.LayoutTableRowsApart), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotBreakWrappedTables), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSnapToGridInCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SelectFieldWithFirstOrLastChar), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.ApplyBreakingRules), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotWrapTextWithPunctuation), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseEastAsianBreakRules), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseWord2002TableStyleRules), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.GrowAutofit), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseFarEastLayout), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseNormalStyleForList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotUseIndentAsNumberingTabStop), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseAltKinsokuLineBreakRules), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AllowSpaceOfSameStyleInTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressIndentation), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotAutofitConstrainedTables), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutofitToFirstFixedWidthCell), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UnderlineTabInNumberingList), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DisplayHangulFixedWidth), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.SplitPageBreakAndParagraphMark), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignCellWithShape), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotBreakConstrainedForcedTable), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignInTextBox), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.UseAnsiKerningPairs), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CachedColumnBalance), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.CompatibilitySetting), 0, 0)
            };
        }

        /// <summary>
        /// <para>Use Simplified Rules For Table Border Conflicts.</para>
        /// <para>Represents the following element tag in the schema: w:useSingleBorderforContiguousCells.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseSingleBorderForContiguousCells? UseSingleBorderForContiguousCells
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseSingleBorderForContiguousCells>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate WordPerfect 6.x Paragraph Justification.</para>
        /// <para>Represents the following element tag in the schema: w:wpJustification.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordPerfectJustification? WordPerfectJustification
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordPerfectJustification>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Create Custom Tab Stop for Hanging Indent.</para>
        /// <para>Represents the following element tag in the schema: w:noTabHangInd.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoTabHangIndent? NoTabHangIndent
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoTabHangIndent>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Add Leading Between Lines of Text.</para>
        /// <para>Represents the following element tag in the schema: w:noLeading.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoLeading? NoLeading
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoLeading>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Add Additional Space Below Baseline For Underlined East Asian Text.</para>
        /// <para>Represents the following element tag in the schema: w:spaceForUL.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpaceForUnderline? SpaceForUnderline
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpaceForUnderline>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Balance Text Columns within a Section.</para>
        /// <para>Represents the following element tag in the schema: w:noColumnBalance.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoColumnBalance? NoColumnBalance
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoColumnBalance>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Balance Single Byte and Double Byte Characters.</para>
        /// <para>Represents the following element tag in the schema: w:balanceSingleByteDoubleByteWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.BalanceSingleByteDoubleByteWidth? BalanceSingleByteDoubleByteWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.BalanceSingleByteDoubleByteWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Center Content on Lines With Exact Line Height.</para>
        /// <para>Represents the following element tag in the schema: w:noExtraLineSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoExtraLineSpacing? NoExtraLineSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoExtraLineSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Convert Backslash To Yen Sign When Entered.</para>
        /// <para>Represents the following element tag in the schema: w:doNotLeaveBackslashAlone.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotLeaveBackslashAlone? DoNotLeaveBackslashAlone
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotLeaveBackslashAlone>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline All Trailing Spaces.</para>
        /// <para>Represents the following element tag in the schema: w:ulTrailSpace.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UnderlineTrailingSpaces? UnderlineTrailingSpaces
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UnderlineTrailingSpaces>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Don't Justify Lines Ending in Soft Line Break.</para>
        /// <para>Represents the following element tag in the schema: w:doNotExpandShiftReturn.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotExpandShiftReturn? DoNotExpandShiftReturn
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotExpandShiftReturn>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Only Expand/Condense Text By Whole Points.</para>
        /// <para>Represents the following element tag in the schema: w:spacingInWholePoints.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SpacingInWholePoints? SpacingInWholePoints
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SpacingInWholePoints>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 6.0 Line Wrapping for East Asian Text.</para>
        /// <para>Represents the following element tag in the schema: w:lineWrapLikeWord6.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LineWrapLikeWord6? LineWrapLikeWord6
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LineWrapLikeWord6>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print Body Text before Header/Footer Contents.</para>
        /// <para>Represents the following element tag in the schema: w:printBodyTextBeforeHeader.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrintBodyTextBeforeHeader? PrintBodyTextBeforeHeader
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrintBodyTextBeforeHeader>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Print Colors as Black And White without Dithering.</para>
        /// <para>Represents the following element tag in the schema: w:printColBlack.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.PrintColorBlackWhite? PrintColorBlackWhite
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.PrintColorBlackWhite>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Space width.</para>
        /// <para>Represents the following element tag in the schema: w:wpSpaceWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WordPerfectSpaceWidth? WordPerfectSpaceWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WordPerfectSpaceWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Display Page/Column Breaks Present in Frames.</para>
        /// <para>Represents the following element tag in the schema: w:showBreaksInFrames.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ShowBreaksInFrames? ShowBreaksInFrames
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ShowBreaksInFrames>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Increase Priority Of Font Size During Font Substitution.</para>
        /// <para>Represents the following element tag in the schema: w:subFontBySize.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SubFontBySize? SubFontBySize
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SubFontBySize>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Exact Line Height for Last Line on Page.</para>
        /// <para>Represents the following element tag in the schema: w:suppressBottomSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressBottomSpacing? SuppressBottomSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressBottomSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Minimum and Exact Line Height for First Line on Page.</para>
        /// <para>Represents the following element tag in the schema: w:suppressTopSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacing? SuppressTopSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Minimum Line Height for First Line on Page.</para>
        /// <para>Represents the following element tag in the schema: w:suppressSpacingAtTopOfPage.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingAtTopOfPage? SuppressSpacingAtTopOfPage
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingAtTopOfPage>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate WordPerfect 5.x Line Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:suppressTopSpacingWP.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacingWordPerfect? SuppressTopSpacingWordPerfect
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressTopSpacingWordPerfect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Use Space Before On First Line After a Page Break.</para>
        /// <para>Represents the following element tag in the schema: w:suppressSpBfAfterPgBrk.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingBeforeAfterPageBreak? SuppressSpacingBeforeAfterPageBreak
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SuppressSpacingBeforeAfterPageBreak>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Swap Paragraph Borders on Odd Numbered Pages.</para>
        /// <para>Represents the following element tag in the schema: w:swapBordersFacingPages.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SwapBordersFacingPages? SwapBordersFacingPages
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SwapBordersFacingPages>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Treat Backslash Quotation Delimiter as Two Quotation Marks.</para>
        /// <para>Represents the following element tag in the schema: w:convMailMergeEsc.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ConvertMailMergeEscape? ConvertMailMergeEscape
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ConvertMailMergeEscape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate WordPerfect 6.x Font Height Calculation.</para>
        /// <para>Represents the following element tag in the schema: w:truncateFontHeightsLikeWP6.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.TruncateFontHeightsLikeWordPerfect? TruncateFontHeightsLikeWordPerfect
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.TruncateFontHeightsLikeWordPerfect>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 5.x for the Macintosh Small Caps Formatting.</para>
        /// <para>Represents the following element tag in the schema: w:mwSmallCaps.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.MacWordSmallCaps? MacWordSmallCaps
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.MacWordSmallCaps>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Printer Metrics To Display Documents.</para>
        /// <para>Represents the following element tag in the schema: w:usePrinterMetrics.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UsePrinterMetrics? UsePrinterMetrics
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UsePrinterMetrics>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Suppress Paragraph Borders Next To Frames.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSuppressParagraphBorders.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressParagraphBorders? DoNotSuppressParagraphBorders
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressParagraphBorders>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Line Wrap Trailing Spaces.</para>
        /// <para>Represents the following element tag in the schema: w:wrapTrailSpaces.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.WrapTrailSpaces? WrapTrailSpaces
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.WrapTrailSpaces>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 6.x/95/97 Footnote Placement.</para>
        /// <para>Represents the following element tag in the schema: w:footnoteLayoutLikeWW8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.FootnoteLayoutLikeWord8? FootnoteLayoutLikeWord8
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.FootnoteLayoutLikeWord8>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 97 Text Wrapping Around Floating Objects.</para>
        /// <para>Represents the following element tag in the schema: w:shapeLayoutLikeWW8.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ShapeLayoutLikeWord8? ShapeLayoutLikeWord8
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ShapeLayoutLikeWord8>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Align Table Rows Independently.</para>
        /// <para>Represents the following element tag in the schema: w:alignTablesRowByRow.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AlignTablesRowByRow? AlignTablesRowByRow
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AlignTablesRowByRow>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned.</para>
        /// <para>Represents the following element tag in the schema: w:forgetLastTabAlignment.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ForgetLastTabAlignment? ForgetLastTabAlignment
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ForgetLastTabAlignment>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Add Document Grid Line Pitch To Lines in Table Cells.</para>
        /// <para>Represents the following element tag in the schema: w:adjustLineHeightInTable.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AdjustLineHeightInTable? AdjustLineHeightInTable
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AdjustLineHeightInTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 95 Full-Width Character Spacing.</para>
        /// <para>Represents the following element tag in the schema: w:autoSpaceLikeWord95.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutoSpaceLikeWord95? AutoSpaceLikeWord95
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutoSpaceLikeWord95>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Increase Line Height for Raised/Lowered Text.</para>
        /// <para>Represents the following element tag in the schema: w:noSpaceRaiseLower.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.NoSpaceRaiseLower? NoSpaceRaiseLower
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.NoSpaceRaiseLower>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Fixed Paragraph Spacing for HTML Auto Setting.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseHTMLParagraphAutoSpacing.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotUseHTMLParagraphAutoSpacing? DoNotUseHTMLParagraphAutoSpacing
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotUseHTMLParagraphAutoSpacing>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Space Before Table When Deciding If Table Should Wrap Floating Object.</para>
        /// <para>Represents the following element tag in the schema: w:layoutRawTableWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LayoutRawTableWidth? LayoutRawTableWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LayoutRawTableWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Table Rows to Wrap Inline Objects Independently.</para>
        /// <para>Represents the following element tag in the schema: w:layoutTableRowsApart.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.LayoutTableRowsApart? LayoutTableRowsApart
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.LayoutTableRowsApart>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 97 East Asian Line Breaking.</para>
        /// <para>Represents the following element tag in the schema: w:useWord97LineBreakRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules? UseWord97LineBreakRules
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Allow Floating Tables To Break Across Pages.</para>
        /// <para>Represents the following element tag in the schema: w:doNotBreakWrappedTables.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotBreakWrappedTables? DoNotBreakWrappedTables
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotBreakWrappedTables>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Snap to Document Grid in Table Cells with Objects.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSnapToGridInCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotSnapToGridInCell? DoNotSnapToGridInCell
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotSnapToGridInCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Select Field When First or Last Character Is Selected.</para>
        /// <para>Represents the following element tag in the schema: w:selectFldWithFirstOrLastChar.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SelectFieldWithFirstOrLastChar? SelectFieldWithFirstOrLastChar
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SelectFieldWithFirstOrLastChar>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Legacy Ethiopic and Amharic Line Breaking Rules.</para>
        /// <para>Represents the following element tag in the schema: w:applyBreakingRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.ApplyBreakingRules? ApplyBreakingRules
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.ApplyBreakingRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Allow Hanging Punctuation With Character Grid.</para>
        /// <para>Represents the following element tag in the schema: w:doNotWrapTextWithPunct.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotWrapTextWithPunctuation? DoNotWrapTextWithPunctuation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotWrapTextWithPunctuation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Compress Compressible Characters When Using Document Grid.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseEastAsianBreakRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotUseEastAsianBreakRules? DoNotUseEastAsianBreakRules
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotUseEastAsianBreakRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Emulate Word 2002 Table Style Rules.</para>
        /// <para>Represents the following element tag in the schema: w:useWord2002TableStyleRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseWord2002TableStyleRules? UseWord2002TableStyleRules
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseWord2002TableStyleRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Tables to AutoFit Into Page Margins.</para>
        /// <para>Represents the following element tag in the schema: w:growAutofit.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.GrowAutofit? GrowAutofit
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.GrowAutofit>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Bypass East Asian/Complex Script Layout Code.</para>
        /// <para>Represents the following element tag in the schema: w:useFELayout.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseFarEastLayout? UseFarEastLayout
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseFarEastLayout>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text.</para>
        /// <para>Represents the following element tag in the schema: w:useNormalStyleForList.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseNormalStyleForList? UseNormalStyleForList
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseNormalStyleForList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Hanging Indent When Creating Tab Stop After Numbering.</para>
        /// <para>Represents the following element tag in the schema: w:doNotUseIndentAsNumberingTabStop.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotUseIndentAsNumberingTabStop? DoNotUseIndentAsNumberingTabStop
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotUseIndentAsNumberingTabStop>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Alternate Set of East Asian Line Breaking Rules.</para>
        /// <para>Represents the following element tag in the schema: w:useAltKinsokuLineBreakRules.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseAltKinsokuLineBreakRules? UseAltKinsokuLineBreakRules
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseAltKinsokuLineBreakRules>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Contextual Spacing of Paragraphs in Tables.</para>
        /// <para>Represents the following element tag in the schema: w:allowSpaceOfSameStyleInTable.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AllowSpaceOfSameStyleInTable? AllowSpaceOfSameStyleInTable
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AllowSpaceOfSameStyleInTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not Ignore Floating Objects When Calculating Paragraph Indentation.</para>
        /// <para>Represents the following element tag in the schema: w:doNotSuppressIndentation.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressIndentation? DoNotSuppressIndentation
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotSuppressIndentation>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Do Not AutoFit Tables To Fit Next To Wrapped Objects.</para>
        /// <para>Represents the following element tag in the schema: w:doNotAutofitConstrainedTables.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotAutofitConstrainedTables? DoNotAutofitConstrainedTables
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotAutofitConstrainedTables>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Allow Table Columns To Exceed Preferred Widths of Constituent Cells.</para>
        /// <para>Represents the following element tag in the schema: w:autofitToFirstFixedWidthCell.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.AutofitToFirstFixedWidthCell? AutofitToFirstFixedWidthCell
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.AutofitToFirstFixedWidthCell>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Underline Following Character Following Numbering.</para>
        /// <para>Represents the following element tag in the schema: w:underlineTabInNumList.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UnderlineTabInNumberingList? UnderlineTabInNumberingList
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UnderlineTabInNumberingList>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Always Use Fixed Width for Hangul Characters.</para>
        /// <para>Represents the following element tag in the schema: w:displayHangulFixedWidth.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DisplayHangulFixedWidth? DisplayHangulFixedWidth
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DisplayHangulFixedWidth>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Always Move Paragraph Mark to Page after a Page Break.</para>
        /// <para>Represents the following element tag in the schema: w:splitPgBreakAndParaMark.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.SplitPageBreakAndParagraphMark? SplitPageBreakAndParagraphMark
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.SplitPageBreakAndParagraphMark>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Don't Vertically Align Cells Containing Floating Objects.</para>
        /// <para>Represents the following element tag in the schema: w:doNotVertAlignCellWithSp.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignCellWithShape? DoNotVerticallyAlignCellWithShape
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignCellWithShape>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Don't Break Table Rows Around Floating Tables.</para>
        /// <para>Represents the following element tag in the schema: w:doNotBreakConstrainedForcedTable.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotBreakConstrainedForcedTable? DoNotBreakConstrainedForcedTable
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotBreakConstrainedForcedTable>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Ignore Vertical Alignment in Textboxes.</para>
        /// <para>Represents the following element tag in the schema: w:doNotVertAlignInTxbx.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignInTextBox? DoNotVerticallyAlignInTextBox
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.DoNotVerticallyAlignInTextBox>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use ANSI Kerning Pairs from Fonts.</para>
        /// <para>Represents the following element tag in the schema: w:useAnsiKerningPairs.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.UseAnsiKerningPairs? UseAnsiKerningPairs
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.UseAnsiKerningPairs>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Use Cached Paragraph Information for Column Balancing.</para>
        /// <para>Represents the following element tag in the schema: w:cachedColBalance.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.CachedColumnBalance? CachedColumnBalance
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.CachedColumnBalance>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Compatibility>(deep);
    }

    /// <summary>
    /// <para>Document Variables.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:docVars.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.DocumentVariable" /> <c>&lt;w:docVar></c></description></item>
    /// </list>
    /// </remark>
    public partial class DocumentVariables : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the DocumentVariables class.
        /// </summary>
        public DocumentVariables() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentVariables class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentVariables(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentVariables class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocumentVariables(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocumentVariables class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocumentVariables(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:docVars");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.DocumentVariable>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.DocumentVariable), 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocumentVariables>(deep);
    }

    /// <summary>
    /// <para>Listing of All Revision Save ID Values.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:rsids.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.RsidRoot" /> <c>&lt;w:rsidRoot></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Rsid" /> <c>&lt;w:rsid></c></description></item>
    /// </list>
    /// </remark>
    public partial class Rsids : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Rsids class.
        /// </summary>
        public Rsids() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Rsids class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Rsids(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Rsids class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Rsids(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Rsids class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Rsids(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:rsids");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.RsidRoot>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Rsid>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.RsidRoot), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Rsid), 0, 0)
            };
        }

        /// <summary>
        /// <para>Original Document Revision Save ID.</para>
        /// <para>Represents the following element tag in the schema: w:rsidRoot.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.RsidRoot? RsidRoot
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.RsidRoot>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Rsids>(deep);
    }

    /// <summary>
    /// <para>Theme Color Mappings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:clrSchemeMapping.</para>
    /// </summary>
    public partial class ColorSchemeMapping : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ColorSchemeMapping class.
        /// </summary>
        public ColorSchemeMapping() : base()
        {
        }

        /// <summary>
        /// <para>Background 1 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:bg1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Background1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text 1 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:t1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Text1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Background 2 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:bg2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Background2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Text 2 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:t2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Text2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 1 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Accent1
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent 2 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Accent2
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent3 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent3</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Accent3
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent4 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent4</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Accent4
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent5 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent5</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Accent5
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Accent6 Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:accent6</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Accent6
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Hyperlink Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:hyperlink</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? Hyperlink
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Followed Hyperlink Theme Color Mapping</para>
        /// <para>Represents the following attribute in the schema: w:followedHyperlink</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>? FollowedHyperlink
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.ColorSchemeIndexValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:clrSchemeMapping");
            builder.AddElement<ColorSchemeMapping>()
                .AddAttribute("w:bg1", a => a.Background1)
                .AddAttribute("w:t1", a => a.Text1)
                .AddAttribute("w:bg2", a => a.Background2)
                .AddAttribute("w:t2", a => a.Text2)
                .AddAttribute("w:accent1", a => a.Accent1)
                .AddAttribute("w:accent2", a => a.Accent2)
                .AddAttribute("w:accent3", a => a.Accent3)
                .AddAttribute("w:accent4", a => a.Accent4)
                .AddAttribute("w:accent5", a => a.Accent5)
                .AddAttribute("w:accent6", a => a.Accent6)
                .AddAttribute("w:hyperlink", a => a.Hyperlink)
                .AddAttribute("w:followedHyperlink", a => a.FollowedHyperlink);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColorSchemeMapping>(deep);
    }

    /// <summary>
    /// <para>Caption Settings.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:captions.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.AutoCaptions" /> <c>&lt;w:autoCaptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Caption" /> <c>&lt;w:caption></c></description></item>
    /// </list>
    /// </remark>
    public partial class Captions : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the Captions class.
        /// </summary>
        public Captions() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Captions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Captions(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Captions class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Captions(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Captions class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Captions(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:captions");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.AutoCaptions>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Caption>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Caption), 1, 0),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.AutoCaptions), 0, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Captions>(deep);
    }

    /// <summary>
    /// <para>Freeze Document Layout.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:readModeInkLockDown.</para>
    /// </summary>
    public partial class ReadModeInkLockDown : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the ReadModeInkLockDown class.
        /// </summary>
        public ReadModeInkLockDown() : base()
        {
        }

        /// <summary>
        /// <para>Use Actual Pages, Not Virtual Pages</para>
        /// <para>Represents the following attribute in the schema: w:actualPg</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? UseActualPages
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Virtual Page Width</para>
        /// <para>Represents the following attribute in the schema: w:w</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Width
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Virtual Page Height</para>
        /// <para>Represents the following attribute in the schema: w:h</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public UInt32Value? Height
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Font Size Scaling</para>
        /// <para>Represents the following attribute in the schema: w:fontSz</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? FontSize
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:readModeInkLockDown");
            builder.AddElement<ReadModeInkLockDown>()
                .AddAttribute("w:actualPg", a => a.UseActualPages)
                .AddAttribute("w:w", a => a.Width, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:h", a => a.Height, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("w:fontSz", a => a.FontSize, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2007) });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?%"), Version = (FileFormatVersions.Office2010) });
                        union.AddValidator<Int32Value>(new NumberValidator() { Version = (FileFormatVersions.Office2010) });
                    });
                    aBuilder.AddUnion(union =>
                    {
                        union.AddValidator(new StringValidator() { Pattern = ("-?[0-9]+(\\.[0-9]+)?%"), InitialVersion = (FileFormatVersions.Office2013) });
                        union.AddValidator<Int32Value>(new NumberValidator() { InitialVersion = (FileFormatVersions.Office2013) });
                    });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReadModeInkLockDown>(deep);
    }

    /// <summary>
    /// <para>Defines the TargetScreenSize Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:targetScreenSz.</para>
    /// </summary>
    public partial class TargetScreenSize : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the TargetScreenSize class.
        /// </summary>
        public TargetScreenSize() : base()
        {
        }

        /// <summary>
        /// <para>Target Screen Size Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.TargetScreenSizeValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.TargetScreenSizeValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:targetScreenSz");
            builder.AddElement<TargetScreenSize>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TargetScreenSize>(deep);
    }

    /// <summary>
    /// <para>Defines the PictureBulletBase Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pict.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Group" /> <c>&lt;v:group></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.ImageFile" /> <c>&lt;v:image></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Line" /> <c>&lt;v:line></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Oval" /> <c>&lt;v:oval></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.PolyLine" /> <c>&lt;v:polyline></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Rectangle" /> <c>&lt;v:rect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.RoundRectangle" /> <c>&lt;v:roundrect></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shape" /> <c>&lt;v:shape></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Vml.Shapetype" /> <c>&lt;v:shapetype></c></description></item>
    /// </list>
    /// </remark>
    public partial class PictureBulletBase : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class.
        /// </summary>
        public PictureBulletBase() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBulletBase(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public PictureBulletBase(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the PictureBulletBase class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public PictureBulletBase(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pict");
            builder.AddChild<DocumentFormat.OpenXml.Vml.Group>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.ImageFile>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Line>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Oval>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.PolyLine>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Rectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.RoundRectangle>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shape>();
            builder.AddChild<DocumentFormat.OpenXml.Vml.Shapetype>();
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
            {
                new CompositeParticle.Builder(ParticleType.Group, 1, 1)
                {
                    new CompositeParticle.Builder(ParticleType.Choice, 1, 1)
                    {
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Group), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.ImageFile), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Line), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Oval), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.PolyLine), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Rectangle), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.RoundRectangle), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shape), 1, 1),
                        new ElementParticle(typeof(DocumentFormat.OpenXml.Vml.Shapetype), 1, 1)
                    }
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PictureBulletBase>(deep);
    }

    /// <summary>
    /// <para>Defines the Panose1Number Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:panose1.</para>
    /// </summary>
    public partial class Panose1Number : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Panose1Number class.
        /// </summary>
        public Panose1Number() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:panose1");
            builder.AddElement<Panose1Number>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (10L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Panose1Number>(deep);
    }

    /// <summary>
    /// <para>Defines the FontCharSet Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:charset.</para>
    /// </summary>
    public partial class FontCharSet : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontCharSet class.
        /// </summary>
        public FontCharSet() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? Val
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>characterSet</para>
        /// <para>Represents the following attribute in the schema: w:characterSet</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.StrictCharacterSet>? StrictCharacterSet
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.StrictCharacterSet>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:charset");
            builder.AddElement<FontCharSet>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Pattern = ("[0-9a-fA-F]*"), MinLength = (1L), MaxLength = (2L) });
                })
                .AddAttribute("w:characterSet", a => a.StrictCharacterSet);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontCharSet>(deep);
    }

    /// <summary>
    /// <para>Defines the FontFamily Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:family.</para>
    /// </summary>
    public partial class FontFamily : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontFamily class.
        /// </summary>
        public FontFamily() : base()
        {
        }

        /// <summary>
        /// <para>Font Family Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontFamilyValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontFamilyValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:family");
            builder.AddElement<FontFamily>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontFamily>(deep);
    }

    /// <summary>
    /// <para>Defines the Pitch Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:pitch.</para>
    /// </summary>
    public partial class Pitch : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Pitch class.
        /// </summary>
        public Pitch() : base()
        {
        }

        /// <summary>
        /// <para>Value</para>
        /// <para>Represents the following attribute in the schema: w:val</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontPitchValues>? Val
        {
            get => GetAttribute<EnumValue<DocumentFormat.OpenXml.Wordprocessing.FontPitchValues>>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:pitch");
            builder.AddElement<Pitch>()
                .AddAttribute("w:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pitch>(deep);
    }

    /// <summary>
    /// <para>Defines the FontSignature Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:sig.</para>
    /// </summary>
    public partial class FontSignature : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontSignature class.
        /// </summary>
        public FontSignature() : base()
        {
        }

        /// <summary>
        /// <para>First 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb0</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? UnicodeSignature0
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Second 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? UnicodeSignature1
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Third 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb2</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? UnicodeSignature2
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Fourth 32 Bits of Unicode Subset Bitfield</para>
        /// <para>Represents the following attribute in the schema: w:usb3</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? UnicodeSignature3
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Lower 32 Bits of Code Page Bit Field</para>
        /// <para>Represents the following attribute in the schema: w:csb0</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? CodePageSignature0
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Upper 32 Bits of Code Page Bit Field</para>
        /// <para>Represents the following attribute in the schema: w:csb1</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public HexBinaryValue? CodePageSignature1
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:sig");
            builder.AddElement<FontSignature>()
                .AddAttribute("w:usb0", a => a.UnicodeSignature0, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:usb1", a => a.UnicodeSignature1, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:usb2", a => a.UnicodeSignature2, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:usb3", a => a.UnicodeSignature3, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:csb0", a => a.CodePageSignature0, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                })
                .AddAttribute("w:csb1", a => a.CodePageSignature1, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:csb0"), @"[0-9a-fA-F]{8}") { Version = FileFormatVersions.Office2010 });
            builder.AddConstraint(new AttributeValuePatternConstraint(builder.CreateQName("w:csb1"), @"[0-9a-fA-F]{8}") { Version = FileFormatVersions.Office2010 });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FontSignature>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedRegularFont Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedRegular.</para>
    /// </summary>
    public partial class EmbedRegularFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedRegularFont class.
        /// </summary>
        public EmbedRegularFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:embedRegular");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font"));
            builder.AddConstraint(new RelationshipExistConstraint(builder.CreateQName("r:id")));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedRegularFont>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedBoldFont Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedBold.</para>
    /// </summary>
    public partial class EmbedBoldFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedBoldFont class.
        /// </summary>
        public EmbedBoldFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:embedBold");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedBoldFont>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedItalicFont Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedItalic.</para>
    /// </summary>
    public partial class EmbedItalicFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedItalicFont class.
        /// </summary>
        public EmbedItalicFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:embedItalic");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedItalicFont>(deep);
    }

    /// <summary>
    /// <para>Defines the EmbedBoldItalicFont Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:embedBoldItalic.</para>
    /// </summary>
    public partial class EmbedBoldItalicFont : FontRelationshipType
    {
        /// <summary>
        /// Initializes a new instance of the EmbedBoldItalicFont class.
        /// </summary>
        public EmbedBoldItalicFont() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:embedBoldItalic");
            builder.AddConstraint(new RelationshipTypeConstraint(builder.CreateQName("w:id"), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font"));
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EmbedBoldItalicFont>(deep);
    }

    /// <summary>
    /// <para>Defines the FontRelationshipType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class FontRelationshipType : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the FontRelationshipType class.
        /// </summary>
        protected FontRelationshipType() : base()
        {
        }

        /// <summary>
        /// <para>fontKey</para>
        /// <para>Represents the following attribute in the schema: w:fontKey</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public StringValue? FontKey
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>subsetted</para>
        /// <para>Represents the following attribute in the schema: w:subsetted</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public OnOffValue? Subsetted
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Relationship to Part</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remark>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remark>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<FontRelationshipType>()
                .AddAttribute("w:fontKey", a => a.FontKey, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { IsToken = (true), Pattern = ("\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}") });
                })
                .AddAttribute("w:subsetted", a => a.Subsetted)
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }

    /// <summary>
    /// <para>Defines the LevelOverride Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is w:lvlOverride.</para>
    /// </summary>
    /// <remark>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.StartOverrideNumberingValue" /> <c>&lt;w:startOverride></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Wordprocessing.Level" /> <c>&lt;w:lvl></c></description></item>
    /// </list>
    /// </remark>
    public partial class LevelOverride : OpenXmlCompositeElement
    {
        /// <summary>
        /// Initializes a new instance of the LevelOverride class.
        /// </summary>
        public LevelOverride() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LevelOverride(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelOverride class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public LevelOverride(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the LevelOverride class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public LevelOverride(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Numbering Level ID</para>
        /// <para>Represents the following attribute in the schema: w:ilvl</para>
        /// </summary>
        /// <remark>
        /// xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public Int32Value? LevelIndex
        {
            get => GetAttribute<Int32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("w:lvlOverride");
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.StartOverrideNumberingValue>();
            builder.AddChild<DocumentFormat.OpenXml.Wordprocessing.Level>();
            builder.AddElement<LevelOverride>()
                .AddAttribute("w:ilvl", a => a.LevelIndex, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.StartOverrideNumberingValue), 0, 1),
                new ElementParticle(typeof(DocumentFormat.OpenXml.Wordprocessing.Level), 0, 1)
            };
        }

        /// <summary>
        /// <para>Numbering Level Starting Value Override.</para>
        /// <para>Represents the following element tag in the schema: w:startOverride.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.StartOverrideNumberingValue? StartOverrideNumberingValue
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.StartOverrideNumberingValue>();
            set => SetElement(value);
        }

        /// <summary>
        /// <para>Numbering Level Override Definition.</para>
        /// <para>Represents the following element tag in the schema: w:lvl.</para>
        /// </summary>
        /// <remark>
        /// xmlns:w = http://schemas.openxmlformats.org/wordprocessingml/2006/main
        /// </remark>
        public DocumentFormat.OpenXml.Wordprocessing.Level? Level
        {
            get => GetElement<DocumentFormat.OpenXml.Wordprocessing.Level>();
            set => SetElement(value);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LevelOverride>(deep);
    }

    /// <summary>
    /// Defines the OnOffOnlyValues enumeration.
    /// </summary>
    public readonly record struct OnOffOnlyValues : IEnumValue, IEnumValueFactory<OnOffOnlyValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new OnOffOnlyValues enum instance
        /// </summary>
        public OnOffOnlyValues(string value) => _value = value;
        OnOffOnlyValues IEnumValueFactory<OnOffOnlyValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "on" => true,
            "off" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "on";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// on.
        /// <para>When the item is serialized out as xml, its value is "on".</para>
        /// </summary>
        public static OnOffOnlyValues On => new("on");
        /// <summary>
        /// off.
        /// <para>When the item is serialized out as xml, its value is "off".</para>
        /// </summary>
        public static OnOffOnlyValues Off => new("off");
    
    }

    /// <summary>
    /// Defines the HighlightColorValues enumeration.
    /// </summary>
    public readonly record struct HighlightColorValues : IEnumValue, IEnumValueFactory<HighlightColorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new HighlightColorValues enum instance
        /// </summary>
        public HighlightColorValues(string value) => _value = value;
        HighlightColorValues IEnumValueFactory<HighlightColorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "black" => true,
            "blue" => true,
            "cyan" => true,
            "green" => true,
            "magenta" => true,
            "red" => true,
            "yellow" => true,
            "white" => true,
            "darkBlue" => true,
            "darkCyan" => true,
            "darkGreen" => true,
            "darkMagenta" => true,
            "darkRed" => true,
            "darkYellow" => true,
            "darkGray" => true,
            "lightGray" => true,
            "none" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "black";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Black Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "black".</para>
        /// </summary>
        public static HighlightColorValues Black => new("black");
        /// <summary>
        /// Blue Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "blue".</para>
        /// </summary>
        public static HighlightColorValues Blue => new("blue");
        /// <summary>
        /// Cyan Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "cyan".</para>
        /// </summary>
        public static HighlightColorValues Cyan => new("cyan");
        /// <summary>
        /// Green Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "green".</para>
        /// </summary>
        public static HighlightColorValues Green => new("green");
        /// <summary>
        /// Magenta Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "magenta".</para>
        /// </summary>
        public static HighlightColorValues Magenta => new("magenta");
        /// <summary>
        /// Red Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "red".</para>
        /// </summary>
        public static HighlightColorValues Red => new("red");
        /// <summary>
        /// Yellow Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "yellow".</para>
        /// </summary>
        public static HighlightColorValues Yellow => new("yellow");
        /// <summary>
        /// White Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "white".</para>
        /// </summary>
        public static HighlightColorValues White => new("white");
        /// <summary>
        /// Dark Blue Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkBlue".</para>
        /// </summary>
        public static HighlightColorValues DarkBlue => new("darkBlue");
        /// <summary>
        /// Dark Cyan Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkCyan".</para>
        /// </summary>
        public static HighlightColorValues DarkCyan => new("darkCyan");
        /// <summary>
        /// Dark Green Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkGreen".</para>
        /// </summary>
        public static HighlightColorValues DarkGreen => new("darkGreen");
        /// <summary>
        /// Dark Magenta Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkMagenta".</para>
        /// </summary>
        public static HighlightColorValues DarkMagenta => new("darkMagenta");
        /// <summary>
        /// Dark Red Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkRed".</para>
        /// </summary>
        public static HighlightColorValues DarkRed => new("darkRed");
        /// <summary>
        /// Dark Yellow Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkYellow".</para>
        /// </summary>
        public static HighlightColorValues DarkYellow => new("darkYellow");
        /// <summary>
        /// Dark Gray Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "darkGray".</para>
        /// </summary>
        public static HighlightColorValues DarkGray => new("darkGray");
        /// <summary>
        /// Light Gray Highlighting Color.
        /// <para>When the item is serialized out as xml, its value is "lightGray".</para>
        /// </summary>
        public static HighlightColorValues LightGray => new("lightGray");
        /// <summary>
        /// No Text Highlighting.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static HighlightColorValues None => new("none");
    
    }

    /// <summary>
    /// Defines the AutomaticColorValues enumeration.
    /// </summary>
    public readonly record struct AutomaticColorValues : IEnumValue, IEnumValueFactory<AutomaticColorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new AutomaticColorValues enum instance
        /// </summary>
        public AutomaticColorValues(string value) => _value = value;
        AutomaticColorValues IEnumValueFactory<AutomaticColorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "auto" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "auto";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Automatically Determined Color.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static AutomaticColorValues Auto => new("auto");
    
    }

    /// <summary>
    /// Defines the UnderlineValues enumeration.
    /// </summary>
    public readonly record struct UnderlineValues : IEnumValue, IEnumValueFactory<UnderlineValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new UnderlineValues enum instance
        /// </summary>
        public UnderlineValues(string value) => _value = value;
        UnderlineValues IEnumValueFactory<UnderlineValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "single" => true,
            "words" => true,
            "double" => true,
            "thick" => true,
            "dotted" => true,
            "dottedHeavy" => true,
            "dash" => true,
            "dashedHeavy" => true,
            "dashLong" => true,
            "dashLongHeavy" => true,
            "dotDash" => true,
            "dashDotHeavy" => true,
            "dotDotDash" => true,
            "dashDotDotHeavy" => true,
            "wave" => true,
            "wavyHeavy" => true,
            "wavyDouble" => true,
            "none" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "single";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Single Underline.
        /// <para>When the item is serialized out as xml, its value is "single".</para>
        /// </summary>
        public static UnderlineValues Single => new("single");
        /// <summary>
        /// Underline Non-Space Characters Only.
        /// <para>When the item is serialized out as xml, its value is "words".</para>
        /// </summary>
        public static UnderlineValues Words => new("words");
        /// <summary>
        /// Double Underline.
        /// <para>When the item is serialized out as xml, its value is "double".</para>
        /// </summary>
        public static UnderlineValues Double => new("double");
        /// <summary>
        /// Thick Underline.
        /// <para>When the item is serialized out as xml, its value is "thick".</para>
        /// </summary>
        public static UnderlineValues Thick => new("thick");
        /// <summary>
        /// Dotted Underline.
        /// <para>When the item is serialized out as xml, its value is "dotted".</para>
        /// </summary>
        public static UnderlineValues Dotted => new("dotted");
        /// <summary>
        /// Thick Dotted Underline.
        /// <para>When the item is serialized out as xml, its value is "dottedHeavy".</para>
        /// </summary>
        public static UnderlineValues DottedHeavy => new("dottedHeavy");
        /// <summary>
        /// Dashed Underline.
        /// <para>When the item is serialized out as xml, its value is "dash".</para>
        /// </summary>
        public static UnderlineValues Dash => new("dash");
        /// <summary>
        /// Thick Dashed Underline.
        /// <para>When the item is serialized out as xml, its value is "dashedHeavy".</para>
        /// </summary>
        public static UnderlineValues DashedHeavy => new("dashedHeavy");
        /// <summary>
        /// Long Dashed Underline.
        /// <para>When the item is serialized out as xml, its value is "dashLong".</para>
        /// </summary>
        public static UnderlineValues DashLong => new("dashLong");
        /// <summary>
        /// Thick Long Dashed Underline.
        /// <para>When the item is serialized out as xml, its value is "dashLongHeavy".</para>
        /// </summary>
        public static UnderlineValues DashLongHeavy => new("dashLongHeavy");
        /// <summary>
        /// Dash-Dot Underline.
        /// <para>When the item is serialized out as xml, its value is "dotDash".</para>
        /// </summary>
        public static UnderlineValues DotDash => new("dotDash");
        /// <summary>
        /// Thick Dash-Dot Underline.
        /// <para>When the item is serialized out as xml, its value is "dashDotHeavy".</para>
        /// </summary>
        public static UnderlineValues DashDotHeavy => new("dashDotHeavy");
        /// <summary>
        /// Dash-Dot-Dot Underline.
        /// <para>When the item is serialized out as xml, its value is "dotDotDash".</para>
        /// </summary>
        public static UnderlineValues DotDotDash => new("dotDotDash");
        /// <summary>
        /// Thick Dash-Dot-Dot Underline.
        /// <para>When the item is serialized out as xml, its value is "dashDotDotHeavy".</para>
        /// </summary>
        public static UnderlineValues DashDotDotHeavy => new("dashDotDotHeavy");
        /// <summary>
        /// Wave Underline.
        /// <para>When the item is serialized out as xml, its value is "wave".</para>
        /// </summary>
        public static UnderlineValues Wave => new("wave");
        /// <summary>
        /// Heavy Wave Underline.
        /// <para>When the item is serialized out as xml, its value is "wavyHeavy".</para>
        /// </summary>
        public static UnderlineValues WavyHeavy => new("wavyHeavy");
        /// <summary>
        /// Double Wave Underline.
        /// <para>When the item is serialized out as xml, its value is "wavyDouble".</para>
        /// </summary>
        public static UnderlineValues WavyDouble => new("wavyDouble");
        /// <summary>
        /// No Underline.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static UnderlineValues None => new("none");
    
    }

    /// <summary>
    /// Defines the TextEffectValues enumeration.
    /// </summary>
    public readonly record struct TextEffectValues : IEnumValue, IEnumValueFactory<TextEffectValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TextEffectValues enum instance
        /// </summary>
        public TextEffectValues(string value) => _value = value;
        TextEffectValues IEnumValueFactory<TextEffectValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "blinkBackground" => true,
            "lights" => true,
            "antsBlack" => true,
            "antsRed" => true,
            "shimmer" => true,
            "sparkle" => true,
            "none" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "blinkBackground";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Blinking Background Animation.
        /// <para>When the item is serialized out as xml, its value is "blinkBackground".</para>
        /// </summary>
        public static TextEffectValues BlinkBackground => new("blinkBackground");
        /// <summary>
        /// Colored Lights Animation.
        /// <para>When the item is serialized out as xml, its value is "lights".</para>
        /// </summary>
        public static TextEffectValues Lights => new("lights");
        /// <summary>
        /// Black Dashed Line Animation.
        /// <para>When the item is serialized out as xml, its value is "antsBlack".</para>
        /// </summary>
        public static TextEffectValues AntsBlack => new("antsBlack");
        /// <summary>
        /// Marching Red Ants.
        /// <para>When the item is serialized out as xml, its value is "antsRed".</para>
        /// </summary>
        public static TextEffectValues AntsRed => new("antsRed");
        /// <summary>
        /// Shimmer Animation.
        /// <para>When the item is serialized out as xml, its value is "shimmer".</para>
        /// </summary>
        public static TextEffectValues Shimmer => new("shimmer");
        /// <summary>
        /// Sparkling Lights Animation.
        /// <para>When the item is serialized out as xml, its value is "sparkle".</para>
        /// </summary>
        public static TextEffectValues Sparkle => new("sparkle");
        /// <summary>
        /// No Animation.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static TextEffectValues None => new("none");
    
    }

    /// <summary>
    /// Defines the VerticalPositionValues enumeration.
    /// </summary>
    public readonly record struct VerticalPositionValues : IEnumValue, IEnumValueFactory<VerticalPositionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new VerticalPositionValues enum instance
        /// </summary>
        public VerticalPositionValues(string value) => _value = value;
        VerticalPositionValues IEnumValueFactory<VerticalPositionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "baseline" => true,
            "superscript" => true,
            "subscript" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "baseline";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Regular Vertical Positioning.
        /// <para>When the item is serialized out as xml, its value is "baseline".</para>
        /// </summary>
        public static VerticalPositionValues Baseline => new("baseline");
        /// <summary>
        /// Superscript.
        /// <para>When the item is serialized out as xml, its value is "superscript".</para>
        /// </summary>
        public static VerticalPositionValues Superscript => new("superscript");
        /// <summary>
        /// Subscript.
        /// <para>When the item is serialized out as xml, its value is "subscript".</para>
        /// </summary>
        public static VerticalPositionValues Subscript => new("subscript");
    
    }

    /// <summary>
    /// Defines the EmphasisMarkValues enumeration.
    /// </summary>
    public readonly record struct EmphasisMarkValues : IEnumValue, IEnumValueFactory<EmphasisMarkValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new EmphasisMarkValues enum instance
        /// </summary>
        public EmphasisMarkValues(string value) => _value = value;
        EmphasisMarkValues IEnumValueFactory<EmphasisMarkValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "dot" => true,
            "comma" => true,
            "circle" => true,
            "underDot" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Emphasis Mark.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static EmphasisMarkValues None => new("none");
        /// <summary>
        /// Dot Emphasis Mark Above Characters.
        /// <para>When the item is serialized out as xml, its value is "dot".</para>
        /// </summary>
        public static EmphasisMarkValues Dot => new("dot");
        /// <summary>
        /// Comma Emphasis Mark Above Characters.
        /// <para>When the item is serialized out as xml, its value is "comma".</para>
        /// </summary>
        public static EmphasisMarkValues Comma => new("comma");
        /// <summary>
        /// Circle Emphasis Mark Above Characters.
        /// <para>When the item is serialized out as xml, its value is "circle".</para>
        /// </summary>
        public static EmphasisMarkValues Circle => new("circle");
        /// <summary>
        /// Dot Emphasis Mark Below Characters.
        /// <para>When the item is serialized out as xml, its value is "underDot".</para>
        /// </summary>
        public static EmphasisMarkValues UnderDot => new("underDot");
    
    }

    /// <summary>
    /// Defines the CombineBracketValues enumeration.
    /// </summary>
    public readonly record struct CombineBracketValues : IEnumValue, IEnumValueFactory<CombineBracketValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CombineBracketValues enum instance
        /// </summary>
        public CombineBracketValues(string value) => _value = value;
        CombineBracketValues IEnumValueFactory<CombineBracketValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "round" => true,
            "square" => true,
            "angle" => true,
            "curly" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Enclosing Brackets.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static CombineBracketValues None => new("none");
        /// <summary>
        /// Round Brackets.
        /// <para>When the item is serialized out as xml, its value is "round".</para>
        /// </summary>
        public static CombineBracketValues Round => new("round");
        /// <summary>
        /// Square Brackets.
        /// <para>When the item is serialized out as xml, its value is "square".</para>
        /// </summary>
        public static CombineBracketValues Square => new("square");
        /// <summary>
        /// Angle Brackets.
        /// <para>When the item is serialized out as xml, its value is "angle".</para>
        /// </summary>
        public static CombineBracketValues Angle => new("angle");
        /// <summary>
        /// Curly Brackets.
        /// <para>When the item is serialized out as xml, its value is "curly".</para>
        /// </summary>
        public static CombineBracketValues Curly => new("curly");
    
    }

    /// <summary>
    /// Defines the HorizontalAlignmentValues enumeration.
    /// </summary>
    public readonly record struct HorizontalAlignmentValues : IEnumValue, IEnumValueFactory<HorizontalAlignmentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new HorizontalAlignmentValues enum instance
        /// </summary>
        public HorizontalAlignmentValues(string value) => _value = value;
        HorizontalAlignmentValues IEnumValueFactory<HorizontalAlignmentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "left" => true,
            "center" => true,
            "right" => true,
            "inside" => true,
            "outside" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "left";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Left Aligned Horizontally.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static HorizontalAlignmentValues Left => new("left");
        /// <summary>
        /// Centered Horizontally.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static HorizontalAlignmentValues Center => new("center");
        /// <summary>
        /// Right Aligned Horizontally.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static HorizontalAlignmentValues Right => new("right");
        /// <summary>
        /// Inside.
        /// <para>When the item is serialized out as xml, its value is "inside".</para>
        /// </summary>
        public static HorizontalAlignmentValues Inside => new("inside");
        /// <summary>
        /// Outside.
        /// <para>When the item is serialized out as xml, its value is "outside".</para>
        /// </summary>
        public static HorizontalAlignmentValues Outside => new("outside");
    
    }

    /// <summary>
    /// Defines the VerticalAlignmentValues enumeration.
    /// </summary>
    public readonly record struct VerticalAlignmentValues : IEnumValue, IEnumValueFactory<VerticalAlignmentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new VerticalAlignmentValues enum instance
        /// </summary>
        public VerticalAlignmentValues(string value) => _value = value;
        VerticalAlignmentValues IEnumValueFactory<VerticalAlignmentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "inline" => true,
            "top" => true,
            "center" => true,
            "bottom" => true,
            "inside" => true,
            "outside" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "inline";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// In line With Text.
        /// <para>When the item is serialized out as xml, its value is "inline".</para>
        /// </summary>
        public static VerticalAlignmentValues Inline => new("inline");
        /// <summary>
        /// Top.
        /// <para>When the item is serialized out as xml, its value is "top".</para>
        /// </summary>
        public static VerticalAlignmentValues Top => new("top");
        /// <summary>
        /// Centered Vertically.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static VerticalAlignmentValues Center => new("center");
        /// <summary>
        /// Bottom.
        /// <para>When the item is serialized out as xml, its value is "bottom".</para>
        /// </summary>
        public static VerticalAlignmentValues Bottom => new("bottom");
        /// <summary>
        /// Inside Anchor Extents.
        /// <para>When the item is serialized out as xml, its value is "inside".</para>
        /// </summary>
        public static VerticalAlignmentValues Inside => new("inside");
        /// <summary>
        /// Outside Anchor Extents.
        /// <para>When the item is serialized out as xml, its value is "outside".</para>
        /// </summary>
        public static VerticalAlignmentValues Outside => new("outside");
    
    }

    /// <summary>
    /// Defines the HeightRuleValues enumeration.
    /// </summary>
    public readonly record struct HeightRuleValues : IEnumValue, IEnumValueFactory<HeightRuleValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new HeightRuleValues enum instance
        /// </summary>
        public HeightRuleValues(string value) => _value = value;
        HeightRuleValues IEnumValueFactory<HeightRuleValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "auto" => true,
            "exact" => true,
            "atLeast" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "auto";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Determine Height Based On Contents.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static HeightRuleValues Auto => new("auto");
        /// <summary>
        /// Exact Height.
        /// <para>When the item is serialized out as xml, its value is "exact".</para>
        /// </summary>
        public static HeightRuleValues Exact => new("exact");
        /// <summary>
        /// Minimum Height.
        /// <para>When the item is serialized out as xml, its value is "atLeast".</para>
        /// </summary>
        public static HeightRuleValues AtLeast => new("atLeast");
    
    }

    /// <summary>
    /// Defines the TextWrappingValues enumeration.
    /// </summary>
    public readonly record struct TextWrappingValues : IEnumValue, IEnumValueFactory<TextWrappingValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TextWrappingValues enum instance
        /// </summary>
        public TextWrappingValues(string value) => _value = value;
        TextWrappingValues IEnumValueFactory<TextWrappingValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "auto" => true,
            "notBeside" => true,
            "around" => true,
            "tight" => true,
            "through" => true,
            "none" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "auto";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Default Text Wrapping Around Frame.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static TextWrappingValues Auto => new("auto");
        /// <summary>
        /// No Text Wrapping Beside Frame.
        /// <para>When the item is serialized out as xml, its value is "notBeside".</para>
        /// </summary>
        public static TextWrappingValues NotBeside => new("notBeside");
        /// <summary>
        /// Allow Text Wrapping Around Frame.
        /// <para>When the item is serialized out as xml, its value is "around".</para>
        /// </summary>
        public static TextWrappingValues Around => new("around");
        /// <summary>
        /// Tight Text Wrapping Around Frame.
        /// <para>When the item is serialized out as xml, its value is "tight".</para>
        /// </summary>
        public static TextWrappingValues Tight => new("tight");
        /// <summary>
        /// Through Text Wrapping Around Frame.
        /// <para>When the item is serialized out as xml, its value is "through".</para>
        /// </summary>
        public static TextWrappingValues Through => new("through");
        /// <summary>
        /// No Text Wrapping Around Frame.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static TextWrappingValues None => new("none");
    
    }

    /// <summary>
    /// Defines the VerticalAnchorValues enumeration.
    /// </summary>
    public readonly record struct VerticalAnchorValues : IEnumValue, IEnumValueFactory<VerticalAnchorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new VerticalAnchorValues enum instance
        /// </summary>
        public VerticalAnchorValues(string value) => _value = value;
        VerticalAnchorValues IEnumValueFactory<VerticalAnchorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "text" => true,
            "margin" => true,
            "page" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "text";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Relative To Vertical Text Extents.
        /// <para>When the item is serialized out as xml, its value is "text".</para>
        /// </summary>
        public static VerticalAnchorValues Text => new("text");
        /// <summary>
        /// Relative To Margin.
        /// <para>When the item is serialized out as xml, its value is "margin".</para>
        /// </summary>
        public static VerticalAnchorValues Margin => new("margin");
        /// <summary>
        /// Relative To Page.
        /// <para>When the item is serialized out as xml, its value is "page".</para>
        /// </summary>
        public static VerticalAnchorValues Page => new("page");
    
    }

    /// <summary>
    /// Defines the HorizontalAnchorValues enumeration.
    /// </summary>
    public readonly record struct HorizontalAnchorValues : IEnumValue, IEnumValueFactory<HorizontalAnchorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new HorizontalAnchorValues enum instance
        /// </summary>
        public HorizontalAnchorValues(string value) => _value = value;
        HorizontalAnchorValues IEnumValueFactory<HorizontalAnchorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "text" => true,
            "margin" => true,
            "page" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "text";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Relative to Text Extents.
        /// <para>When the item is serialized out as xml, its value is "text".</para>
        /// </summary>
        public static HorizontalAnchorValues Text => new("text");
        /// <summary>
        /// Relative To Margin.
        /// <para>When the item is serialized out as xml, its value is "margin".</para>
        /// </summary>
        public static HorizontalAnchorValues Margin => new("margin");
        /// <summary>
        /// Relative to Page.
        /// <para>When the item is serialized out as xml, its value is "page".</para>
        /// </summary>
        public static HorizontalAnchorValues Page => new("page");
    
    }

    /// <summary>
    /// Defines the DropCapLocationValues enumeration.
    /// </summary>
    public readonly record struct DropCapLocationValues : IEnumValue, IEnumValueFactory<DropCapLocationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DropCapLocationValues enum instance
        /// </summary>
        public DropCapLocationValues(string value) => _value = value;
        DropCapLocationValues IEnumValueFactory<DropCapLocationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "drop" => true,
            "margin" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Not Drop Cap.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static DropCapLocationValues None => new("none");
        /// <summary>
        /// Drop Cap Inside Margin.
        /// <para>When the item is serialized out as xml, its value is "drop".</para>
        /// </summary>
        public static DropCapLocationValues Drop => new("drop");
        /// <summary>
        /// Drop Cap Outside Margin.
        /// <para>When the item is serialized out as xml, its value is "margin".</para>
        /// </summary>
        public static DropCapLocationValues Margin => new("margin");
    
    }

    /// <summary>
    /// Defines the TabStopLeaderCharValues enumeration.
    /// </summary>
    public readonly record struct TabStopLeaderCharValues : IEnumValue, IEnumValueFactory<TabStopLeaderCharValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TabStopLeaderCharValues enum instance
        /// </summary>
        public TabStopLeaderCharValues(string value) => _value = value;
        TabStopLeaderCharValues IEnumValueFactory<TabStopLeaderCharValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "dot" => true,
            "hyphen" => true,
            "underscore" => true,
            "heavy" => true,
            "middleDot" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No tab stop leader.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static TabStopLeaderCharValues None => new("none");
        /// <summary>
        /// Dotted leader line.
        /// <para>When the item is serialized out as xml, its value is "dot".</para>
        /// </summary>
        public static TabStopLeaderCharValues Dot => new("dot");
        /// <summary>
        /// Dashed tab stop leader line.
        /// <para>When the item is serialized out as xml, its value is "hyphen".</para>
        /// </summary>
        public static TabStopLeaderCharValues Hyphen => new("hyphen");
        /// <summary>
        /// Solid leader line.
        /// <para>When the item is serialized out as xml, its value is "underscore".</para>
        /// </summary>
        public static TabStopLeaderCharValues Underscore => new("underscore");
        /// <summary>
        /// Heavy solid leader line.
        /// <para>When the item is serialized out as xml, its value is "heavy".</para>
        /// </summary>
        public static TabStopLeaderCharValues Heavy => new("heavy");
        /// <summary>
        /// Middle dot leader line.
        /// <para>When the item is serialized out as xml, its value is "middleDot".</para>
        /// </summary>
        public static TabStopLeaderCharValues MiddleDot => new("middleDot");
    
    }

    /// <summary>
    /// Defines the LineSpacingRuleValues enumeration.
    /// </summary>
    public readonly record struct LineSpacingRuleValues : IEnumValue, IEnumValueFactory<LineSpacingRuleValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new LineSpacingRuleValues enum instance
        /// </summary>
        public LineSpacingRuleValues(string value) => _value = value;
        LineSpacingRuleValues IEnumValueFactory<LineSpacingRuleValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "auto" => true,
            "exact" => true,
            "atLeast" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "auto";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Automatically Determined Line Height.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static LineSpacingRuleValues Auto => new("auto");
        /// <summary>
        /// Exact Line Height.
        /// <para>When the item is serialized out as xml, its value is "exact".</para>
        /// </summary>
        public static LineSpacingRuleValues Exact => new("exact");
        /// <summary>
        /// Minimum Line Height.
        /// <para>When the item is serialized out as xml, its value is "atLeast".</para>
        /// </summary>
        public static LineSpacingRuleValues AtLeast => new("atLeast");
    
    }

    /// <summary>
    /// Defines the TableRowAlignmentValues enumeration.
    /// </summary>
    public readonly record struct TableRowAlignmentValues : IEnumValue, IEnumValueFactory<TableRowAlignmentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableRowAlignmentValues enum instance
        /// </summary>
        public TableRowAlignmentValues(string value) => _value = value;
        TableRowAlignmentValues IEnumValueFactory<TableRowAlignmentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "left" => true,
            "center" => true,
            "right" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "left";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// left.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static TableRowAlignmentValues Left => new("left");
        /// <summary>
        /// center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static TableRowAlignmentValues Center => new("center");
        /// <summary>
        /// right.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static TableRowAlignmentValues Right => new("right");
    
    }

    /// <summary>
    /// Defines the ViewValues enumeration.
    /// </summary>
    public readonly record struct ViewValues : IEnumValue, IEnumValueFactory<ViewValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ViewValues enum instance
        /// </summary>
        public ViewValues(string value) => _value = value;
        ViewValues IEnumValueFactory<ViewValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "print" => true,
            "outline" => true,
            "masterPages" => true,
            "normal" => true,
            "web" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Default View.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static ViewValues None => new("none");
        /// <summary>
        /// Print Layout View.
        /// <para>When the item is serialized out as xml, its value is "print".</para>
        /// </summary>
        public static ViewValues Print => new("print");
        /// <summary>
        /// Outline View.
        /// <para>When the item is serialized out as xml, its value is "outline".</para>
        /// </summary>
        public static ViewValues Outline => new("outline");
        /// <summary>
        /// Master Document View.
        /// <para>When the item is serialized out as xml, its value is "masterPages".</para>
        /// </summary>
        public static ViewValues MasterPages => new("masterPages");
        /// <summary>
        /// Draft View.
        /// <para>When the item is serialized out as xml, its value is "normal".</para>
        /// </summary>
        public static ViewValues Normal => new("normal");
        /// <summary>
        /// Web Page View.
        /// <para>When the item is serialized out as xml, its value is "web".</para>
        /// </summary>
        public static ViewValues Web => new("web");
    
    }

    /// <summary>
    /// Defines the PresetZoomValues enumeration.
    /// </summary>
    public readonly record struct PresetZoomValues : IEnumValue, IEnumValueFactory<PresetZoomValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new PresetZoomValues enum instance
        /// </summary>
        public PresetZoomValues(string value) => _value = value;
        PresetZoomValues IEnumValueFactory<PresetZoomValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "fullPage" => true,
            "bestFit" => true,
            "textFit" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Preset Magnification.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static PresetZoomValues None => new("none");
        /// <summary>
        /// Display One Full Page.
        /// <para>When the item is serialized out as xml, its value is "fullPage".</para>
        /// </summary>
        public static PresetZoomValues FullPage => new("fullPage");
        /// <summary>
        /// Display Page Width.
        /// <para>When the item is serialized out as xml, its value is "bestFit".</para>
        /// </summary>
        public static PresetZoomValues BestFit => new("bestFit");
        /// <summary>
        /// Display Text Width.
        /// <para>When the item is serialized out as xml, its value is "textFit".</para>
        /// </summary>
        public static PresetZoomValues TextFit => new("textFit");
    
    }

    /// <summary>
    /// Defines the ProofingStateValues enumeration.
    /// </summary>
    public readonly record struct ProofingStateValues : IEnumValue, IEnumValueFactory<ProofingStateValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ProofingStateValues enum instance
        /// </summary>
        public ProofingStateValues(string value) => _value = value;
        ProofingStateValues IEnumValueFactory<ProofingStateValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "clean" => true,
            "dirty" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "clean";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Check Completed.
        /// <para>When the item is serialized out as xml, its value is "clean".</para>
        /// </summary>
        public static ProofingStateValues Clean => new("clean");
        /// <summary>
        /// Check Not Completed.
        /// <para>When the item is serialized out as xml, its value is "dirty".</para>
        /// </summary>
        public static ProofingStateValues Dirty => new("dirty");
    
    }

    /// <summary>
    /// Defines the DocumentTypeValues enumeration.
    /// </summary>
    public readonly record struct DocumentTypeValues : IEnumValue, IEnumValueFactory<DocumentTypeValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocumentTypeValues enum instance
        /// </summary>
        public DocumentTypeValues(string value) => _value = value;
        DocumentTypeValues IEnumValueFactory<DocumentTypeValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "notSpecified" => true,
            "letter" => true,
            "eMail" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "notSpecified";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Default Document.
        /// <para>When the item is serialized out as xml, its value is "notSpecified".</para>
        /// </summary>
        public static DocumentTypeValues NotSpecified => new("notSpecified");
        /// <summary>
        /// Letter.
        /// <para>When the item is serialized out as xml, its value is "letter".</para>
        /// </summary>
        public static DocumentTypeValues Letter => new("letter");
        /// <summary>
        /// E-Mail Message.
        /// <para>When the item is serialized out as xml, its value is "eMail".</para>
        /// </summary>
        public static DocumentTypeValues Email => new("eMail");
    
    }

    /// <summary>
    /// Defines the DocumentProtectionValues enumeration.
    /// </summary>
    public readonly record struct DocumentProtectionValues : IEnumValue, IEnumValueFactory<DocumentProtectionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocumentProtectionValues enum instance
        /// </summary>
        public DocumentProtectionValues(string value) => _value = value;
        DocumentProtectionValues IEnumValueFactory<DocumentProtectionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "readOnly" => true,
            "comments" => true,
            "trackedChanges" => true,
            "forms" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Editing Restrictions.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static DocumentProtectionValues None => new("none");
        /// <summary>
        /// Allow No Editing.
        /// <para>When the item is serialized out as xml, its value is "readOnly".</para>
        /// </summary>
        public static DocumentProtectionValues ReadOnly => new("readOnly");
        /// <summary>
        /// Allow Editing of Comments.
        /// <para>When the item is serialized out as xml, its value is "comments".</para>
        /// </summary>
        public static DocumentProtectionValues Comments => new("comments");
        /// <summary>
        /// Allow Editing With Revision Tracking.
        /// <para>When the item is serialized out as xml, its value is "trackedChanges".</para>
        /// </summary>
        public static DocumentProtectionValues TrackedChanges => new("trackedChanges");
        /// <summary>
        /// Allow Editing of Form Fields.
        /// <para>When the item is serialized out as xml, its value is "forms".</para>
        /// </summary>
        public static DocumentProtectionValues Forms => new("forms");
    
    }

    /// <summary>
    /// Defines the MailMergeDocumentValues enumeration.
    /// </summary>
    public readonly record struct MailMergeDocumentValues : IEnumValue, IEnumValueFactory<MailMergeDocumentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MailMergeDocumentValues enum instance
        /// </summary>
        public MailMergeDocumentValues(string value) => _value = value;
        MailMergeDocumentValues IEnumValueFactory<MailMergeDocumentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "catalog" => true,
            "envelopes" => true,
            "mailingLabels" => true,
            "formLetters" => true,
            "email" => true,
            "fax" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "catalog";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Catalog Source Document.
        /// <para>When the item is serialized out as xml, its value is "catalog".</para>
        /// </summary>
        public static MailMergeDocumentValues Catalog => new("catalog");
        /// <summary>
        /// Envelope Source Document.
        /// <para>When the item is serialized out as xml, its value is "envelopes".</para>
        /// </summary>
        public static MailMergeDocumentValues Envelope => new("envelopes");
        /// <summary>
        /// Mailing Label Source Document.
        /// <para>When the item is serialized out as xml, its value is "mailingLabels".</para>
        /// </summary>
        public static MailMergeDocumentValues MailingLabel => new("mailingLabels");
        /// <summary>
        /// Form Letter Source Document.
        /// <para>When the item is serialized out as xml, its value is "formLetters".</para>
        /// </summary>
        public static MailMergeDocumentValues FormLetter => new("formLetters");
        /// <summary>
        /// E-Mail Source Document.
        /// <para>When the item is serialized out as xml, its value is "email".</para>
        /// </summary>
        public static MailMergeDocumentValues Email => new("email");
        /// <summary>
        /// Fax Source Document.
        /// <para>When the item is serialized out as xml, its value is "fax".</para>
        /// </summary>
        public static MailMergeDocumentValues Fax => new("fax");
    
    }

    /// <summary>
    /// Defines the MailMergeDataValues enumeration.
    /// </summary>
    public readonly record struct MailMergeDataValues : IEnumValue, IEnumValueFactory<MailMergeDataValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MailMergeDataValues enum instance
        /// </summary>
        public MailMergeDataValues(string value) => _value = value;
        MailMergeDataValues IEnumValueFactory<MailMergeDataValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "textFile" => true,
            "database" => true,
            "spreadsheet" => true,
            "query" => true,
            "odbc" => true,
            "native" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "textFile";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Text File Data Source.
        /// <para>When the item is serialized out as xml, its value is "textFile".</para>
        /// </summary>
        public static MailMergeDataValues TextFile => new("textFile");
        /// <summary>
        /// Database Data Source.
        /// <para>When the item is serialized out as xml, its value is "database".</para>
        /// </summary>
        public static MailMergeDataValues Database => new("database");
        /// <summary>
        /// Spreadsheet Data Source.
        /// <para>When the item is serialized out as xml, its value is "spreadsheet".</para>
        /// </summary>
        public static MailMergeDataValues Spreadsheet => new("spreadsheet");
        /// <summary>
        /// Query Data Source.
        /// <para>When the item is serialized out as xml, its value is "query".</para>
        /// </summary>
        public static MailMergeDataValues Query => new("query");
        /// <summary>
        /// Open Database Connectivity Data Source.
        /// <para>When the item is serialized out as xml, its value is "odbc".</para>
        /// </summary>
        public static MailMergeDataValues Odbc => new("odbc");
        /// <summary>
        /// Office Data Source Object Data Source.
        /// <para>When the item is serialized out as xml, its value is "native".</para>
        /// </summary>
        public static MailMergeDataValues Native => new("native");
    
    }

    /// <summary>
    /// Defines the MailMergeDestinationValues enumeration.
    /// </summary>
    public readonly record struct MailMergeDestinationValues : IEnumValue, IEnumValueFactory<MailMergeDestinationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MailMergeDestinationValues enum instance
        /// </summary>
        public MailMergeDestinationValues(string value) => _value = value;
        MailMergeDestinationValues IEnumValueFactory<MailMergeDestinationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "newDocument" => true,
            "printer" => true,
            "email" => true,
            "fax" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "newDocument";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Send Merged Documents to New Documents.
        /// <para>When the item is serialized out as xml, its value is "newDocument".</para>
        /// </summary>
        public static MailMergeDestinationValues NewDocument => new("newDocument");
        /// <summary>
        /// Send Merged Documents to Printer.
        /// <para>When the item is serialized out as xml, its value is "printer".</para>
        /// </summary>
        public static MailMergeDestinationValues Printer => new("printer");
        /// <summary>
        /// Send Merged Documents as E-mail Messages.
        /// <para>When the item is serialized out as xml, its value is "email".</para>
        /// </summary>
        public static MailMergeDestinationValues Email => new("email");
        /// <summary>
        /// Send Merged Documents as Faxes.
        /// <para>When the item is serialized out as xml, its value is "fax".</para>
        /// </summary>
        public static MailMergeDestinationValues Fax => new("fax");
    
    }

    /// <summary>
    /// Defines the MailMergeOdsoFieldValues enumeration.
    /// </summary>
    public readonly record struct MailMergeOdsoFieldValues : IEnumValue, IEnumValueFactory<MailMergeOdsoFieldValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MailMergeOdsoFieldValues enum instance
        /// </summary>
        public MailMergeOdsoFieldValues(string value) => _value = value;
        MailMergeOdsoFieldValues IEnumValueFactory<MailMergeOdsoFieldValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "null" => true,
            "dbColumn" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "null";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Field Not Mapped.
        /// <para>When the item is serialized out as xml, its value is "null".</para>
        /// </summary>
        public static MailMergeOdsoFieldValues Null => new("null");
        /// <summary>
        /// Field Mapping to Data Source Column.
        /// <para>When the item is serialized out as xml, its value is "dbColumn".</para>
        /// </summary>
        public static MailMergeOdsoFieldValues DbColumn => new("dbColumn");
    
    }

    /// <summary>
    /// Defines the VerticalTextAlignmentValues enumeration.
    /// </summary>
    public readonly record struct VerticalTextAlignmentValues : IEnumValue, IEnumValueFactory<VerticalTextAlignmentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new VerticalTextAlignmentValues enum instance
        /// </summary>
        public VerticalTextAlignmentValues(string value) => _value = value;
        VerticalTextAlignmentValues IEnumValueFactory<VerticalTextAlignmentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "top" => true,
            "center" => true,
            "baseline" => true,
            "bottom" => true,
            "auto" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "top";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Align Text at Top.
        /// <para>When the item is serialized out as xml, its value is "top".</para>
        /// </summary>
        public static VerticalTextAlignmentValues Top => new("top");
        /// <summary>
        /// Align Text at Center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static VerticalTextAlignmentValues Center => new("center");
        /// <summary>
        /// Align Text at Baseline.
        /// <para>When the item is serialized out as xml, its value is "baseline".</para>
        /// </summary>
        public static VerticalTextAlignmentValues Baseline => new("baseline");
        /// <summary>
        /// Align Text at Bottom.
        /// <para>When the item is serialized out as xml, its value is "bottom".</para>
        /// </summary>
        public static VerticalTextAlignmentValues Bottom => new("bottom");
        /// <summary>
        /// Automatically Determine Alignment.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static VerticalTextAlignmentValues Auto => new("auto");
    
    }

    /// <summary>
    /// Defines the DisplacedByCustomXmlValues enumeration.
    /// </summary>
    public readonly record struct DisplacedByCustomXmlValues : IEnumValue, IEnumValueFactory<DisplacedByCustomXmlValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DisplacedByCustomXmlValues enum instance
        /// </summary>
        public DisplacedByCustomXmlValues(string value) => _value = value;
        DisplacedByCustomXmlValues IEnumValueFactory<DisplacedByCustomXmlValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "next" => true,
            "prev" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "next";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Displaced by Next Custom XML Markup Tag.
        /// <para>When the item is serialized out as xml, its value is "next".</para>
        /// </summary>
        public static DisplacedByCustomXmlValues Next => new("next");
        /// <summary>
        /// Displaced by Previous Custom XML Markup Tag.
        /// <para>When the item is serialized out as xml, its value is "prev".</para>
        /// </summary>
        public static DisplacedByCustomXmlValues Previous => new("prev");
    
    }

    /// <summary>
    /// Defines the VerticalMergeRevisionValues enumeration.
    /// </summary>
    public readonly record struct VerticalMergeRevisionValues : IEnumValue, IEnumValueFactory<VerticalMergeRevisionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new VerticalMergeRevisionValues enum instance
        /// </summary>
        public VerticalMergeRevisionValues(string value) => _value = value;
        VerticalMergeRevisionValues IEnumValueFactory<VerticalMergeRevisionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "cont" => true,
            "rest" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "cont";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Vertically Merged Cell.
        /// <para>When the item is serialized out as xml, its value is "cont".</para>
        /// </summary>
        public static VerticalMergeRevisionValues Continue => new("cont");
        /// <summary>
        /// Vertically Split Cell.
        /// <para>When the item is serialized out as xml, its value is "rest".</para>
        /// </summary>
        public static VerticalMergeRevisionValues Restart => new("rest");
    
    }

    /// <summary>
    /// Defines the TextBoxTightWrapValues enumeration.
    /// </summary>
    public readonly record struct TextBoxTightWrapValues : IEnumValue, IEnumValueFactory<TextBoxTightWrapValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TextBoxTightWrapValues enum instance
        /// </summary>
        public TextBoxTightWrapValues(string value) => _value = value;
        TextBoxTightWrapValues IEnumValueFactory<TextBoxTightWrapValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "allLines" => true,
            "firstAndLastLine" => true,
            "firstLineOnly" => true,
            "lastLineOnly" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Do Not Tight Wrap.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static TextBoxTightWrapValues None => new("none");
        /// <summary>
        /// Tight Wrap All Lines.
        /// <para>When the item is serialized out as xml, its value is "allLines".</para>
        /// </summary>
        public static TextBoxTightWrapValues AllLines => new("allLines");
        /// <summary>
        /// Tight Wrap First and Last Lines.
        /// <para>When the item is serialized out as xml, its value is "firstAndLastLine".</para>
        /// </summary>
        public static TextBoxTightWrapValues FirstAndLastLine => new("firstAndLastLine");
        /// <summary>
        /// Tight Wrap First Line.
        /// <para>When the item is serialized out as xml, its value is "firstLineOnly".</para>
        /// </summary>
        public static TextBoxTightWrapValues FirstLineOnly => new("firstLineOnly");
        /// <summary>
        /// Tight Wrap Last Line.
        /// <para>When the item is serialized out as xml, its value is "lastLineOnly".</para>
        /// </summary>
        public static TextBoxTightWrapValues LastLineOnly => new("lastLineOnly");
    
    }

    /// <summary>
    /// Defines the FieldCharValues enumeration.
    /// </summary>
    public readonly record struct FieldCharValues : IEnumValue, IEnumValueFactory<FieldCharValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FieldCharValues enum instance
        /// </summary>
        public FieldCharValues(string value) => _value = value;
        FieldCharValues IEnumValueFactory<FieldCharValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "begin" => true,
            "separate" => true,
            "end" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "begin";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Start Character.
        /// <para>When the item is serialized out as xml, its value is "begin".</para>
        /// </summary>
        public static FieldCharValues Begin => new("begin");
        /// <summary>
        /// Separator Character.
        /// <para>When the item is serialized out as xml, its value is "separate".</para>
        /// </summary>
        public static FieldCharValues Separate => new("separate");
        /// <summary>
        /// End Character.
        /// <para>When the item is serialized out as xml, its value is "end".</para>
        /// </summary>
        public static FieldCharValues End => new("end");
    
    }

    /// <summary>
    /// Defines the InfoTextValues enumeration.
    /// </summary>
    public readonly record struct InfoTextValues : IEnumValue, IEnumValueFactory<InfoTextValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new InfoTextValues enum instance
        /// </summary>
        public InfoTextValues(string value) => _value = value;
        InfoTextValues IEnumValueFactory<InfoTextValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "text" => true,
            "autoText" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "text";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Literal Text.
        /// <para>When the item is serialized out as xml, its value is "text".</para>
        /// </summary>
        public static InfoTextValues Text => new("text");
        /// <summary>
        /// Glossary Document Entry.
        /// <para>When the item is serialized out as xml, its value is "autoText".</para>
        /// </summary>
        public static InfoTextValues AutoText => new("autoText");
    
    }

    /// <summary>
    /// Defines the TextBoxFormFieldValues enumeration.
    /// </summary>
    public readonly record struct TextBoxFormFieldValues : IEnumValue, IEnumValueFactory<TextBoxFormFieldValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TextBoxFormFieldValues enum instance
        /// </summary>
        public TextBoxFormFieldValues(string value) => _value = value;
        TextBoxFormFieldValues IEnumValueFactory<TextBoxFormFieldValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "regular" => true,
            "number" => true,
            "date" => true,
            "currentTime" => true,
            "currentDate" => true,
            "calculated" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "regular";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Text Box.
        /// <para>When the item is serialized out as xml, its value is "regular".</para>
        /// </summary>
        public static TextBoxFormFieldValues Regular => new("regular");
        /// <summary>
        /// Number.
        /// <para>When the item is serialized out as xml, its value is "number".</para>
        /// </summary>
        public static TextBoxFormFieldValues Number => new("number");
        /// <summary>
        /// Date.
        /// <para>When the item is serialized out as xml, its value is "date".</para>
        /// </summary>
        public static TextBoxFormFieldValues Date => new("date");
        /// <summary>
        /// Current Time Display.
        /// <para>When the item is serialized out as xml, its value is "currentTime".</para>
        /// </summary>
        public static TextBoxFormFieldValues CurrentTime => new("currentTime");
        /// <summary>
        /// Current Date Display.
        /// <para>When the item is serialized out as xml, its value is "currentDate".</para>
        /// </summary>
        public static TextBoxFormFieldValues CurrentDate => new("currentDate");
        /// <summary>
        /// Field Calculation.
        /// <para>When the item is serialized out as xml, its value is "calculated".</para>
        /// </summary>
        public static TextBoxFormFieldValues Calculated => new("calculated");
    
    }

    /// <summary>
    /// Defines the SectionMarkValues enumeration.
    /// </summary>
    public readonly record struct SectionMarkValues : IEnumValue, IEnumValueFactory<SectionMarkValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new SectionMarkValues enum instance
        /// </summary>
        public SectionMarkValues(string value) => _value = value;
        SectionMarkValues IEnumValueFactory<SectionMarkValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "nextPage" => true,
            "nextColumn" => true,
            "continuous" => true,
            "evenPage" => true,
            "oddPage" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "nextPage";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Next Page Section Break.
        /// <para>When the item is serialized out as xml, its value is "nextPage".</para>
        /// </summary>
        public static SectionMarkValues NextPage => new("nextPage");
        /// <summary>
        /// Column Section Break.
        /// <para>When the item is serialized out as xml, its value is "nextColumn".</para>
        /// </summary>
        public static SectionMarkValues NextColumn => new("nextColumn");
        /// <summary>
        /// Continuous Section Break.
        /// <para>When the item is serialized out as xml, its value is "continuous".</para>
        /// </summary>
        public static SectionMarkValues Continuous => new("continuous");
        /// <summary>
        /// Even Page Section Break.
        /// <para>When the item is serialized out as xml, its value is "evenPage".</para>
        /// </summary>
        public static SectionMarkValues EvenPage => new("evenPage");
        /// <summary>
        /// Odd Page Section Break.
        /// <para>When the item is serialized out as xml, its value is "oddPage".</para>
        /// </summary>
        public static SectionMarkValues OddPage => new("oddPage");
    
    }

    /// <summary>
    /// Defines the PageOrientationValues enumeration.
    /// </summary>
    public readonly record struct PageOrientationValues : IEnumValue, IEnumValueFactory<PageOrientationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new PageOrientationValues enum instance
        /// </summary>
        public PageOrientationValues(string value) => _value = value;
        PageOrientationValues IEnumValueFactory<PageOrientationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "portrait" => true,
            "landscape" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "portrait";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Portrait Mode.
        /// <para>When the item is serialized out as xml, its value is "portrait".</para>
        /// </summary>
        public static PageOrientationValues Portrait => new("portrait");
        /// <summary>
        /// Landscape Mode.
        /// <para>When the item is serialized out as xml, its value is "landscape".</para>
        /// </summary>
        public static PageOrientationValues Landscape => new("landscape");
    
    }

    /// <summary>
    /// Defines the PageBorderZOrderValues enumeration.
    /// </summary>
    public readonly record struct PageBorderZOrderValues : IEnumValue, IEnumValueFactory<PageBorderZOrderValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new PageBorderZOrderValues enum instance
        /// </summary>
        public PageBorderZOrderValues(string value) => _value = value;
        PageBorderZOrderValues IEnumValueFactory<PageBorderZOrderValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "front" => true,
            "back" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "front";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Page Border Ahead of Text.
        /// <para>When the item is serialized out as xml, its value is "front".</para>
        /// </summary>
        public static PageBorderZOrderValues Front => new("front");
        /// <summary>
        /// Page Border Behind Text.
        /// <para>When the item is serialized out as xml, its value is "back".</para>
        /// </summary>
        public static PageBorderZOrderValues Back => new("back");
    
    }

    /// <summary>
    /// Defines the PageBorderDisplayValues enumeration.
    /// </summary>
    public readonly record struct PageBorderDisplayValues : IEnumValue, IEnumValueFactory<PageBorderDisplayValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new PageBorderDisplayValues enum instance
        /// </summary>
        public PageBorderDisplayValues(string value) => _value = value;
        PageBorderDisplayValues IEnumValueFactory<PageBorderDisplayValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "allPages" => true,
            "firstPage" => true,
            "notFirstPage" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "allPages";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Display Page Border on All Pages.
        /// <para>When the item is serialized out as xml, its value is "allPages".</para>
        /// </summary>
        public static PageBorderDisplayValues AllPages => new("allPages");
        /// <summary>
        /// Display Page Border on First Page.
        /// <para>When the item is serialized out as xml, its value is "firstPage".</para>
        /// </summary>
        public static PageBorderDisplayValues FirstPage => new("firstPage");
        /// <summary>
        /// Display Page Border on All Pages Except First.
        /// <para>When the item is serialized out as xml, its value is "notFirstPage".</para>
        /// </summary>
        public static PageBorderDisplayValues NotFirstPage => new("notFirstPage");
    
    }

    /// <summary>
    /// Defines the PageBorderOffsetValues enumeration.
    /// </summary>
    public readonly record struct PageBorderOffsetValues : IEnumValue, IEnumValueFactory<PageBorderOffsetValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new PageBorderOffsetValues enum instance
        /// </summary>
        public PageBorderOffsetValues(string value) => _value = value;
        PageBorderOffsetValues IEnumValueFactory<PageBorderOffsetValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "page" => true,
            "text" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "page";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Page Border Is Positioned Relative to Page Edges.
        /// <para>When the item is serialized out as xml, its value is "page".</para>
        /// </summary>
        public static PageBorderOffsetValues Page => new("page");
        /// <summary>
        /// Page Border Is Positioned Relative to Text Extents.
        /// <para>When the item is serialized out as xml, its value is "text".</para>
        /// </summary>
        public static PageBorderOffsetValues Text => new("text");
    
    }

    /// <summary>
    /// Defines the ChapterSeparatorValues enumeration.
    /// </summary>
    public readonly record struct ChapterSeparatorValues : IEnumValue, IEnumValueFactory<ChapterSeparatorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ChapterSeparatorValues enum instance
        /// </summary>
        public ChapterSeparatorValues(string value) => _value = value;
        ChapterSeparatorValues IEnumValueFactory<ChapterSeparatorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "hyphen" => true,
            "period" => true,
            "colon" => true,
            "emDash" => true,
            "enDash" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "hyphen";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Hyphen Chapter Separator.
        /// <para>When the item is serialized out as xml, its value is "hyphen".</para>
        /// </summary>
        public static ChapterSeparatorValues Hyphen => new("hyphen");
        /// <summary>
        /// Period Chapter Separator.
        /// <para>When the item is serialized out as xml, its value is "period".</para>
        /// </summary>
        public static ChapterSeparatorValues Period => new("period");
        /// <summary>
        /// Colon Chapter Separator.
        /// <para>When the item is serialized out as xml, its value is "colon".</para>
        /// </summary>
        public static ChapterSeparatorValues Colon => new("colon");
        /// <summary>
        /// Em Dash Chapter Separator.
        /// <para>When the item is serialized out as xml, its value is "emDash".</para>
        /// </summary>
        public static ChapterSeparatorValues EmDash => new("emDash");
        /// <summary>
        /// En Dash Chapter Separator.
        /// <para>When the item is serialized out as xml, its value is "enDash".</para>
        /// </summary>
        public static ChapterSeparatorValues EnDash => new("enDash");
    
    }

    /// <summary>
    /// Defines the LineNumberRestartValues enumeration.
    /// </summary>
    public readonly record struct LineNumberRestartValues : IEnumValue, IEnumValueFactory<LineNumberRestartValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new LineNumberRestartValues enum instance
        /// </summary>
        public LineNumberRestartValues(string value) => _value = value;
        LineNumberRestartValues IEnumValueFactory<LineNumberRestartValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "newPage" => true,
            "newSection" => true,
            "continuous" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "newPage";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Restart Line Numbering on Each Page.
        /// <para>When the item is serialized out as xml, its value is "newPage".</para>
        /// </summary>
        public static LineNumberRestartValues NewPage => new("newPage");
        /// <summary>
        /// Restart Line Numbering for Each Section.
        /// <para>When the item is serialized out as xml, its value is "newSection".</para>
        /// </summary>
        public static LineNumberRestartValues NewSection => new("newSection");
        /// <summary>
        /// Continue Line Numbering From Previous Section.
        /// <para>When the item is serialized out as xml, its value is "continuous".</para>
        /// </summary>
        public static LineNumberRestartValues Continuous => new("continuous");
    
    }

    /// <summary>
    /// Defines the VerticalJustificationValues enumeration.
    /// </summary>
    public readonly record struct VerticalJustificationValues : IEnumValue, IEnumValueFactory<VerticalJustificationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new VerticalJustificationValues enum instance
        /// </summary>
        public VerticalJustificationValues(string value) => _value = value;
        VerticalJustificationValues IEnumValueFactory<VerticalJustificationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "top" => true,
            "center" => true,
            "both" => true,
            "bottom" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "top";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Align Top.
        /// <para>When the item is serialized out as xml, its value is "top".</para>
        /// </summary>
        public static VerticalJustificationValues Top => new("top");
        /// <summary>
        /// Align Center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static VerticalJustificationValues Center => new("center");
        /// <summary>
        /// Vertical Justification.
        /// <para>When the item is serialized out as xml, its value is "both".</para>
        /// </summary>
        public static VerticalJustificationValues Both => new("both");
        /// <summary>
        /// Align Bottom.
        /// <para>When the item is serialized out as xml, its value is "bottom".</para>
        /// </summary>
        public static VerticalJustificationValues Bottom => new("bottom");
    
    }

    /// <summary>
    /// Defines the TableVerticalAlignmentValues enumeration.
    /// </summary>
    public readonly record struct TableVerticalAlignmentValues : IEnumValue, IEnumValueFactory<TableVerticalAlignmentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableVerticalAlignmentValues enum instance
        /// </summary>
        public TableVerticalAlignmentValues(string value) => _value = value;
        TableVerticalAlignmentValues IEnumValueFactory<TableVerticalAlignmentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "top" => true,
            "center" => true,
            "bottom" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "top";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// top.
        /// <para>When the item is serialized out as xml, its value is "top".</para>
        /// </summary>
        public static TableVerticalAlignmentValues Top => new("top");
        /// <summary>
        /// center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static TableVerticalAlignmentValues Center => new("center");
        /// <summary>
        /// bottom.
        /// <para>When the item is serialized out as xml, its value is "bottom".</para>
        /// </summary>
        public static TableVerticalAlignmentValues Bottom => new("bottom");
    
    }

    /// <summary>
    /// Defines the DocGridValues enumeration.
    /// </summary>
    public readonly record struct DocGridValues : IEnumValue, IEnumValueFactory<DocGridValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocGridValues enum instance
        /// </summary>
        public DocGridValues(string value) => _value = value;
        DocGridValues IEnumValueFactory<DocGridValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "default" => true,
            "lines" => true,
            "linesAndChars" => true,
            "snapToChars" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "default";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Document Grid.
        /// <para>When the item is serialized out as xml, its value is "default".</para>
        /// </summary>
        public static DocGridValues Default => new("default");
        /// <summary>
        /// Line Grid Only.
        /// <para>When the item is serialized out as xml, its value is "lines".</para>
        /// </summary>
        public static DocGridValues Lines => new("lines");
        /// <summary>
        /// Line and Character Grid.
        /// <para>When the item is serialized out as xml, its value is "linesAndChars".</para>
        /// </summary>
        public static DocGridValues LinesAndChars => new("linesAndChars");
        /// <summary>
        /// Character Grid Only.
        /// <para>When the item is serialized out as xml, its value is "snapToChars".</para>
        /// </summary>
        public static DocGridValues SnapToChars => new("snapToChars");
    
    }

    /// <summary>
    /// Defines the HeaderFooterValues enumeration.
    /// </summary>
    public readonly record struct HeaderFooterValues : IEnumValue, IEnumValueFactory<HeaderFooterValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new HeaderFooterValues enum instance
        /// </summary>
        public HeaderFooterValues(string value) => _value = value;
        HeaderFooterValues IEnumValueFactory<HeaderFooterValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "even" => true,
            "default" => true,
            "first" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "even";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Even Numbered Pages Only.
        /// <para>When the item is serialized out as xml, its value is "even".</para>
        /// </summary>
        public static HeaderFooterValues Even => new("even");
        /// <summary>
        /// Default Header or Footer.
        /// <para>When the item is serialized out as xml, its value is "default".</para>
        /// </summary>
        public static HeaderFooterValues Default => new("default");
        /// <summary>
        /// First Page Only.
        /// <para>When the item is serialized out as xml, its value is "first".</para>
        /// </summary>
        public static HeaderFooterValues First => new("first");
    
    }

    /// <summary>
    /// Defines the FootnoteEndnoteValues enumeration.
    /// </summary>
    public readonly record struct FootnoteEndnoteValues : IEnumValue, IEnumValueFactory<FootnoteEndnoteValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FootnoteEndnoteValues enum instance
        /// </summary>
        public FootnoteEndnoteValues(string value) => _value = value;
        FootnoteEndnoteValues IEnumValueFactory<FootnoteEndnoteValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "normal" => true,
            "separator" => true,
            "continuationSeparator" => true,
            "continuationNotice" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "normal";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Normal Footnote/Endnote.
        /// <para>When the item is serialized out as xml, its value is "normal".</para>
        /// </summary>
        public static FootnoteEndnoteValues Normal => new("normal");
        /// <summary>
        /// Separator.
        /// <para>When the item is serialized out as xml, its value is "separator".</para>
        /// </summary>
        public static FootnoteEndnoteValues Separator => new("separator");
        /// <summary>
        /// Continuation Separator.
        /// <para>When the item is serialized out as xml, its value is "continuationSeparator".</para>
        /// </summary>
        public static FootnoteEndnoteValues ContinuationSeparator => new("continuationSeparator");
        /// <summary>
        /// Continuation Notice Separator.
        /// <para>When the item is serialized out as xml, its value is "continuationNotice".</para>
        /// </summary>
        public static FootnoteEndnoteValues ContinuationNotice => new("continuationNotice");
    
    }

    /// <summary>
    /// Defines the BreakValues enumeration.
    /// </summary>
    public readonly record struct BreakValues : IEnumValue, IEnumValueFactory<BreakValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new BreakValues enum instance
        /// </summary>
        public BreakValues(string value) => _value = value;
        BreakValues IEnumValueFactory<BreakValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "page" => true,
            "column" => true,
            "textWrapping" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "page";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Page Break.
        /// <para>When the item is serialized out as xml, its value is "page".</para>
        /// </summary>
        public static BreakValues Page => new("page");
        /// <summary>
        /// Column Break.
        /// <para>When the item is serialized out as xml, its value is "column".</para>
        /// </summary>
        public static BreakValues Column => new("column");
        /// <summary>
        /// Line Break.
        /// <para>When the item is serialized out as xml, its value is "textWrapping".</para>
        /// </summary>
        public static BreakValues TextWrapping => new("textWrapping");
    
    }

    /// <summary>
    /// Defines the BreakTextRestartLocationValues enumeration.
    /// </summary>
    public readonly record struct BreakTextRestartLocationValues : IEnumValue, IEnumValueFactory<BreakTextRestartLocationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new BreakTextRestartLocationValues enum instance
        /// </summary>
        public BreakTextRestartLocationValues(string value) => _value = value;
        BreakTextRestartLocationValues IEnumValueFactory<BreakTextRestartLocationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "left" => true,
            "right" => true,
            "all" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Restart On Next Line.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static BreakTextRestartLocationValues None => new("none");
        /// <summary>
        /// Restart In Next Text Region When In Leftmost Position.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static BreakTextRestartLocationValues Left => new("left");
        /// <summary>
        /// Restart In Next Text Region When In Rightmost Position.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static BreakTextRestartLocationValues Right => new("right");
        /// <summary>
        /// Restart On Next Full Line.
        /// <para>When the item is serialized out as xml, its value is "all".</para>
        /// </summary>
        public static BreakTextRestartLocationValues All => new("all");
    
    }

    /// <summary>
    /// Defines the AbsolutePositionTabAlignmentValues enumeration.
    /// </summary>
    public readonly record struct AbsolutePositionTabAlignmentValues : IEnumValue, IEnumValueFactory<AbsolutePositionTabAlignmentValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new AbsolutePositionTabAlignmentValues enum instance
        /// </summary>
        public AbsolutePositionTabAlignmentValues(string value) => _value = value;
        AbsolutePositionTabAlignmentValues IEnumValueFactory<AbsolutePositionTabAlignmentValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "left" => true,
            "center" => true,
            "right" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "left";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Left.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static AbsolutePositionTabAlignmentValues Left => new("left");
        /// <summary>
        /// Center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static AbsolutePositionTabAlignmentValues Center => new("center");
        /// <summary>
        /// Right.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static AbsolutePositionTabAlignmentValues Right => new("right");
    
    }

    /// <summary>
    /// Defines the AbsolutePositionTabPositioningBaseValues enumeration.
    /// </summary>
    public readonly record struct AbsolutePositionTabPositioningBaseValues : IEnumValue, IEnumValueFactory<AbsolutePositionTabPositioningBaseValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new AbsolutePositionTabPositioningBaseValues enum instance
        /// </summary>
        public AbsolutePositionTabPositioningBaseValues(string value) => _value = value;
        AbsolutePositionTabPositioningBaseValues IEnumValueFactory<AbsolutePositionTabPositioningBaseValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "margin" => true,
            "indent" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "margin";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Relative To Text Margins.
        /// <para>When the item is serialized out as xml, its value is "margin".</para>
        /// </summary>
        public static AbsolutePositionTabPositioningBaseValues Margin => new("margin");
        /// <summary>
        /// Relative To Indents.
        /// <para>When the item is serialized out as xml, its value is "indent".</para>
        /// </summary>
        public static AbsolutePositionTabPositioningBaseValues Indent => new("indent");
    
    }

    /// <summary>
    /// Defines the AbsolutePositionTabLeaderCharValues enumeration.
    /// </summary>
    public readonly record struct AbsolutePositionTabLeaderCharValues : IEnumValue, IEnumValueFactory<AbsolutePositionTabLeaderCharValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new AbsolutePositionTabLeaderCharValues enum instance
        /// </summary>
        public AbsolutePositionTabLeaderCharValues(string value) => _value = value;
        AbsolutePositionTabLeaderCharValues IEnumValueFactory<AbsolutePositionTabLeaderCharValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "dot" => true,
            "hyphen" => true,
            "underscore" => true,
            "middleDot" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Leader Character.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static AbsolutePositionTabLeaderCharValues None => new("none");
        /// <summary>
        /// Dot Leader Character.
        /// <para>When the item is serialized out as xml, its value is "dot".</para>
        /// </summary>
        public static AbsolutePositionTabLeaderCharValues Dot => new("dot");
        /// <summary>
        /// Hyphen Leader Character.
        /// <para>When the item is serialized out as xml, its value is "hyphen".</para>
        /// </summary>
        public static AbsolutePositionTabLeaderCharValues Hyphen => new("hyphen");
        /// <summary>
        /// Underscore Leader Character.
        /// <para>When the item is serialized out as xml, its value is "underscore".</para>
        /// </summary>
        public static AbsolutePositionTabLeaderCharValues Underscore => new("underscore");
        /// <summary>
        /// Centered Dot Leader Character.
        /// <para>When the item is serialized out as xml, its value is "middleDot".</para>
        /// </summary>
        public static AbsolutePositionTabLeaderCharValues MiddleDot => new("middleDot");
    
    }

    /// <summary>
    /// Defines the ProofingErrorValues enumeration.
    /// </summary>
    public readonly record struct ProofingErrorValues : IEnumValue, IEnumValueFactory<ProofingErrorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ProofingErrorValues enum instance
        /// </summary>
        public ProofingErrorValues(string value) => _value = value;
        ProofingErrorValues IEnumValueFactory<ProofingErrorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "spellStart" => true,
            "spellEnd" => true,
            "gramStart" => true,
            "gramEnd" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "spellStart";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Start of Region Marked as Spelling Error.
        /// <para>When the item is serialized out as xml, its value is "spellStart".</para>
        /// </summary>
        public static ProofingErrorValues SpellStart => new("spellStart");
        /// <summary>
        /// End of Region Marked as Spelling Error.
        /// <para>When the item is serialized out as xml, its value is "spellEnd".</para>
        /// </summary>
        public static ProofingErrorValues SpellEnd => new("spellEnd");
        /// <summary>
        /// Start of Region Marked as Grammatical Error.
        /// <para>When the item is serialized out as xml, its value is "gramStart".</para>
        /// </summary>
        public static ProofingErrorValues GrammarStart => new("gramStart");
        /// <summary>
        /// End of Region Marked as Grammatical Error.
        /// <para>When the item is serialized out as xml, its value is "gramEnd".</para>
        /// </summary>
        public static ProofingErrorValues GrammarEnd => new("gramEnd");
    
    }

    /// <summary>
    /// Defines the RangePermissionEditingGroupValues enumeration.
    /// </summary>
    public readonly record struct RangePermissionEditingGroupValues : IEnumValue, IEnumValueFactory<RangePermissionEditingGroupValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new RangePermissionEditingGroupValues enum instance
        /// </summary>
        public RangePermissionEditingGroupValues(string value) => _value = value;
        RangePermissionEditingGroupValues IEnumValueFactory<RangePermissionEditingGroupValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "everyone" => true,
            "administrators" => true,
            "contributors" => true,
            "editors" => true,
            "owners" => true,
            "current" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Users Have Editing Permissions.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues None => new("none");
        /// <summary>
        /// All Users Have Editing Permissions.
        /// <para>When the item is serialized out as xml, its value is "everyone".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues Everyone => new("everyone");
        /// <summary>
        /// Administrator Group.
        /// <para>When the item is serialized out as xml, its value is "administrators".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues Administrators => new("administrators");
        /// <summary>
        /// Contributors Group.
        /// <para>When the item is serialized out as xml, its value is "contributors".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues Contributors => new("contributors");
        /// <summary>
        /// Editors Group.
        /// <para>When the item is serialized out as xml, its value is "editors".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues Editors => new("editors");
        /// <summary>
        /// Owners Group.
        /// <para>When the item is serialized out as xml, its value is "owners".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues Owners => new("owners");
        /// <summary>
        /// Current Group.
        /// <para>When the item is serialized out as xml, its value is "current".</para>
        /// </summary>
        public static RangePermissionEditingGroupValues Current => new("current");
    
    }

    /// <summary>
    /// Defines the FontTypeHintValues enumeration.
    /// </summary>
    public readonly record struct FontTypeHintValues : IEnumValue, IEnumValueFactory<FontTypeHintValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FontTypeHintValues enum instance
        /// </summary>
        public FontTypeHintValues(string value) => _value = value;
        FontTypeHintValues IEnumValueFactory<FontTypeHintValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "default" => true,
            "eastAsia" => true,
            "cs" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "default";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// High ANSI Font.
        /// <para>When the item is serialized out as xml, its value is "default".</para>
        /// </summary>
        public static FontTypeHintValues Default => new("default");
        /// <summary>
        /// East Asian Font.
        /// <para>When the item is serialized out as xml, its value is "eastAsia".</para>
        /// </summary>
        public static FontTypeHintValues EastAsia => new("eastAsia");
        /// <summary>
        /// Complex Script Font.
        /// <para>When the item is serialized out as xml, its value is "cs".</para>
        /// </summary>
        public static FontTypeHintValues ComplexScript => new("cs");
    
    }

    /// <summary>
    /// Defines the ThemeFontValues enumeration.
    /// </summary>
    public readonly record struct ThemeFontValues : IEnumValue, IEnumValueFactory<ThemeFontValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ThemeFontValues enum instance
        /// </summary>
        public ThemeFontValues(string value) => _value = value;
        ThemeFontValues IEnumValueFactory<ThemeFontValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "majorEastAsia" => true,
            "majorBidi" => true,
            "majorAscii" => true,
            "majorHAnsi" => true,
            "minorEastAsia" => true,
            "minorBidi" => true,
            "minorAscii" => true,
            "minorHAnsi" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "majorEastAsia";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Major East Asian Theme Font.
        /// <para>When the item is serialized out as xml, its value is "majorEastAsia".</para>
        /// </summary>
        public static ThemeFontValues MajorEastAsia => new("majorEastAsia");
        /// <summary>
        /// Major Complex Script Theme Font.
        /// <para>When the item is serialized out as xml, its value is "majorBidi".</para>
        /// </summary>
        public static ThemeFontValues MajorBidi => new("majorBidi");
        /// <summary>
        /// Major ASCII Theme Font.
        /// <para>When the item is serialized out as xml, its value is "majorAscii".</para>
        /// </summary>
        public static ThemeFontValues MajorAscii => new("majorAscii");
        /// <summary>
        /// Major High ANSI Theme Font.
        /// <para>When the item is serialized out as xml, its value is "majorHAnsi".</para>
        /// </summary>
        public static ThemeFontValues MajorHighAnsi => new("majorHAnsi");
        /// <summary>
        /// Minor East Asian Theme Font.
        /// <para>When the item is serialized out as xml, its value is "minorEastAsia".</para>
        /// </summary>
        public static ThemeFontValues MinorEastAsia => new("minorEastAsia");
        /// <summary>
        /// Minor Complex Script Theme Font.
        /// <para>When the item is serialized out as xml, its value is "minorBidi".</para>
        /// </summary>
        public static ThemeFontValues MinorBidi => new("minorBidi");
        /// <summary>
        /// Minor ASCII Theme Font.
        /// <para>When the item is serialized out as xml, its value is "minorAscii".</para>
        /// </summary>
        public static ThemeFontValues MinorAscii => new("minorAscii");
        /// <summary>
        /// Minor High ANSI Theme Font.
        /// <para>When the item is serialized out as xml, its value is "minorHAnsi".</para>
        /// </summary>
        public static ThemeFontValues MinorHighAnsi => new("minorHAnsi");
    
    }

    /// <summary>
    /// Defines the RubyAlignValues enumeration.
    /// </summary>
    public readonly record struct RubyAlignValues : IEnumValue, IEnumValueFactory<RubyAlignValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new RubyAlignValues enum instance
        /// </summary>
        public RubyAlignValues(string value) => _value = value;
        RubyAlignValues IEnumValueFactory<RubyAlignValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "center" => true,
            "distributeLetter" => true,
            "distributeSpace" => true,
            "left" => true,
            "right" => true,
            "rightVertical" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "center";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static RubyAlignValues Center => new("center");
        /// <summary>
        /// Distribute All Characters.
        /// <para>When the item is serialized out as xml, its value is "distributeLetter".</para>
        /// </summary>
        public static RubyAlignValues DistributeLetter => new("distributeLetter");
        /// <summary>
        /// Distribute all Characters w/ Additional Space On Either Side.
        /// <para>When the item is serialized out as xml, its value is "distributeSpace".</para>
        /// </summary>
        public static RubyAlignValues DistributeSpace => new("distributeSpace");
        /// <summary>
        /// Left Aligned.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static RubyAlignValues Left => new("left");
        /// <summary>
        /// Right Aligned.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static RubyAlignValues Right => new("right");
        /// <summary>
        /// Vertically Aligned to Right of Base Text.
        /// <para>When the item is serialized out as xml, its value is "rightVertical".</para>
        /// </summary>
        public static RubyAlignValues RightVertical => new("rightVertical");
    
    }

    /// <summary>
    /// Defines the LockingValues enumeration.
    /// </summary>
    public readonly record struct LockingValues : IEnumValue, IEnumValueFactory<LockingValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new LockingValues enum instance
        /// </summary>
        public LockingValues(string value) => _value = value;
        LockingValues IEnumValueFactory<LockingValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "sdtLocked" => true,
            "contentLocked" => true,
            "unlocked" => true,
            "sdtContentLocked" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "sdtLocked";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// SDT Cannot Be Deleted.
        /// <para>When the item is serialized out as xml, its value is "sdtLocked".</para>
        /// </summary>
        public static LockingValues SdtLocked => new("sdtLocked");
        /// <summary>
        /// Contents Cannot Be Edited At Runtime.
        /// <para>When the item is serialized out as xml, its value is "contentLocked".</para>
        /// </summary>
        public static LockingValues ContentLocked => new("contentLocked");
        /// <summary>
        /// No Locking.
        /// <para>When the item is serialized out as xml, its value is "unlocked".</para>
        /// </summary>
        public static LockingValues Unlocked => new("unlocked");
        /// <summary>
        /// Contents Cannot Be Edited At Runtime And SDT Cannot Be Deleted.
        /// <para>When the item is serialized out as xml, its value is "sdtContentLocked".</para>
        /// </summary>
        public static LockingValues SdtContentLocked => new("sdtContentLocked");
    
    }

    /// <summary>
    /// Defines the DateFormatValues enumeration.
    /// </summary>
    public readonly record struct DateFormatValues : IEnumValue, IEnumValueFactory<DateFormatValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DateFormatValues enum instance
        /// </summary>
        public DateFormatValues(string value) => _value = value;
        DateFormatValues IEnumValueFactory<DateFormatValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "text" => true,
            "date" => true,
            "dateTime" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "text";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Same As Display.
        /// <para>When the item is serialized out as xml, its value is "text".</para>
        /// </summary>
        public static DateFormatValues Text => new("text");
        /// <summary>
        /// XML Schema Date Format.
        /// <para>When the item is serialized out as xml, its value is "date".</para>
        /// </summary>
        public static DateFormatValues Date => new("date");
        /// <summary>
        /// XML Schema DateTime Format.
        /// <para>When the item is serialized out as xml, its value is "dateTime".</para>
        /// </summary>
        public static DateFormatValues DateTime => new("dateTime");
    
    }

    /// <summary>
    /// Defines the TableWidthUnitValues enumeration.
    /// </summary>
    public readonly record struct TableWidthUnitValues : IEnumValue, IEnumValueFactory<TableWidthUnitValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableWidthUnitValues enum instance
        /// </summary>
        public TableWidthUnitValues(string value) => _value = value;
        TableWidthUnitValues IEnumValueFactory<TableWidthUnitValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "nil" => true,
            "pct" => true,
            "dxa" => true,
            "auto" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "nil";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Width.
        /// <para>When the item is serialized out as xml, its value is "nil".</para>
        /// </summary>
        public static TableWidthUnitValues Nil => new("nil");
        /// <summary>
        /// Width in Fiftieths of a Percent.
        /// <para>When the item is serialized out as xml, its value is "pct".</para>
        /// </summary>
        public static TableWidthUnitValues Pct => new("pct");
        /// <summary>
        /// Width in Twentieths of a Point.
        /// <para>When the item is serialized out as xml, its value is "dxa".</para>
        /// </summary>
        public static TableWidthUnitValues Dxa => new("dxa");
        /// <summary>
        /// Automatically Determined Width.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static TableWidthUnitValues Auto => new("auto");
    
    }

    /// <summary>
    /// Defines the TableWidthValues enumeration.
    /// </summary>
    public readonly record struct TableWidthValues : IEnumValue, IEnumValueFactory<TableWidthValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableWidthValues enum instance
        /// </summary>
        public TableWidthValues(string value) => _value = value;
        TableWidthValues IEnumValueFactory<TableWidthValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "nil" => true,
            "dxa" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "nil";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// nil.
        /// <para>When the item is serialized out as xml, its value is "nil".</para>
        /// </summary>
        public static TableWidthValues Nil => new("nil");
        /// <summary>
        /// dxa.
        /// <para>When the item is serialized out as xml, its value is "dxa".</para>
        /// </summary>
        public static TableWidthValues Dxa => new("dxa");
    
    }

    /// <summary>
    /// Defines the MergedCellValues enumeration.
    /// </summary>
    public readonly record struct MergedCellValues : IEnumValue, IEnumValueFactory<MergedCellValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MergedCellValues enum instance
        /// </summary>
        public MergedCellValues(string value) => _value = value;
        MergedCellValues IEnumValueFactory<MergedCellValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "continue" => true,
            "restart" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "continue";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Continue Merged Region.
        /// <para>When the item is serialized out as xml, its value is "continue".</para>
        /// </summary>
        public static MergedCellValues Continue => new("continue");
        /// <summary>
        /// Start/Restart Merged Region.
        /// <para>When the item is serialized out as xml, its value is "restart".</para>
        /// </summary>
        public static MergedCellValues Restart => new("restart");
    
    }

    /// <summary>
    /// Defines the TableLayoutValues enumeration.
    /// </summary>
    public readonly record struct TableLayoutValues : IEnumValue, IEnumValueFactory<TableLayoutValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableLayoutValues enum instance
        /// </summary>
        public TableLayoutValues(string value) => _value = value;
        TableLayoutValues IEnumValueFactory<TableLayoutValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "fixed" => true,
            "autofit" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "fixed";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Fixed Width Table Layout.
        /// <para>When the item is serialized out as xml, its value is "fixed".</para>
        /// </summary>
        public static TableLayoutValues Fixed => new("fixed");
        /// <summary>
        /// AutoFit Table Layout.
        /// <para>When the item is serialized out as xml, its value is "autofit".</para>
        /// </summary>
        public static TableLayoutValues Autofit => new("autofit");
    
    }

    /// <summary>
    /// Defines the TableOverlapValues enumeration.
    /// </summary>
    public readonly record struct TableOverlapValues : IEnumValue, IEnumValueFactory<TableOverlapValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableOverlapValues enum instance
        /// </summary>
        public TableOverlapValues(string value) => _value = value;
        TableOverlapValues IEnumValueFactory<TableOverlapValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "never" => true,
            "overlap" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "never";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Floating Table Cannot Overlap.
        /// <para>When the item is serialized out as xml, its value is "never".</para>
        /// </summary>
        public static TableOverlapValues Never => new("never");
        /// <summary>
        /// Floating Table Can Overlap.
        /// <para>When the item is serialized out as xml, its value is "overlap".</para>
        /// </summary>
        public static TableOverlapValues Overlap => new("overlap");
    
    }

    /// <summary>
    /// Defines the FootnotePositionValues enumeration.
    /// </summary>
    public readonly record struct FootnotePositionValues : IEnumValue, IEnumValueFactory<FootnotePositionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FootnotePositionValues enum instance
        /// </summary>
        public FootnotePositionValues(string value) => _value = value;
        FootnotePositionValues IEnumValueFactory<FootnotePositionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "pageBottom" => true,
            "beneathText" => true,
            "sectEnd" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "pageBottom";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Footnotes Positioned at Page Bottom.
        /// <para>When the item is serialized out as xml, its value is "pageBottom".</para>
        /// </summary>
        public static FootnotePositionValues PageBottom => new("pageBottom");
        /// <summary>
        /// Footnotes Positioned Beneath Text.
        /// <para>When the item is serialized out as xml, its value is "beneathText".</para>
        /// </summary>
        public static FootnotePositionValues BeneathText => new("beneathText");
        /// <summary>
        /// Footnotes Positioned At End of Section.
        /// <para>When the item is serialized out as xml, its value is "sectEnd".</para>
        /// </summary>
        public static FootnotePositionValues SectionEnd => new("sectEnd");
    
    }

    /// <summary>
    /// Defines the EndnotePositionValues enumeration.
    /// </summary>
    public readonly record struct EndnotePositionValues : IEnumValue, IEnumValueFactory<EndnotePositionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new EndnotePositionValues enum instance
        /// </summary>
        public EndnotePositionValues(string value) => _value = value;
        EndnotePositionValues IEnumValueFactory<EndnotePositionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "sectEnd" => true,
            "docEnd" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "sectEnd";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Endnotes Positioned at End of Section.
        /// <para>When the item is serialized out as xml, its value is "sectEnd".</para>
        /// </summary>
        public static EndnotePositionValues SectionEnd => new("sectEnd");
        /// <summary>
        /// Endnotes Positioned at End of Document.
        /// <para>When the item is serialized out as xml, its value is "docEnd".</para>
        /// </summary>
        public static EndnotePositionValues DocumentEnd => new("docEnd");
    
    }

    /// <summary>
    /// Defines the RestartNumberValues enumeration.
    /// </summary>
    public readonly record struct RestartNumberValues : IEnumValue, IEnumValueFactory<RestartNumberValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new RestartNumberValues enum instance
        /// </summary>
        public RestartNumberValues(string value) => _value = value;
        RestartNumberValues IEnumValueFactory<RestartNumberValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "continuous" => true,
            "eachSect" => true,
            "eachPage" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "continuous";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Continue Numbering From Previous Section.
        /// <para>When the item is serialized out as xml, its value is "continuous".</para>
        /// </summary>
        public static RestartNumberValues Continuous => new("continuous");
        /// <summary>
        /// Restart Numbering For Each Section.
        /// <para>When the item is serialized out as xml, its value is "eachSect".</para>
        /// </summary>
        public static RestartNumberValues EachSection => new("eachSect");
        /// <summary>
        /// Restart Numbering On Each Page.
        /// <para>When the item is serialized out as xml, its value is "eachPage".</para>
        /// </summary>
        public static RestartNumberValues EachPage => new("eachPage");
    
    }

    /// <summary>
    /// Defines the MailMergeSourceValues enumeration.
    /// </summary>
    public readonly record struct MailMergeSourceValues : IEnumValue, IEnumValueFactory<MailMergeSourceValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MailMergeSourceValues enum instance
        /// </summary>
        public MailMergeSourceValues(string value) => _value = value;
        MailMergeSourceValues IEnumValueFactory<MailMergeSourceValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "database" => true,
            "addressBook" => true,
            "document1" => true,
            "document2" => true,
            "text" => true,
            "email" => true,
            "native" => true,
            "legacy" => true,
            "master" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "database";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Database Data Source.
        /// <para>When the item is serialized out as xml, its value is "database".</para>
        /// </summary>
        public static MailMergeSourceValues Database => new("database");
        /// <summary>
        /// Address Book Data Source.
        /// <para>When the item is serialized out as xml, its value is "addressBook".</para>
        /// </summary>
        public static MailMergeSourceValues AddressBook => new("addressBook");
        /// <summary>
        /// Alternate Document Format Data Source.
        /// <para>When the item is serialized out as xml, its value is "document1".</para>
        /// </summary>
        public static MailMergeSourceValues Document1 => new("document1");
        /// <summary>
        /// Alternate Document Format Data Source Two.
        /// <para>When the item is serialized out as xml, its value is "document2".</para>
        /// </summary>
        public static MailMergeSourceValues Document2 => new("document2");
        /// <summary>
        /// Text File Data Source.
        /// <para>When the item is serialized out as xml, its value is "text".</para>
        /// </summary>
        public static MailMergeSourceValues Text => new("text");
        /// <summary>
        /// E-Mail Program Data Source.
        /// <para>When the item is serialized out as xml, its value is "email".</para>
        /// </summary>
        public static MailMergeSourceValues Email => new("email");
        /// <summary>
        /// Native Data Source.
        /// <para>When the item is serialized out as xml, its value is "native".</para>
        /// </summary>
        public static MailMergeSourceValues Native => new("native");
        /// <summary>
        /// Legacy Document Format Data Source.
        /// <para>When the item is serialized out as xml, its value is "legacy".</para>
        /// </summary>
        public static MailMergeSourceValues Legacy => new("legacy");
        /// <summary>
        /// Aggregate Data Source.
        /// <para>When the item is serialized out as xml, its value is "master".</para>
        /// </summary>
        public static MailMergeSourceValues Master => new("master");
    
    }

    /// <summary>
    /// Defines the TargetScreenSizeValues enumeration.
    /// </summary>
    public readonly record struct TargetScreenSizeValues : IEnumValue, IEnumValueFactory<TargetScreenSizeValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TargetScreenSizeValues enum instance
        /// </summary>
        public TargetScreenSizeValues(string value) => _value = value;
        TargetScreenSizeValues IEnumValueFactory<TargetScreenSizeValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "544x376" => true,
            "640x480" => true,
            "720x512" => true,
            "800x600" => true,
            "1024x768" => true,
            "1152x882" => true,
            "1152x900" => true,
            "1280x1024" => true,
            "1600x1200" => true,
            "1800x1440" => true,
            "1920x1200" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "544x376";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Optimize for 544x376.
        /// <para>When the item is serialized out as xml, its value is "544x376".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz544x376 => new("544x376");
        /// <summary>
        /// Optimize for 640x480.
        /// <para>When the item is serialized out as xml, its value is "640x480".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz640x480 => new("640x480");
        /// <summary>
        /// Optimize for 720x512.
        /// <para>When the item is serialized out as xml, its value is "720x512".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz720x512 => new("720x512");
        /// <summary>
        /// Optimize for 800x600.
        /// <para>When the item is serialized out as xml, its value is "800x600".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz800x600 => new("800x600");
        /// <summary>
        /// Optimize for 1024x768.
        /// <para>When the item is serialized out as xml, its value is "1024x768".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1024x768 => new("1024x768");
        /// <summary>
        /// Optimize for 1152x882.
        /// <para>When the item is serialized out as xml, its value is "1152x882".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1152x882 => new("1152x882");
        /// <summary>
        /// Optimize for 1152x900.
        /// <para>When the item is serialized out as xml, its value is "1152x900".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1152x900 => new("1152x900");
        /// <summary>
        /// Optimize for 1280x1024.
        /// <para>When the item is serialized out as xml, its value is "1280x1024".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1280x1024 => new("1280x1024");
        /// <summary>
        /// Optimize for 1600x1200.
        /// <para>When the item is serialized out as xml, its value is "1600x1200".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1600x1200 => new("1600x1200");
        /// <summary>
        /// Optimize for 1800x1440.
        /// <para>When the item is serialized out as xml, its value is "1800x1440".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1800x1440 => new("1800x1440");
        /// <summary>
        /// Optimize for 1920x1200.
        /// <para>When the item is serialized out as xml, its value is "1920x1200".</para>
        /// </summary>
        public static TargetScreenSizeValues Sz1920x1200 => new("1920x1200");
    
    }

    /// <summary>
    /// Defines the CharacterSpacingValues enumeration.
    /// </summary>
    public readonly record struct CharacterSpacingValues : IEnumValue, IEnumValueFactory<CharacterSpacingValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CharacterSpacingValues enum instance
        /// </summary>
        public CharacterSpacingValues(string value) => _value = value;
        CharacterSpacingValues IEnumValueFactory<CharacterSpacingValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "doNotCompress" => true,
            "compressPunctuation" => true,
            "compressPunctuationAndJapaneseKana" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "doNotCompress";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Do Not Compress Whitespace.
        /// <para>When the item is serialized out as xml, its value is "doNotCompress".</para>
        /// </summary>
        public static CharacterSpacingValues DoNotCompress => new("doNotCompress");
        /// <summary>
        /// Compress Whitespace From Punctuation Characters.
        /// <para>When the item is serialized out as xml, its value is "compressPunctuation".</para>
        /// </summary>
        public static CharacterSpacingValues CompressPunctuation => new("compressPunctuation");
        /// <summary>
        /// Compress Whitespace From Both Japanese Kana And Punctuation Characters.
        /// <para>When the item is serialized out as xml, its value is "compressPunctuationAndJapaneseKana".</para>
        /// </summary>
        public static CharacterSpacingValues CompressPunctuationAndJapaneseKana => new("compressPunctuationAndJapaneseKana");
    
    }

    /// <summary>
    /// Defines the ColorSchemeIndexValues enumeration.
    /// </summary>
    public readonly record struct ColorSchemeIndexValues : IEnumValue, IEnumValueFactory<ColorSchemeIndexValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ColorSchemeIndexValues enum instance
        /// </summary>
        public ColorSchemeIndexValues(string value) => _value = value;
        ColorSchemeIndexValues IEnumValueFactory<ColorSchemeIndexValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "dark1" => true,
            "light1" => true,
            "dark2" => true,
            "light2" => true,
            "accent1" => true,
            "accent2" => true,
            "accent3" => true,
            "accent4" => true,
            "accent5" => true,
            "accent6" => true,
            "hyperlink" => true,
            "followedHyperlink" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "dark1";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Dark 1 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "dark1".</para>
        /// </summary>
        public static ColorSchemeIndexValues Dark1 => new("dark1");
        /// <summary>
        /// Light 1 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "light1".</para>
        /// </summary>
        public static ColorSchemeIndexValues Light1 => new("light1");
        /// <summary>
        /// Dark 2 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "dark2".</para>
        /// </summary>
        public static ColorSchemeIndexValues Dark2 => new("dark2");
        /// <summary>
        /// Light 2 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "light2".</para>
        /// </summary>
        public static ColorSchemeIndexValues Light2 => new("light2");
        /// <summary>
        /// Accent 1 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "accent1".</para>
        /// </summary>
        public static ColorSchemeIndexValues Accent1 => new("accent1");
        /// <summary>
        /// Accent 2 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "accent2".</para>
        /// </summary>
        public static ColorSchemeIndexValues Accent2 => new("accent2");
        /// <summary>
        /// Accent 3 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "accent3".</para>
        /// </summary>
        public static ColorSchemeIndexValues Accent3 => new("accent3");
        /// <summary>
        /// Accent4 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "accent4".</para>
        /// </summary>
        public static ColorSchemeIndexValues Accent4 => new("accent4");
        /// <summary>
        /// Accent5 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "accent5".</para>
        /// </summary>
        public static ColorSchemeIndexValues Accent5 => new("accent5");
        /// <summary>
        /// Accent 6 Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "accent6".</para>
        /// </summary>
        public static ColorSchemeIndexValues Accent6 => new("accent6");
        /// <summary>
        /// Hyperlink Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "hyperlink".</para>
        /// </summary>
        public static ColorSchemeIndexValues Hyperlink => new("hyperlink");
        /// <summary>
        /// Followed Hyperlink Theme Color Reference.
        /// <para>When the item is serialized out as xml, its value is "followedHyperlink".</para>
        /// </summary>
        public static ColorSchemeIndexValues FollowedHyperlink => new("followedHyperlink");
    
    }

    /// <summary>
    /// Defines the FrameScrollbarVisibilityValues enumeration.
    /// </summary>
    public readonly record struct FrameScrollbarVisibilityValues : IEnumValue, IEnumValueFactory<FrameScrollbarVisibilityValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FrameScrollbarVisibilityValues enum instance
        /// </summary>
        public FrameScrollbarVisibilityValues(string value) => _value = value;
        FrameScrollbarVisibilityValues IEnumValueFactory<FrameScrollbarVisibilityValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "on" => true,
            "off" => true,
            "auto" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "on";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Always Show Scrollbar.
        /// <para>When the item is serialized out as xml, its value is "on".</para>
        /// </summary>
        public static FrameScrollbarVisibilityValues On => new("on");
        /// <summary>
        /// Never Show Scrollbar.
        /// <para>When the item is serialized out as xml, its value is "off".</para>
        /// </summary>
        public static FrameScrollbarVisibilityValues Off => new("off");
        /// <summary>
        /// Automatically Show Scrollbar As Needed.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static FrameScrollbarVisibilityValues Auto => new("auto");
    
    }

    /// <summary>
    /// Defines the FrameLayoutValues enumeration.
    /// </summary>
    public readonly record struct FrameLayoutValues : IEnumValue, IEnumValueFactory<FrameLayoutValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FrameLayoutValues enum instance
        /// </summary>
        public FrameLayoutValues(string value) => _value = value;
        FrameLayoutValues IEnumValueFactory<FrameLayoutValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "rows" => true,
            "cols" => true,
            "none" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "rows";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Stack Frames Vertically.
        /// <para>When the item is serialized out as xml, its value is "rows".</para>
        /// </summary>
        public static FrameLayoutValues Rows => new("rows");
        /// <summary>
        /// Stack Frames Horizontally.
        /// <para>When the item is serialized out as xml, its value is "cols".</para>
        /// </summary>
        public static FrameLayoutValues Columns => new("cols");
        /// <summary>
        /// Do Not Stack Frames.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static FrameLayoutValues None => new("none");
    
    }

    /// <summary>
    /// Defines the LevelSuffixValues enumeration.
    /// </summary>
    public readonly record struct LevelSuffixValues : IEnumValue, IEnumValueFactory<LevelSuffixValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new LevelSuffixValues enum instance
        /// </summary>
        public LevelSuffixValues(string value) => _value = value;
        LevelSuffixValues IEnumValueFactory<LevelSuffixValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "tab" => true,
            "space" => true,
            "nothing" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "tab";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Tab Between Numbering and Text.
        /// <para>When the item is serialized out as xml, its value is "tab".</para>
        /// </summary>
        public static LevelSuffixValues Tab => new("tab");
        /// <summary>
        /// Space Between Numbering and Text.
        /// <para>When the item is serialized out as xml, its value is "space".</para>
        /// </summary>
        public static LevelSuffixValues Space => new("space");
        /// <summary>
        /// Nothing Between Numbering and Text.
        /// <para>When the item is serialized out as xml, its value is "nothing".</para>
        /// </summary>
        public static LevelSuffixValues Nothing => new("nothing");
    
    }

    /// <summary>
    /// Defines the MultiLevelValues enumeration.
    /// </summary>
    public readonly record struct MultiLevelValues : IEnumValue, IEnumValueFactory<MultiLevelValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new MultiLevelValues enum instance
        /// </summary>
        public MultiLevelValues(string value) => _value = value;
        MultiLevelValues IEnumValueFactory<MultiLevelValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "singleLevel" => true,
            "multilevel" => true,
            "hybridMultilevel" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "singleLevel";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Single Level Numbering Definition.
        /// <para>When the item is serialized out as xml, its value is "singleLevel".</para>
        /// </summary>
        public static MultiLevelValues SingleLevel => new("singleLevel");
        /// <summary>
        /// Multilevel Numbering Definition.
        /// <para>When the item is serialized out as xml, its value is "multilevel".</para>
        /// </summary>
        public static MultiLevelValues Multilevel => new("multilevel");
        /// <summary>
        /// Hybrid Multilevel Numbering Definition.
        /// <para>When the item is serialized out as xml, its value is "hybridMultilevel".</para>
        /// </summary>
        public static MultiLevelValues HybridMultilevel => new("hybridMultilevel");
    
    }

    /// <summary>
    /// Defines the TableStyleOverrideValues enumeration.
    /// </summary>
    public readonly record struct TableStyleOverrideValues : IEnumValue, IEnumValueFactory<TableStyleOverrideValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TableStyleOverrideValues enum instance
        /// </summary>
        public TableStyleOverrideValues(string value) => _value = value;
        TableStyleOverrideValues IEnumValueFactory<TableStyleOverrideValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "wholeTable" => true,
            "firstRow" => true,
            "lastRow" => true,
            "firstCol" => true,
            "lastCol" => true,
            "band1Vert" => true,
            "band2Vert" => true,
            "band1Horz" => true,
            "band2Horz" => true,
            "neCell" => true,
            "nwCell" => true,
            "seCell" => true,
            "swCell" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "wholeTable";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Whole table formatting.
        /// <para>When the item is serialized out as xml, its value is "wholeTable".</para>
        /// </summary>
        public static TableStyleOverrideValues WholeTable => new("wholeTable");
        /// <summary>
        /// First Row Conditional Formatting.
        /// <para>When the item is serialized out as xml, its value is "firstRow".</para>
        /// </summary>
        public static TableStyleOverrideValues FirstRow => new("firstRow");
        /// <summary>
        /// Last table row formatting.
        /// <para>When the item is serialized out as xml, its value is "lastRow".</para>
        /// </summary>
        public static TableStyleOverrideValues LastRow => new("lastRow");
        /// <summary>
        /// First Column Conditional Formatting.
        /// <para>When the item is serialized out as xml, its value is "firstCol".</para>
        /// </summary>
        public static TableStyleOverrideValues FirstColumn => new("firstCol");
        /// <summary>
        /// Last table column formatting.
        /// <para>When the item is serialized out as xml, its value is "lastCol".</para>
        /// </summary>
        public static TableStyleOverrideValues LastColumn => new("lastCol");
        /// <summary>
        /// Banded Column Conditional Formatting.
        /// <para>When the item is serialized out as xml, its value is "band1Vert".</para>
        /// </summary>
        public static TableStyleOverrideValues Band1Vertical => new("band1Vert");
        /// <summary>
        /// Even Column Stripe Conditional Formatting.
        /// <para>When the item is serialized out as xml, its value is "band2Vert".</para>
        /// </summary>
        public static TableStyleOverrideValues Band2Vertical => new("band2Vert");
        /// <summary>
        /// Banded Row Conditional Formatting.
        /// <para>When the item is serialized out as xml, its value is "band1Horz".</para>
        /// </summary>
        public static TableStyleOverrideValues Band1Horizontal => new("band1Horz");
        /// <summary>
        /// Even Row Stripe Conditional Formatting.
        /// <para>When the item is serialized out as xml, its value is "band2Horz".</para>
        /// </summary>
        public static TableStyleOverrideValues Band2Horizontal => new("band2Horz");
        /// <summary>
        /// Top right table cell formatting.
        /// <para>When the item is serialized out as xml, its value is "neCell".</para>
        /// </summary>
        public static TableStyleOverrideValues NorthEastCell => new("neCell");
        /// <summary>
        /// Top left table cell formatting.
        /// <para>When the item is serialized out as xml, its value is "nwCell".</para>
        /// </summary>
        public static TableStyleOverrideValues NorthWestCell => new("nwCell");
        /// <summary>
        /// Bottom right table cell formatting.
        /// <para>When the item is serialized out as xml, its value is "seCell".</para>
        /// </summary>
        public static TableStyleOverrideValues SouthEastCell => new("seCell");
        /// <summary>
        /// Bottom left table cell formatting.
        /// <para>When the item is serialized out as xml, its value is "swCell".</para>
        /// </summary>
        public static TableStyleOverrideValues SouthWestCell => new("swCell");
    
    }

    /// <summary>
    /// Defines the StyleValues enumeration.
    /// </summary>
    public readonly record struct StyleValues : IEnumValue, IEnumValueFactory<StyleValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new StyleValues enum instance
        /// </summary>
        public StyleValues(string value) => _value = value;
        StyleValues IEnumValueFactory<StyleValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "paragraph" => true,
            "character" => true,
            "table" => true,
            "numbering" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "paragraph";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Paragraph Style.
        /// <para>When the item is serialized out as xml, its value is "paragraph".</para>
        /// </summary>
        public static StyleValues Paragraph => new("paragraph");
        /// <summary>
        /// Character Style.
        /// <para>When the item is serialized out as xml, its value is "character".</para>
        /// </summary>
        public static StyleValues Character => new("character");
        /// <summary>
        /// Table Style.
        /// <para>When the item is serialized out as xml, its value is "table".</para>
        /// </summary>
        public static StyleValues Table => new("table");
        /// <summary>
        /// Numbering Style.
        /// <para>When the item is serialized out as xml, its value is "numbering".</para>
        /// </summary>
        public static StyleValues Numbering => new("numbering");
    
    }

    /// <summary>
    /// Defines the FontFamilyValues enumeration.
    /// </summary>
    public readonly record struct FontFamilyValues : IEnumValue, IEnumValueFactory<FontFamilyValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FontFamilyValues enum instance
        /// </summary>
        public FontFamilyValues(string value) => _value = value;
        FontFamilyValues IEnumValueFactory<FontFamilyValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "decorative" => true,
            "modern" => true,
            "roman" => true,
            "script" => true,
            "swiss" => true,
            "auto" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "decorative";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Novelty Font.
        /// <para>When the item is serialized out as xml, its value is "decorative".</para>
        /// </summary>
        public static FontFamilyValues Decorative => new("decorative");
        /// <summary>
        /// Monospace Font.
        /// <para>When the item is serialized out as xml, its value is "modern".</para>
        /// </summary>
        public static FontFamilyValues Modern => new("modern");
        /// <summary>
        /// Proportional Font With Serifs.
        /// <para>When the item is serialized out as xml, its value is "roman".</para>
        /// </summary>
        public static FontFamilyValues Roman => new("roman");
        /// <summary>
        /// Script Font.
        /// <para>When the item is serialized out as xml, its value is "script".</para>
        /// </summary>
        public static FontFamilyValues Script => new("script");
        /// <summary>
        /// Proportional Font Without Serifs.
        /// <para>When the item is serialized out as xml, its value is "swiss".</para>
        /// </summary>
        public static FontFamilyValues Swiss => new("swiss");
        /// <summary>
        /// No Font Family.
        /// <para>When the item is serialized out as xml, its value is "auto".</para>
        /// </summary>
        public static FontFamilyValues Auto => new("auto");
    
    }

    /// <summary>
    /// Defines the FontPitchValues enumeration.
    /// </summary>
    public readonly record struct FontPitchValues : IEnumValue, IEnumValueFactory<FontPitchValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new FontPitchValues enum instance
        /// </summary>
        public FontPitchValues(string value) => _value = value;
        FontPitchValues IEnumValueFactory<FontPitchValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "fixed" => true,
            "variable" => true,
            "default" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "fixed";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Fixed Width.
        /// <para>When the item is serialized out as xml, its value is "fixed".</para>
        /// </summary>
        public static FontPitchValues Fixed => new("fixed");
        /// <summary>
        /// Proportional Width.
        /// <para>When the item is serialized out as xml, its value is "variable".</para>
        /// </summary>
        public static FontPitchValues Variable => new("variable");
        /// <summary>
        /// Default.
        /// <para>When the item is serialized out as xml, its value is "default".</para>
        /// </summary>
        public static FontPitchValues Default => new("default");
    
    }

    /// <summary>
    /// Defines the ThemeColorValues enumeration.
    /// </summary>
    public readonly record struct ThemeColorValues : IEnumValue, IEnumValueFactory<ThemeColorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ThemeColorValues enum instance
        /// </summary>
        public ThemeColorValues(string value) => _value = value;
        ThemeColorValues IEnumValueFactory<ThemeColorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "dark1" => true,
            "light1" => true,
            "dark2" => true,
            "light2" => true,
            "accent1" => true,
            "accent2" => true,
            "accent3" => true,
            "accent4" => true,
            "accent5" => true,
            "accent6" => true,
            "hyperlink" => true,
            "followedHyperlink" => true,
            "none" => true,
            "background1" => true,
            "text1" => true,
            "background2" => true,
            "text2" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "dark1";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Dark 1 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "dark1".</para>
        /// </summary>
        public static ThemeColorValues Dark1 => new("dark1");
        /// <summary>
        /// Light 1 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "light1".</para>
        /// </summary>
        public static ThemeColorValues Light1 => new("light1");
        /// <summary>
        /// Dark 2 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "dark2".</para>
        /// </summary>
        public static ThemeColorValues Dark2 => new("dark2");
        /// <summary>
        /// Light 2 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "light2".</para>
        /// </summary>
        public static ThemeColorValues Light2 => new("light2");
        /// <summary>
        /// Accent 1 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "accent1".</para>
        /// </summary>
        public static ThemeColorValues Accent1 => new("accent1");
        /// <summary>
        /// Accent 2 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "accent2".</para>
        /// </summary>
        public static ThemeColorValues Accent2 => new("accent2");
        /// <summary>
        /// Accent 3 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "accent3".</para>
        /// </summary>
        public static ThemeColorValues Accent3 => new("accent3");
        /// <summary>
        /// Accent 4 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "accent4".</para>
        /// </summary>
        public static ThemeColorValues Accent4 => new("accent4");
        /// <summary>
        /// Accent 5 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "accent5".</para>
        /// </summary>
        public static ThemeColorValues Accent5 => new("accent5");
        /// <summary>
        /// Accent 6 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "accent6".</para>
        /// </summary>
        public static ThemeColorValues Accent6 => new("accent6");
        /// <summary>
        /// Hyperlink Theme Color.
        /// <para>When the item is serialized out as xml, its value is "hyperlink".</para>
        /// </summary>
        public static ThemeColorValues Hyperlink => new("hyperlink");
        /// <summary>
        /// Followed Hyperlink Theme Color.
        /// <para>When the item is serialized out as xml, its value is "followedHyperlink".</para>
        /// </summary>
        public static ThemeColorValues FollowedHyperlink => new("followedHyperlink");
        /// <summary>
        /// No Theme Color.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static ThemeColorValues None => new("none");
        /// <summary>
        /// Background 1 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "background1".</para>
        /// </summary>
        public static ThemeColorValues Background1 => new("background1");
        /// <summary>
        /// Text 1 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "text1".</para>
        /// </summary>
        public static ThemeColorValues Text1 => new("text1");
        /// <summary>
        /// Background 2 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "background2".</para>
        /// </summary>
        public static ThemeColorValues Background2 => new("background2");
        /// <summary>
        /// Text 2 Theme Color.
        /// <para>When the item is serialized out as xml, its value is "text2".</para>
        /// </summary>
        public static ThemeColorValues Text2 => new("text2");
    
    }

    /// <summary>
    /// Defines the DocPartBehaviorValues enumeration.
    /// </summary>
    public readonly record struct DocPartBehaviorValues : IEnumValue, IEnumValueFactory<DocPartBehaviorValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocPartBehaviorValues enum instance
        /// </summary>
        public DocPartBehaviorValues(string value) => _value = value;
        DocPartBehaviorValues IEnumValueFactory<DocPartBehaviorValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "content" => true,
            "p" => true,
            "pg" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "content";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Insert Content At Specified Location.
        /// <para>When the item is serialized out as xml, its value is "content".</para>
        /// </summary>
        public static DocPartBehaviorValues Content => new("content");
        /// <summary>
        /// Ensure Entry Is In New Paragraph.
        /// <para>When the item is serialized out as xml, its value is "p".</para>
        /// </summary>
        public static DocPartBehaviorValues Paragraph => new("p");
        /// <summary>
        /// Ensure Entry Is On New Page.
        /// <para>When the item is serialized out as xml, its value is "pg".</para>
        /// </summary>
        public static DocPartBehaviorValues Page => new("pg");
    
    }

    /// <summary>
    /// Defines the DocPartValues enumeration.
    /// </summary>
    public readonly record struct DocPartValues : IEnumValue, IEnumValueFactory<DocPartValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocPartValues enum instance
        /// </summary>
        public DocPartValues(string value) => _value = value;
        DocPartValues IEnumValueFactory<DocPartValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "none" => true,
            "normal" => true,
            "autoExp" => true,
            "toolbar" => true,
            "speller" => true,
            "formFld" => true,
            "bbPlcHdr" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "none";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Type.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static DocPartValues None => new("none");
        /// <summary>
        /// Normal.
        /// <para>When the item is serialized out as xml, its value is "normal".</para>
        /// </summary>
        public static DocPartValues Normal => new("normal");
        /// <summary>
        /// Automatically Replace Name With Content.
        /// <para>When the item is serialized out as xml, its value is "autoExp".</para>
        /// </summary>
        public static DocPartValues AutoExp => new("autoExp");
        /// <summary>
        /// AutoText User Interface Entry.
        /// <para>When the item is serialized out as xml, its value is "toolbar".</para>
        /// </summary>
        public static DocPartValues Toolbar => new("toolbar");
        /// <summary>
        /// AutoCorrect Entry.
        /// <para>When the item is serialized out as xml, its value is "speller".</para>
        /// </summary>
        public static DocPartValues Speller => new("speller");
        /// <summary>
        /// Form Field Help Text.
        /// <para>When the item is serialized out as xml, its value is "formFld".</para>
        /// </summary>
        public static DocPartValues FormField => new("formFld");
        /// <summary>
        /// Structured Document Tag Placeholder Text.
        /// <para>When the item is serialized out as xml, its value is "bbPlcHdr".</para>
        /// </summary>
        public static DocPartValues SdtPlaceholder => new("bbPlcHdr");
    
    }

    /// <summary>
    /// Defines the DocPartGalleryValues enumeration.
    /// </summary>
    public readonly record struct DocPartGalleryValues : IEnumValue, IEnumValueFactory<DocPartGalleryValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocPartGalleryValues enum instance
        /// </summary>
        public DocPartGalleryValues(string value) => _value = value;
        DocPartGalleryValues IEnumValueFactory<DocPartGalleryValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "placeholder" => true,
            "any" => true,
            "default" => true,
            "docParts" => true,
            "coverPg" => true,
            "eq" => true,
            "ftrs" => true,
            "hdrs" => true,
            "pgNum" => true,
            "tbls" => true,
            "watermarks" => true,
            "autoTxt" => true,
            "txtBox" => true,
            "pgNumT" => true,
            "pgNumB" => true,
            "pgNumMargins" => true,
            "tblOfContents" => true,
            "bib" => true,
            "custQuickParts" => true,
            "custCoverPg" => true,
            "custEq" => true,
            "custFtrs" => true,
            "custHdrs" => true,
            "custPgNum" => true,
            "custTbls" => true,
            "custWatermarks" => true,
            "custAutoTxt" => true,
            "custTxtBox" => true,
            "custPgNumT" => true,
            "custPgNumB" => true,
            "custPgNumMargins" => true,
            "custTblOfContents" => true,
            "custBib" => true,
            "custom1" => true,
            "custom2" => true,
            "custom3" => true,
            "custom4" => true,
            "custom5" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "placeholder";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Structured Document Tag Placeholder Text Gallery.
        /// <para>When the item is serialized out as xml, its value is "placeholder".</para>
        /// </summary>
        public static DocPartGalleryValues Placeholder => new("placeholder");
        /// <summary>
        /// All Galleries.
        /// <para>When the item is serialized out as xml, its value is "any".</para>
        /// </summary>
        public static DocPartGalleryValues Any => new("any");
        /// <summary>
        /// No Gallery Classification.
        /// <para>When the item is serialized out as xml, its value is "default".</para>
        /// </summary>
        public static DocPartGalleryValues Default => new("default");
        /// <summary>
        /// Document Parts Gallery.
        /// <para>When the item is serialized out as xml, its value is "docParts".</para>
        /// </summary>
        public static DocPartGalleryValues DocumentPart => new("docParts");
        /// <summary>
        /// Cover Page Gallery.
        /// <para>When the item is serialized out as xml, its value is "coverPg".</para>
        /// </summary>
        public static DocPartGalleryValues CoverPage => new("coverPg");
        /// <summary>
        /// Equations Gallery.
        /// <para>When the item is serialized out as xml, its value is "eq".</para>
        /// </summary>
        public static DocPartGalleryValues Equation => new("eq");
        /// <summary>
        /// Footers Gallery.
        /// <para>When the item is serialized out as xml, its value is "ftrs".</para>
        /// </summary>
        public static DocPartGalleryValues Footer => new("ftrs");
        /// <summary>
        /// Headers Gallery.
        /// <para>When the item is serialized out as xml, its value is "hdrs".</para>
        /// </summary>
        public static DocPartGalleryValues Header => new("hdrs");
        /// <summary>
        /// Page Numbers Gallery.
        /// <para>When the item is serialized out as xml, its value is "pgNum".</para>
        /// </summary>
        public static DocPartGalleryValues PageNumber => new("pgNum");
        /// <summary>
        /// Table Gallery.
        /// <para>When the item is serialized out as xml, its value is "tbls".</para>
        /// </summary>
        public static DocPartGalleryValues Table => new("tbls");
        /// <summary>
        /// Watermark Gallery.
        /// <para>When the item is serialized out as xml, its value is "watermarks".</para>
        /// </summary>
        public static DocPartGalleryValues WaterMark => new("watermarks");
        /// <summary>
        /// AutoText Gallery.
        /// <para>When the item is serialized out as xml, its value is "autoTxt".</para>
        /// </summary>
        public static DocPartGalleryValues AutoText => new("autoTxt");
        /// <summary>
        /// Text Box Gallery.
        /// <para>When the item is serialized out as xml, its value is "txtBox".</para>
        /// </summary>
        public static DocPartGalleryValues TextBox => new("txtBox");
        /// <summary>
        /// Page Numbers At Top Gallery.
        /// <para>When the item is serialized out as xml, its value is "pgNumT".</para>
        /// </summary>
        public static DocPartGalleryValues PageNumberTop => new("pgNumT");
        /// <summary>
        /// Page Numbers At Bottom Gallery.
        /// <para>When the item is serialized out as xml, its value is "pgNumB".</para>
        /// </summary>
        public static DocPartGalleryValues PageNumberBottom => new("pgNumB");
        /// <summary>
        /// Page Numbers At Margins Gallery.
        /// <para>When the item is serialized out as xml, its value is "pgNumMargins".</para>
        /// </summary>
        public static DocPartGalleryValues PageNumberMargins => new("pgNumMargins");
        /// <summary>
        /// Table of Contents Gallery.
        /// <para>When the item is serialized out as xml, its value is "tblOfContents".</para>
        /// </summary>
        public static DocPartGalleryValues TableOfContents => new("tblOfContents");
        /// <summary>
        /// Bibliography Gallery.
        /// <para>When the item is serialized out as xml, its value is "bib".</para>
        /// </summary>
        public static DocPartGalleryValues Bibliography => new("bib");
        /// <summary>
        /// Custom Quick Parts Gallery.
        /// <para>When the item is serialized out as xml, its value is "custQuickParts".</para>
        /// </summary>
        public static DocPartGalleryValues CustomQuickParts => new("custQuickParts");
        /// <summary>
        /// Custom Cover Page Gallery.
        /// <para>When the item is serialized out as xml, its value is "custCoverPg".</para>
        /// </summary>
        public static DocPartGalleryValues CustomCoverPage => new("custCoverPg");
        /// <summary>
        /// Custom Equation Gallery.
        /// <para>When the item is serialized out as xml, its value is "custEq".</para>
        /// </summary>
        public static DocPartGalleryValues CustomEquation => new("custEq");
        /// <summary>
        /// Custom Footer Gallery.
        /// <para>When the item is serialized out as xml, its value is "custFtrs".</para>
        /// </summary>
        public static DocPartGalleryValues CustomFooter => new("custFtrs");
        /// <summary>
        /// Custom Header Gallery.
        /// <para>When the item is serialized out as xml, its value is "custHdrs".</para>
        /// </summary>
        public static DocPartGalleryValues CustomHeaders => new("custHdrs");
        /// <summary>
        /// Custom Page Number Gallery.
        /// <para>When the item is serialized out as xml, its value is "custPgNum".</para>
        /// </summary>
        public static DocPartGalleryValues CustomPageNumber => new("custPgNum");
        /// <summary>
        /// Custom Table Gallery.
        /// <para>When the item is serialized out as xml, its value is "custTbls".</para>
        /// </summary>
        public static DocPartGalleryValues CustomTable => new("custTbls");
        /// <summary>
        /// Custom Watermark Gallery.
        /// <para>When the item is serialized out as xml, its value is "custWatermarks".</para>
        /// </summary>
        public static DocPartGalleryValues CustomWatermark => new("custWatermarks");
        /// <summary>
        /// Custom AutoText Gallery.
        /// <para>When the item is serialized out as xml, its value is "custAutoTxt".</para>
        /// </summary>
        public static DocPartGalleryValues CustomAutoText => new("custAutoTxt");
        /// <summary>
        /// Custom Text Box Gallery.
        /// <para>When the item is serialized out as xml, its value is "custTxtBox".</para>
        /// </summary>
        public static DocPartGalleryValues CustomTextBox => new("custTxtBox");
        /// <summary>
        /// Custom Page Number At Top Gallery.
        /// <para>When the item is serialized out as xml, its value is "custPgNumT".</para>
        /// </summary>
        public static DocPartGalleryValues CustomPageNumberTop => new("custPgNumT");
        /// <summary>
        /// Custom Page Number At Bottom Gallery.
        /// <para>When the item is serialized out as xml, its value is "custPgNumB".</para>
        /// </summary>
        public static DocPartGalleryValues CustomPageNumberBottom => new("custPgNumB");
        /// <summary>
        /// Custom Page Number At Margins Gallery.
        /// <para>When the item is serialized out as xml, its value is "custPgNumMargins".</para>
        /// </summary>
        public static DocPartGalleryValues CustomPageNumberMargin => new("custPgNumMargins");
        /// <summary>
        /// Custom Table of Contents Gallery.
        /// <para>When the item is serialized out as xml, its value is "custTblOfContents".</para>
        /// </summary>
        public static DocPartGalleryValues CustomTableOfContents => new("custTblOfContents");
        /// <summary>
        /// Custom Bibliography Gallery.
        /// <para>When the item is serialized out as xml, its value is "custBib".</para>
        /// </summary>
        public static DocPartGalleryValues CustomBibliography => new("custBib");
        /// <summary>
        /// Custom 1 Gallery.
        /// <para>When the item is serialized out as xml, its value is "custom1".</para>
        /// </summary>
        public static DocPartGalleryValues Custom1 => new("custom1");
        /// <summary>
        /// Custom 2 Gallery.
        /// <para>When the item is serialized out as xml, its value is "custom2".</para>
        /// </summary>
        public static DocPartGalleryValues Custom2 => new("custom2");
        /// <summary>
        /// Custom 3 Gallery.
        /// <para>When the item is serialized out as xml, its value is "custom3".</para>
        /// </summary>
        public static DocPartGalleryValues Custom3 => new("custom3");
        /// <summary>
        /// Custom 4 Gallery.
        /// <para>When the item is serialized out as xml, its value is "custom4".</para>
        /// </summary>
        public static DocPartGalleryValues Custom4 => new("custom4");
        /// <summary>
        /// Custom 5 Gallery.
        /// <para>When the item is serialized out as xml, its value is "custom5".</para>
        /// </summary>
        public static DocPartGalleryValues Custom5 => new("custom5");
    
    }

    /// <summary>
    /// Automatic Caption Positioning Values
    /// </summary>
    public readonly record struct CaptionPositionValues : IEnumValue, IEnumValueFactory<CaptionPositionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CaptionPositionValues enum instance
        /// </summary>
        public CaptionPositionValues(string value) => _value = value;
        CaptionPositionValues IEnumValueFactory<CaptionPositionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "above" => true,
            "below" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "above";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Position Caption Above Object.
        /// <para>When the item is serialized out as xml, its value is "above".</para>
        /// </summary>
        public static CaptionPositionValues Above => new("above");
        /// <summary>
        /// Position Caption Below Object.
        /// <para>When the item is serialized out as xml, its value is "below".</para>
        /// </summary>
        public static CaptionPositionValues Below => new("below");
    
    }

    /// <summary>
    /// Horizontal Alignment Type
    /// </summary>
    public readonly record struct LevelJustificationValues : IEnumValue, IEnumValueFactory<LevelJustificationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new LevelJustificationValues enum instance
        /// </summary>
        public LevelJustificationValues(string value) => _value = value;
        LevelJustificationValues IEnumValueFactory<LevelJustificationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "left" => true,
            "center" => true,
            "right" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "left";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Align Left.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static LevelJustificationValues Left => new("left");
        /// <summary>
        /// Align Center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static LevelJustificationValues Center => new("center");
        /// <summary>
        /// Align Right.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static LevelJustificationValues Right => new("right");
    
    }

    /// <summary>
    /// Defines the ShadingPatternValues enumeration.
    /// </summary>
    public readonly record struct ShadingPatternValues : IEnumValue, IEnumValueFactory<ShadingPatternValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ShadingPatternValues enum instance
        /// </summary>
        public ShadingPatternValues(string value) => _value = value;
        ShadingPatternValues IEnumValueFactory<ShadingPatternValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "nil" => true,
            "clear" => true,
            "solid" => true,
            "horzStripe" => true,
            "vertStripe" => true,
            "reverseDiagStripe" => true,
            "diagStripe" => true,
            "horzCross" => true,
            "diagCross" => true,
            "thinHorzStripe" => true,
            "thinVertStripe" => true,
            "thinReverseDiagStripe" => true,
            "thinDiagStripe" => true,
            "thinHorzCross" => true,
            "thinDiagCross" => true,
            "pct5" => true,
            "pct10" => true,
            "pct12" => true,
            "pct15" => true,
            "pct20" => true,
            "pct25" => true,
            "pct30" => true,
            "pct35" => true,
            "pct37" => true,
            "pct40" => true,
            "pct45" => true,
            "pct50" => true,
            "pct55" => true,
            "pct60" => true,
            "pct62" => true,
            "pct65" => true,
            "pct70" => true,
            "pct75" => true,
            "pct80" => true,
            "pct85" => true,
            "pct87" => true,
            "pct90" => true,
            "pct95" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "nil";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Pattern.
        /// <para>When the item is serialized out as xml, its value is "nil".</para>
        /// </summary>
        public static ShadingPatternValues Nil => new("nil");
        /// <summary>
        /// No Pattern.
        /// <para>When the item is serialized out as xml, its value is "clear".</para>
        /// </summary>
        public static ShadingPatternValues Clear => new("clear");
        /// <summary>
        /// 100% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "solid".</para>
        /// </summary>
        public static ShadingPatternValues Solid => new("solid");
        /// <summary>
        /// Horizontal Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "horzStripe".</para>
        /// </summary>
        public static ShadingPatternValues HorizontalStripe => new("horzStripe");
        /// <summary>
        /// Vertical Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "vertStripe".</para>
        /// </summary>
        public static ShadingPatternValues VerticalStripe => new("vertStripe");
        /// <summary>
        /// Reverse Diagonal Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "reverseDiagStripe".</para>
        /// </summary>
        public static ShadingPatternValues ReverseDiagonalStripe => new("reverseDiagStripe");
        /// <summary>
        /// Diagonal Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "diagStripe".</para>
        /// </summary>
        public static ShadingPatternValues DiagonalStripe => new("diagStripe");
        /// <summary>
        /// Horizontal Cross Pattern.
        /// <para>When the item is serialized out as xml, its value is "horzCross".</para>
        /// </summary>
        public static ShadingPatternValues HorizontalCross => new("horzCross");
        /// <summary>
        /// Diagonal Cross Pattern.
        /// <para>When the item is serialized out as xml, its value is "diagCross".</para>
        /// </summary>
        public static ShadingPatternValues DiagonalCross => new("diagCross");
        /// <summary>
        /// Thin Horizontal Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "thinHorzStripe".</para>
        /// </summary>
        public static ShadingPatternValues ThinHorizontalStripe => new("thinHorzStripe");
        /// <summary>
        /// Thin Vertical Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "thinVertStripe".</para>
        /// </summary>
        public static ShadingPatternValues ThinVerticalStripe => new("thinVertStripe");
        /// <summary>
        /// Thin Reverse Diagonal Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "thinReverseDiagStripe".</para>
        /// </summary>
        public static ShadingPatternValues ThinReverseDiagonalStripe => new("thinReverseDiagStripe");
        /// <summary>
        /// Thin Diagonal Stripe Pattern.
        /// <para>When the item is serialized out as xml, its value is "thinDiagStripe".</para>
        /// </summary>
        public static ShadingPatternValues ThinDiagonalStripe => new("thinDiagStripe");
        /// <summary>
        /// Thin Horizontal Cross Pattern.
        /// <para>When the item is serialized out as xml, its value is "thinHorzCross".</para>
        /// </summary>
        public static ShadingPatternValues ThinHorizontalCross => new("thinHorzCross");
        /// <summary>
        /// Thin Diagonal Cross Pattern.
        /// <para>When the item is serialized out as xml, its value is "thinDiagCross".</para>
        /// </summary>
        public static ShadingPatternValues ThinDiagonalCross => new("thinDiagCross");
        /// <summary>
        /// 5% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct5".</para>
        /// </summary>
        public static ShadingPatternValues Percent5 => new("pct5");
        /// <summary>
        /// 10% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct10".</para>
        /// </summary>
        public static ShadingPatternValues Percent10 => new("pct10");
        /// <summary>
        /// 12.5% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct12".</para>
        /// </summary>
        public static ShadingPatternValues Percent12 => new("pct12");
        /// <summary>
        /// 15% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct15".</para>
        /// </summary>
        public static ShadingPatternValues Percent15 => new("pct15");
        /// <summary>
        /// 20% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct20".</para>
        /// </summary>
        public static ShadingPatternValues Percent20 => new("pct20");
        /// <summary>
        /// 25% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct25".</para>
        /// </summary>
        public static ShadingPatternValues Percent25 => new("pct25");
        /// <summary>
        /// 30% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct30".</para>
        /// </summary>
        public static ShadingPatternValues Percent30 => new("pct30");
        /// <summary>
        /// 35% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct35".</para>
        /// </summary>
        public static ShadingPatternValues Percent35 => new("pct35");
        /// <summary>
        /// 37.5% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct37".</para>
        /// </summary>
        public static ShadingPatternValues Percent37 => new("pct37");
        /// <summary>
        /// 40% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct40".</para>
        /// </summary>
        public static ShadingPatternValues Percent40 => new("pct40");
        /// <summary>
        /// 45% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct45".</para>
        /// </summary>
        public static ShadingPatternValues Percent45 => new("pct45");
        /// <summary>
        /// 50% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct50".</para>
        /// </summary>
        public static ShadingPatternValues Percent50 => new("pct50");
        /// <summary>
        /// 55% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct55".</para>
        /// </summary>
        public static ShadingPatternValues Percent55 => new("pct55");
        /// <summary>
        /// 60% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct60".</para>
        /// </summary>
        public static ShadingPatternValues Percent60 => new("pct60");
        /// <summary>
        /// 62.5% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct62".</para>
        /// </summary>
        public static ShadingPatternValues Percent62 => new("pct62");
        /// <summary>
        /// 65% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct65".</para>
        /// </summary>
        public static ShadingPatternValues Percent65 => new("pct65");
        /// <summary>
        /// 70% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct70".</para>
        /// </summary>
        public static ShadingPatternValues Percent70 => new("pct70");
        /// <summary>
        /// 75% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct75".</para>
        /// </summary>
        public static ShadingPatternValues Percent75 => new("pct75");
        /// <summary>
        /// 80% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct80".</para>
        /// </summary>
        public static ShadingPatternValues Percent80 => new("pct80");
        /// <summary>
        /// 85% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct85".</para>
        /// </summary>
        public static ShadingPatternValues Percent85 => new("pct85");
        /// <summary>
        /// 87.5% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct87".</para>
        /// </summary>
        public static ShadingPatternValues Percent87 => new("pct87");
        /// <summary>
        /// 90% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct90".</para>
        /// </summary>
        public static ShadingPatternValues Percent90 => new("pct90");
        /// <summary>
        /// 95% Fill Pattern.
        /// <para>When the item is serialized out as xml, its value is "pct95".</para>
        /// </summary>
        public static ShadingPatternValues Percent95 => new("pct95");
    
    }

    /// <summary>
    /// Defines the StylePaneSortMethodsValues enumeration.
    /// </summary>
    public readonly record struct StylePaneSortMethodsValues : IEnumValue, IEnumValueFactory<StylePaneSortMethodsValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new StylePaneSortMethodsValues enum instance
        /// </summary>
        public StylePaneSortMethodsValues(string value) => _value = value;
        StylePaneSortMethodsValues IEnumValueFactory<StylePaneSortMethodsValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "0000" => true,
            "name" => true,
            "0001" => true,
            "priority" => true,
            "0002" => true,
            "font" => true,
            "0003" => true,
            "basedOn" => true,
            "0004" => true,
            "type" => true,
            "0005" => true,
            "default" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "0000";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// 0000.
        /// <para>When the item is serialized out as xml, its value is "0000".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Zero => new("0000");
        /// <summary>
        /// name.
        /// <para>When the item is serialized out as xml, its value is "name".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Name => new("name");
        /// <summary>
        /// 0001.
        /// <para>When the item is serialized out as xml, its value is "0001".</para>
        /// </summary>
        public static StylePaneSortMethodsValues One => new("0001");
        /// <summary>
        /// priority.
        /// <para>When the item is serialized out as xml, its value is "priority".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Priority => new("priority");
        /// <summary>
        /// 0002.
        /// <para>When the item is serialized out as xml, its value is "0002".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Two => new("0002");
        /// <summary>
        /// font.
        /// <para>When the item is serialized out as xml, its value is "font".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Font => new("font");
        /// <summary>
        /// 0003.
        /// <para>When the item is serialized out as xml, its value is "0003".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Three => new("0003");
        /// <summary>
        /// basedOn.
        /// <para>When the item is serialized out as xml, its value is "basedOn".</para>
        /// </summary>
        public static StylePaneSortMethodsValues BasedOn => new("basedOn");
        /// <summary>
        /// 0004.
        /// <para>When the item is serialized out as xml, its value is "0004".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Four => new("0004");
        /// <summary>
        /// type.
        /// <para>When the item is serialized out as xml, its value is "type".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Type => new("type");
        /// <summary>
        /// 0005.
        /// <para>When the item is serialized out as xml, its value is "0005".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Five => new("0005");
        /// <summary>
        /// default.
        /// <para>When the item is serialized out as xml, its value is "default".</para>
        /// </summary>
        public static StylePaneSortMethodsValues Default => new("default");
    
    }

    /// <summary>
    /// Defines the DirectionValues enumeration.
    /// </summary>
    public readonly record struct DirectionValues : IEnumValue, IEnumValueFactory<DirectionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DirectionValues enum instance
        /// </summary>
        public DirectionValues(string value) => _value = value;
        DirectionValues IEnumValueFactory<DirectionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "ltr" => true,
            "rtl" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "ltr";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// ltr.
        /// <para>When the item is serialized out as xml, its value is "ltr".</para>
        /// </summary>
        public static DirectionValues Ltr => new("ltr");
        /// <summary>
        /// rtl.
        /// <para>When the item is serialized out as xml, its value is "rtl".</para>
        /// </summary>
        public static DirectionValues Rtl => new("rtl");
    
    }

    /// <summary>
    /// Defines the CalendarValues enumeration.
    /// </summary>
    public readonly record struct CalendarValues : IEnumValue, IEnumValueFactory<CalendarValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CalendarValues enum instance
        /// </summary>
        public CalendarValues(string value) => _value = value;
        CalendarValues IEnumValueFactory<CalendarValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "gregorian" => true,
            "hijri" => true,
            "umalqura" => true,
            "hebrew" => true,
            "taiwan" => true,
            "japan" => true,
            "thai" => true,
            "korea" => true,
            "saka" => true,
            "gregorianXlitEnglish" => true,
            "gregorianXlitFrench" => true,
            "gregorianUs" => true,
            "gregorianMeFrench" => true,
            "gregorianArabic" => true,
            "none" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "gregorian";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "umalqura" => FileFormatVersions.Office2010,
            "gregorianUs" => FileFormatVersions.Office2010,
            "gregorianMeFrench" => FileFormatVersions.Office2010,
            "gregorianArabic" => FileFormatVersions.Office2010,
            "none" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// Gregorian.
        /// <para>When the item is serialized out as xml, its value is "gregorian".</para>
        /// </summary>
        public static CalendarValues Gregorian => new("gregorian");
        /// <summary>
        /// Hijri.
        /// <para>When the item is serialized out as xml, its value is "hijri".</para>
        /// </summary>
        public static CalendarValues Hijri => new("hijri");
        /// <summary>
        /// umalqura.
        /// <para>When the item is serialized out as xml, its value is "umalqura".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CalendarValues Umalqura => new("umalqura");
        /// <summary>
        /// Hebrew.
        /// <para>When the item is serialized out as xml, its value is "hebrew".</para>
        /// </summary>
        public static CalendarValues Hebrew => new("hebrew");
        /// <summary>
        /// Taiwan.
        /// <para>When the item is serialized out as xml, its value is "taiwan".</para>
        /// </summary>
        public static CalendarValues Taiwan => new("taiwan");
        /// <summary>
        /// Japanese Emperor Era.
        /// <para>When the item is serialized out as xml, its value is "japan".</para>
        /// </summary>
        public static CalendarValues Japan => new("japan");
        /// <summary>
        /// Thai.
        /// <para>When the item is serialized out as xml, its value is "thai".</para>
        /// </summary>
        public static CalendarValues Thai => new("thai");
        /// <summary>
        /// Korean Tangun Era.
        /// <para>When the item is serialized out as xml, its value is "korea".</para>
        /// </summary>
        public static CalendarValues Korea => new("korea");
        /// <summary>
        /// Saka Era.
        /// <para>When the item is serialized out as xml, its value is "saka".</para>
        /// </summary>
        public static CalendarValues Saka => new("saka");
        /// <summary>
        /// Gregorian transliterated English.
        /// <para>When the item is serialized out as xml, its value is "gregorianXlitEnglish".</para>
        /// </summary>
        public static CalendarValues GregorianTransliteratedEnglish => new("gregorianXlitEnglish");
        /// <summary>
        /// Gregorian transliterated French.
        /// <para>When the item is serialized out as xml, its value is "gregorianXlitFrench".</para>
        /// </summary>
        public static CalendarValues GregorianTransliteratedFrench => new("gregorianXlitFrench");
        /// <summary>
        /// gregorianUs.
        /// <para>When the item is serialized out as xml, its value is "gregorianUs".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CalendarValues GregorianUs => new("gregorianUs");
        /// <summary>
        /// gregorianMeFrench.
        /// <para>When the item is serialized out as xml, its value is "gregorianMeFrench".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CalendarValues GregorianMeFrench => new("gregorianMeFrench");
        /// <summary>
        /// gregorianArabic.
        /// <para>When the item is serialized out as xml, its value is "gregorianArabic".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CalendarValues GregorianArabic => new("gregorianArabic");
        /// <summary>
        /// none.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CalendarValues None => new("none");
    
    }

    /// <summary>
    /// Defines the NumberFormatValues enumeration.
    /// </summary>
    public readonly record struct NumberFormatValues : IEnumValue, IEnumValueFactory<NumberFormatValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new NumberFormatValues enum instance
        /// </summary>
        public NumberFormatValues(string value) => _value = value;
        NumberFormatValues IEnumValueFactory<NumberFormatValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "decimal" => true,
            "upperRoman" => true,
            "lowerRoman" => true,
            "upperLetter" => true,
            "lowerLetter" => true,
            "ordinal" => true,
            "cardinalText" => true,
            "ordinalText" => true,
            "hex" => true,
            "chicago" => true,
            "ideographDigital" => true,
            "japaneseCounting" => true,
            "aiueo" => true,
            "iroha" => true,
            "decimalFullWidth" => true,
            "decimalHalfWidth" => true,
            "japaneseLegal" => true,
            "japaneseDigitalTenThousand" => true,
            "decimalEnclosedCircle" => true,
            "decimalFullWidth2" => true,
            "aiueoFullWidth" => true,
            "irohaFullWidth" => true,
            "decimalZero" => true,
            "bullet" => true,
            "ganada" => true,
            "chosung" => true,
            "decimalEnclosedFullstop" => true,
            "decimalEnclosedParen" => true,
            "decimalEnclosedCircleChinese" => true,
            "ideographEnclosedCircle" => true,
            "ideographTraditional" => true,
            "ideographZodiac" => true,
            "ideographZodiacTraditional" => true,
            "taiwaneseCounting" => true,
            "ideographLegalTraditional" => true,
            "taiwaneseCountingThousand" => true,
            "taiwaneseDigital" => true,
            "chineseCounting" => true,
            "chineseLegalSimplified" => true,
            "chineseCountingThousand" => true,
            "koreanDigital" => true,
            "koreanCounting" => true,
            "koreanLegal" => true,
            "koreanDigital2" => true,
            "vietnameseCounting" => true,
            "russianLower" => true,
            "russianUpper" => true,
            "none" => true,
            "numberInDash" => true,
            "hebrew1" => true,
            "hebrew2" => true,
            "arabicAlpha" => true,
            "arabicAbjad" => true,
            "hindiVowels" => true,
            "hindiConsonants" => true,
            "hindiNumbers" => true,
            "hindiCounting" => true,
            "thaiLetters" => true,
            "thaiNumbers" => true,
            "thaiCounting" => true,
            "bahtText" => true,
            "dollarText" => true,
            "custom" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "decimal";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "bahtText" => FileFormatVersions.Office2010,
            "dollarText" => FileFormatVersions.Office2010,
            "custom" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// Decimal Numbers.
        /// <para>When the item is serialized out as xml, its value is "decimal".</para>
        /// </summary>
        public static NumberFormatValues Decimal => new("decimal");
        /// <summary>
        /// Uppercase Roman Numerals.
        /// <para>When the item is serialized out as xml, its value is "upperRoman".</para>
        /// </summary>
        public static NumberFormatValues UpperRoman => new("upperRoman");
        /// <summary>
        /// Lowercase Roman Numerals.
        /// <para>When the item is serialized out as xml, its value is "lowerRoman".</para>
        /// </summary>
        public static NumberFormatValues LowerRoman => new("lowerRoman");
        /// <summary>
        /// Uppercase Latin Alphabet.
        /// <para>When the item is serialized out as xml, its value is "upperLetter".</para>
        /// </summary>
        public static NumberFormatValues UpperLetter => new("upperLetter");
        /// <summary>
        /// Lowercase Latin Alphabet.
        /// <para>When the item is serialized out as xml, its value is "lowerLetter".</para>
        /// </summary>
        public static NumberFormatValues LowerLetter => new("lowerLetter");
        /// <summary>
        /// Ordinal.
        /// <para>When the item is serialized out as xml, its value is "ordinal".</para>
        /// </summary>
        public static NumberFormatValues Ordinal => new("ordinal");
        /// <summary>
        /// Cardinal Text.
        /// <para>When the item is serialized out as xml, its value is "cardinalText".</para>
        /// </summary>
        public static NumberFormatValues CardinalText => new("cardinalText");
        /// <summary>
        /// Ordinal Text.
        /// <para>When the item is serialized out as xml, its value is "ordinalText".</para>
        /// </summary>
        public static NumberFormatValues OrdinalText => new("ordinalText");
        /// <summary>
        /// Hexadecimal Numbering.
        /// <para>When the item is serialized out as xml, its value is "hex".</para>
        /// </summary>
        public static NumberFormatValues Hex => new("hex");
        /// <summary>
        /// Chicago Manual of Style.
        /// <para>When the item is serialized out as xml, its value is "chicago".</para>
        /// </summary>
        public static NumberFormatValues Chicago => new("chicago");
        /// <summary>
        /// Ideographs.
        /// <para>When the item is serialized out as xml, its value is "ideographDigital".</para>
        /// </summary>
        public static NumberFormatValues IdeographDigital => new("ideographDigital");
        /// <summary>
        /// Japanese Counting System.
        /// <para>When the item is serialized out as xml, its value is "japaneseCounting".</para>
        /// </summary>
        public static NumberFormatValues JapaneseCounting => new("japaneseCounting");
        /// <summary>
        /// AIUEO Order Hiragana.
        /// <para>When the item is serialized out as xml, its value is "aiueo".</para>
        /// </summary>
        public static NumberFormatValues Aiueo => new("aiueo");
        /// <summary>
        /// Iroha Ordered Katakana.
        /// <para>When the item is serialized out as xml, its value is "iroha".</para>
        /// </summary>
        public static NumberFormatValues Iroha => new("iroha");
        /// <summary>
        /// Double Byte Arabic Numerals.
        /// <para>When the item is serialized out as xml, its value is "decimalFullWidth".</para>
        /// </summary>
        public static NumberFormatValues DecimalFullWidth => new("decimalFullWidth");
        /// <summary>
        /// Single Byte Arabic Numerals.
        /// <para>When the item is serialized out as xml, its value is "decimalHalfWidth".</para>
        /// </summary>
        public static NumberFormatValues DecimalHalfWidth => new("decimalHalfWidth");
        /// <summary>
        /// Japanese Legal Numbering.
        /// <para>When the item is serialized out as xml, its value is "japaneseLegal".</para>
        /// </summary>
        public static NumberFormatValues JapaneseLegal => new("japaneseLegal");
        /// <summary>
        /// Japanese Digital Ten Thousand Counting System.
        /// <para>When the item is serialized out as xml, its value is "japaneseDigitalTenThousand".</para>
        /// </summary>
        public static NumberFormatValues JapaneseDigitalTenThousand => new("japaneseDigitalTenThousand");
        /// <summary>
        /// Decimal Numbers Enclosed in a Circle.
        /// <para>When the item is serialized out as xml, its value is "decimalEnclosedCircle".</para>
        /// </summary>
        public static NumberFormatValues DecimalEnclosedCircle => new("decimalEnclosedCircle");
        /// <summary>
        /// Double Byte Arabic Numerals Alternate.
        /// <para>When the item is serialized out as xml, its value is "decimalFullWidth2".</para>
        /// </summary>
        public static NumberFormatValues DecimalFullWidth2 => new("decimalFullWidth2");
        /// <summary>
        /// Full-Width AIUEO Order Hiragana.
        /// <para>When the item is serialized out as xml, its value is "aiueoFullWidth".</para>
        /// </summary>
        public static NumberFormatValues AiueoFullWidth => new("aiueoFullWidth");
        /// <summary>
        /// Full-Width Iroha Ordered Katakana.
        /// <para>When the item is serialized out as xml, its value is "irohaFullWidth".</para>
        /// </summary>
        public static NumberFormatValues IrohaFullWidth => new("irohaFullWidth");
        /// <summary>
        /// Initial Zero Arabic Numerals.
        /// <para>When the item is serialized out as xml, its value is "decimalZero".</para>
        /// </summary>
        public static NumberFormatValues DecimalZero => new("decimalZero");
        /// <summary>
        /// Bullet.
        /// <para>When the item is serialized out as xml, its value is "bullet".</para>
        /// </summary>
        public static NumberFormatValues Bullet => new("bullet");
        /// <summary>
        /// Korean Ganada Numbering.
        /// <para>When the item is serialized out as xml, its value is "ganada".</para>
        /// </summary>
        public static NumberFormatValues Ganada => new("ganada");
        /// <summary>
        /// Korean Chosung Numbering.
        /// <para>When the item is serialized out as xml, its value is "chosung".</para>
        /// </summary>
        public static NumberFormatValues Chosung => new("chosung");
        /// <summary>
        /// Decimal Numbers Followed by a Period.
        /// <para>When the item is serialized out as xml, its value is "decimalEnclosedFullstop".</para>
        /// </summary>
        public static NumberFormatValues DecimalEnclosedFullstop => new("decimalEnclosedFullstop");
        /// <summary>
        /// Decimal Numbers Enclosed in Parenthesis.
        /// <para>When the item is serialized out as xml, its value is "decimalEnclosedParen".</para>
        /// </summary>
        public static NumberFormatValues DecimalEnclosedParen => new("decimalEnclosedParen");
        /// <summary>
        /// Decimal Numbers Enclosed in a Circle.
        /// <para>When the item is serialized out as xml, its value is "decimalEnclosedCircleChinese".</para>
        /// </summary>
        public static NumberFormatValues DecimalEnclosedCircleChinese => new("decimalEnclosedCircleChinese");
        /// <summary>
        /// Ideographs Enclosed in a Circle.
        /// <para>When the item is serialized out as xml, its value is "ideographEnclosedCircle".</para>
        /// </summary>
        public static NumberFormatValues IdeographEnclosedCircle => new("ideographEnclosedCircle");
        /// <summary>
        /// Traditional Ideograph Format.
        /// <para>When the item is serialized out as xml, its value is "ideographTraditional".</para>
        /// </summary>
        public static NumberFormatValues IdeographTraditional => new("ideographTraditional");
        /// <summary>
        /// Zodiac Ideograph Format.
        /// <para>When the item is serialized out as xml, its value is "ideographZodiac".</para>
        /// </summary>
        public static NumberFormatValues IdeographZodiac => new("ideographZodiac");
        /// <summary>
        /// Traditional Zodiac Ideograph Format.
        /// <para>When the item is serialized out as xml, its value is "ideographZodiacTraditional".</para>
        /// </summary>
        public static NumberFormatValues IdeographZodiacTraditional => new("ideographZodiacTraditional");
        /// <summary>
        /// Taiwanese Counting System.
        /// <para>When the item is serialized out as xml, its value is "taiwaneseCounting".</para>
        /// </summary>
        public static NumberFormatValues TaiwaneseCounting => new("taiwaneseCounting");
        /// <summary>
        /// Traditional Legal Ideograph Format.
        /// <para>When the item is serialized out as xml, its value is "ideographLegalTraditional".</para>
        /// </summary>
        public static NumberFormatValues IdeographLegalTraditional => new("ideographLegalTraditional");
        /// <summary>
        /// Taiwanese Counting Thousand System.
        /// <para>When the item is serialized out as xml, its value is "taiwaneseCountingThousand".</para>
        /// </summary>
        public static NumberFormatValues TaiwaneseCountingThousand => new("taiwaneseCountingThousand");
        /// <summary>
        /// Taiwanese Digital Counting System.
        /// <para>When the item is serialized out as xml, its value is "taiwaneseDigital".</para>
        /// </summary>
        public static NumberFormatValues TaiwaneseDigital => new("taiwaneseDigital");
        /// <summary>
        /// Chinese Counting System.
        /// <para>When the item is serialized out as xml, its value is "chineseCounting".</para>
        /// </summary>
        public static NumberFormatValues ChineseCounting => new("chineseCounting");
        /// <summary>
        /// Chinese Legal Simplified Format.
        /// <para>When the item is serialized out as xml, its value is "chineseLegalSimplified".</para>
        /// </summary>
        public static NumberFormatValues ChineseLegalSimplified => new("chineseLegalSimplified");
        /// <summary>
        /// Chinese Counting Thousand System.
        /// <para>When the item is serialized out as xml, its value is "chineseCountingThousand".</para>
        /// </summary>
        public static NumberFormatValues ChineseCountingThousand => new("chineseCountingThousand");
        /// <summary>
        /// Korean Digital Counting System.
        /// <para>When the item is serialized out as xml, its value is "koreanDigital".</para>
        /// </summary>
        public static NumberFormatValues KoreanDigital => new("koreanDigital");
        /// <summary>
        /// Korean Counting System.
        /// <para>When the item is serialized out as xml, its value is "koreanCounting".</para>
        /// </summary>
        public static NumberFormatValues KoreanCounting => new("koreanCounting");
        /// <summary>
        /// Korean Legal Numbering.
        /// <para>When the item is serialized out as xml, its value is "koreanLegal".</para>
        /// </summary>
        public static NumberFormatValues KoreanLegal => new("koreanLegal");
        /// <summary>
        /// Korean Digital Counting System Alternate.
        /// <para>When the item is serialized out as xml, its value is "koreanDigital2".</para>
        /// </summary>
        public static NumberFormatValues KoreanDigital2 => new("koreanDigital2");
        /// <summary>
        /// Vietnamese Numerals.
        /// <para>When the item is serialized out as xml, its value is "vietnameseCounting".</para>
        /// </summary>
        public static NumberFormatValues VietnameseCounting => new("vietnameseCounting");
        /// <summary>
        /// Lowercase Russian Alphabet.
        /// <para>When the item is serialized out as xml, its value is "russianLower".</para>
        /// </summary>
        public static NumberFormatValues RussianLower => new("russianLower");
        /// <summary>
        /// Uppercase Russian Alphabet.
        /// <para>When the item is serialized out as xml, its value is "russianUpper".</para>
        /// </summary>
        public static NumberFormatValues RussianUpper => new("russianUpper");
        /// <summary>
        /// No Numbering.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static NumberFormatValues None => new("none");
        /// <summary>
        /// Number With Dashes.
        /// <para>When the item is serialized out as xml, its value is "numberInDash".</para>
        /// </summary>
        public static NumberFormatValues NumberInDash => new("numberInDash");
        /// <summary>
        /// Hebrew Numerals.
        /// <para>When the item is serialized out as xml, its value is "hebrew1".</para>
        /// </summary>
        public static NumberFormatValues Hebrew1 => new("hebrew1");
        /// <summary>
        /// Hebrew Alphabet.
        /// <para>When the item is serialized out as xml, its value is "hebrew2".</para>
        /// </summary>
        public static NumberFormatValues Hebrew2 => new("hebrew2");
        /// <summary>
        /// Arabic Alphabet.
        /// <para>When the item is serialized out as xml, its value is "arabicAlpha".</para>
        /// </summary>
        public static NumberFormatValues ArabicAlpha => new("arabicAlpha");
        /// <summary>
        /// Arabic Abjad Numerals.
        /// <para>When the item is serialized out as xml, its value is "arabicAbjad".</para>
        /// </summary>
        public static NumberFormatValues ArabicAbjad => new("arabicAbjad");
        /// <summary>
        /// Hindi Vowels.
        /// <para>When the item is serialized out as xml, its value is "hindiVowels".</para>
        /// </summary>
        public static NumberFormatValues HindiVowels => new("hindiVowels");
        /// <summary>
        /// Hindi Consonants.
        /// <para>When the item is serialized out as xml, its value is "hindiConsonants".</para>
        /// </summary>
        public static NumberFormatValues HindiConsonants => new("hindiConsonants");
        /// <summary>
        /// Hindi Numbers.
        /// <para>When the item is serialized out as xml, its value is "hindiNumbers".</para>
        /// </summary>
        public static NumberFormatValues HindiNumbers => new("hindiNumbers");
        /// <summary>
        /// Hindi Counting System.
        /// <para>When the item is serialized out as xml, its value is "hindiCounting".</para>
        /// </summary>
        public static NumberFormatValues HindiCounting => new("hindiCounting");
        /// <summary>
        /// Thai Letters.
        /// <para>When the item is serialized out as xml, its value is "thaiLetters".</para>
        /// </summary>
        public static NumberFormatValues ThaiLetters => new("thaiLetters");
        /// <summary>
        /// Thai Numerals.
        /// <para>When the item is serialized out as xml, its value is "thaiNumbers".</para>
        /// </summary>
        public static NumberFormatValues ThaiNumbers => new("thaiNumbers");
        /// <summary>
        /// Thai Counting System.
        /// <para>When the item is serialized out as xml, its value is "thaiCounting".</para>
        /// </summary>
        public static NumberFormatValues ThaiCounting => new("thaiCounting");
        /// <summary>
        /// bahtText.
        /// <para>When the item is serialized out as xml, its value is "bahtText".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static NumberFormatValues BahtText => new("bahtText");
        /// <summary>
        /// dollarText.
        /// <para>When the item is serialized out as xml, its value is "dollarText".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static NumberFormatValues DollarText => new("dollarText");
        /// <summary>
        /// custom.
        /// <para>When the item is serialized out as xml, its value is "custom".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static NumberFormatValues Custom => new("custom");
    
    }

    /// <summary>
    /// Defines the TextDirectionValues enumeration.
    /// </summary>
    public readonly record struct TextDirectionValues : IEnumValue, IEnumValueFactory<TextDirectionValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TextDirectionValues enum instance
        /// </summary>
        public TextDirectionValues(string value) => _value = value;
        TextDirectionValues IEnumValueFactory<TextDirectionValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "lrTb" => true,
            "tb" => true,
            "tbRl" => true,
            "rl" => true,
            "btLr" => true,
            "lr" => true,
            "lrTbV" => true,
            "tbV" => true,
            "tbRlV" => true,
            "rlV" => true,
            "tbLrV" => true,
            "lrV" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "lrTb";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "tb" => FileFormatVersions.Office2010,
            "rl" => FileFormatVersions.Office2010,
            "lr" => FileFormatVersions.Office2010,
            "tbV" => FileFormatVersions.Office2010,
            "rlV" => FileFormatVersions.Office2010,
            "lrV" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// Left to Right, Top to Bottom.
        /// <para>When the item is serialized out as xml, its value is "lrTb".</para>
        /// </summary>
        public static TextDirectionValues LefToRightTopToBottom => new("lrTb");
        /// <summary>
        /// tb.
        /// <para>When the item is serialized out as xml, its value is "tb".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static TextDirectionValues LeftToRightTopToBottom2010 => new("tb");
        /// <summary>
        /// Top to Bottom, Right to Left.
        /// <para>When the item is serialized out as xml, its value is "tbRl".</para>
        /// </summary>
        public static TextDirectionValues TopToBottomRightToLeft => new("tbRl");
        /// <summary>
        /// rl.
        /// <para>When the item is serialized out as xml, its value is "rl".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static TextDirectionValues TopToBottomRightToLeft2010 => new("rl");
        /// <summary>
        /// Bottom to Top, Left to Right.
        /// <para>When the item is serialized out as xml, its value is "btLr".</para>
        /// </summary>
        public static TextDirectionValues BottomToTopLeftToRight => new("btLr");
        /// <summary>
        /// lr.
        /// <para>When the item is serialized out as xml, its value is "lr".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static TextDirectionValues BottomToTopLeftToRight2010 => new("lr");
        /// <summary>
        /// Left to Right, Top to Bottom Rotated.
        /// <para>When the item is serialized out as xml, its value is "lrTbV".</para>
        /// </summary>
        public static TextDirectionValues LefttoRightTopToBottomRotated => new("lrTbV");
        /// <summary>
        /// tbV.
        /// <para>When the item is serialized out as xml, its value is "tbV".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static TextDirectionValues LeftToRightTopToBottomRotated2010 => new("tbV");
        /// <summary>
        /// Top to Bottom, Right to Left Rotated.
        /// <para>When the item is serialized out as xml, its value is "tbRlV".</para>
        /// </summary>
        public static TextDirectionValues TopToBottomRightToLeftRotated => new("tbRlV");
        /// <summary>
        /// rlV.
        /// <para>When the item is serialized out as xml, its value is "rlV".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static TextDirectionValues TopToBottomRightToLeftRotated2010 => new("rlV");
        /// <summary>
        /// Top to Bottom, Left to Right Rotated.
        /// <para>When the item is serialized out as xml, its value is "tbLrV".</para>
        /// </summary>
        public static TextDirectionValues TopToBottomLeftToRightRotated => new("tbLrV");
        /// <summary>
        /// lrV.
        /// <para>When the item is serialized out as xml, its value is "lrV".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static TextDirectionValues TopToBottomLeftToRightRotated2010 => new("lrV");
    
    }

    /// <summary>
    /// Defines the CryptAlgorithmValues enumeration.
    /// </summary>
    public readonly record struct CryptAlgorithmValues : IEnumValue, IEnumValueFactory<CryptAlgorithmValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CryptAlgorithmValues enum instance
        /// </summary>
        public CryptAlgorithmValues(string value) => _value = value;
        CryptAlgorithmValues IEnumValueFactory<CryptAlgorithmValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "typeAny" => true,
            "custom" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "typeAny";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "custom" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// Any Type.
        /// <para>When the item is serialized out as xml, its value is "typeAny".</para>
        /// </summary>
        public static CryptAlgorithmValues TypeAny => new("typeAny");
        /// <summary>
        /// custom.
        /// <para>When the item is serialized out as xml, its value is "custom".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CryptAlgorithmValues Custom => new("custom");
    
    }

    /// <summary>
    /// Defines the CryptAlgorithmClassValues enumeration.
    /// </summary>
    public readonly record struct CryptAlgorithmClassValues : IEnumValue, IEnumValueFactory<CryptAlgorithmClassValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CryptAlgorithmClassValues enum instance
        /// </summary>
        public CryptAlgorithmClassValues(string value) => _value = value;
        CryptAlgorithmClassValues IEnumValueFactory<CryptAlgorithmClassValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "hash" => true,
            "custom" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "hash";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "custom" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// Hashing.
        /// <para>When the item is serialized out as xml, its value is "hash".</para>
        /// </summary>
        public static CryptAlgorithmClassValues Hash => new("hash");
        /// <summary>
        /// custom.
        /// <para>When the item is serialized out as xml, its value is "custom".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CryptAlgorithmClassValues Custom => new("custom");
    
    }

    /// <summary>
    /// Defines the CryptProviderValues enumeration.
    /// </summary>
    public readonly record struct CryptProviderValues : IEnumValue, IEnumValueFactory<CryptProviderValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CryptProviderValues enum instance
        /// </summary>
        public CryptProviderValues(string value) => _value = value;
        CryptProviderValues IEnumValueFactory<CryptProviderValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "rsaAES" => true,
            "rsaFull" => true,
            "custom" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "rsaAES";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "custom" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// AES Provider.
        /// <para>When the item is serialized out as xml, its value is "rsaAES".</para>
        /// </summary>
        public static CryptProviderValues RsaAdvancedEncryptionStandard => new("rsaAES");
        /// <summary>
        /// Any Provider.
        /// <para>When the item is serialized out as xml, its value is "rsaFull".</para>
        /// </summary>
        public static CryptProviderValues RsaFull => new("rsaFull");
        /// <summary>
        /// custom.
        /// <para>When the item is serialized out as xml, its value is "custom".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static CryptProviderValues Custom => new("custom");
    
    }

    /// <summary>
    /// Defines the JustificationValues enumeration.
    /// </summary>
    public readonly record struct JustificationValues : IEnumValue, IEnumValueFactory<JustificationValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new JustificationValues enum instance
        /// </summary>
        public JustificationValues(string value) => _value = value;
        JustificationValues IEnumValueFactory<JustificationValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "left" => true,
            "start" => true,
            "center" => true,
            "right" => true,
            "end" => true,
            "both" => true,
            "mediumKashida" => true,
            "distribute" => true,
            "numTab" => true,
            "highKashida" => true,
            "lowKashida" => true,
            "thaiDistribute" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "left";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "start" => FileFormatVersions.Office2010,
            "end" => FileFormatVersions.Office2010,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// Align Left.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static JustificationValues Left => new("left");
        /// <summary>
        /// start.
        /// <para>When the item is serialized out as xml, its value is "start".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static JustificationValues Start => new("start");
        /// <summary>
        /// Align Center.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static JustificationValues Center => new("center");
        /// <summary>
        /// Align Right.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static JustificationValues Right => new("right");
        /// <summary>
        /// end.
        /// <para>When the item is serialized out as xml, its value is "end".</para>
        /// <para>This item is only available in Office 2010 and later.</para>
        /// </summary>
        public static JustificationValues End => new("end");
        /// <summary>
        /// Justified.
        /// <para>When the item is serialized out as xml, its value is "both".</para>
        /// </summary>
        public static JustificationValues Both => new("both");
        /// <summary>
        /// Medium Kashida Length.
        /// <para>When the item is serialized out as xml, its value is "mediumKashida".</para>
        /// </summary>
        public static JustificationValues MediumKashida => new("mediumKashida");
        /// <summary>
        /// Distribute All Characters Equally.
        /// <para>When the item is serialized out as xml, its value is "distribute".</para>
        /// </summary>
        public static JustificationValues Distribute => new("distribute");
        /// <summary>
        /// Align to List Tab.
        /// <para>When the item is serialized out as xml, its value is "numTab".</para>
        /// </summary>
        public static JustificationValues NumTab => new("numTab");
        /// <summary>
        /// Widest Kashida Length.
        /// <para>When the item is serialized out as xml, its value is "highKashida".</para>
        /// </summary>
        public static JustificationValues HighKashida => new("highKashida");
        /// <summary>
        /// Low Kashida Length.
        /// <para>When the item is serialized out as xml, its value is "lowKashida".</para>
        /// </summary>
        public static JustificationValues LowKashida => new("lowKashida");
        /// <summary>
        /// Thai Language Justification.
        /// <para>When the item is serialized out as xml, its value is "thaiDistribute".</para>
        /// </summary>
        public static JustificationValues ThaiDistribute => new("thaiDistribute");
    
    }

    /// <summary>
    /// Defines the TabStopValues enumeration.
    /// </summary>
    public readonly record struct TabStopValues : IEnumValue, IEnumValueFactory<TabStopValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new TabStopValues enum instance
        /// </summary>
        public TabStopValues(string value) => _value = value;
        TabStopValues IEnumValueFactory<TabStopValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "clear" => true,
            "left" => true,
            "start" => true,
            "center" => true,
            "right" => true,
            "end" => true,
            "decimal" => true,
            "bar" => true,
            "num" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "clear";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Tab Stop.
        /// <para>When the item is serialized out as xml, its value is "clear".</para>
        /// </summary>
        public static TabStopValues Clear => new("clear");
        /// <summary>
        /// Left Tab.
        /// <para>When the item is serialized out as xml, its value is "left".</para>
        /// </summary>
        public static TabStopValues Left => new("left");
        /// <summary>
        /// start.
        /// <para>When the item is serialized out as xml, its value is "start".</para>
        /// </summary>
        public static TabStopValues Start => new("start");
        /// <summary>
        /// Centered Tab.
        /// <para>When the item is serialized out as xml, its value is "center".</para>
        /// </summary>
        public static TabStopValues Center => new("center");
        /// <summary>
        /// Right Tab.
        /// <para>When the item is serialized out as xml, its value is "right".</para>
        /// </summary>
        public static TabStopValues Right => new("right");
        /// <summary>
        /// end.
        /// <para>When the item is serialized out as xml, its value is "end".</para>
        /// </summary>
        public static TabStopValues End => new("end");
        /// <summary>
        /// Decimal Tab.
        /// <para>When the item is serialized out as xml, its value is "decimal".</para>
        /// </summary>
        public static TabStopValues Decimal => new("decimal");
        /// <summary>
        /// Bar Tab.
        /// <para>When the item is serialized out as xml, its value is "bar".</para>
        /// </summary>
        public static TabStopValues Bar => new("bar");
        /// <summary>
        /// List Tab.
        /// <para>When the item is serialized out as xml, its value is "num".</para>
        /// </summary>
        public static TabStopValues Number => new("num");
    
    }

    /// <summary>
    /// Defines the BorderValues enumeration.
    /// </summary>
    public readonly record struct BorderValues : IEnumValue, IEnumValueFactory<BorderValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new BorderValues enum instance
        /// </summary>
        public BorderValues(string value) => _value = value;
        BorderValues IEnumValueFactory<BorderValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "nil" => true,
            "none" => true,
            "single" => true,
            "thick" => true,
            "double" => true,
            "dotted" => true,
            "dashed" => true,
            "dotDash" => true,
            "dotDotDash" => true,
            "triple" => true,
            "thinThickSmallGap" => true,
            "thickThinSmallGap" => true,
            "thinThickThinSmallGap" => true,
            "thinThickMediumGap" => true,
            "thickThinMediumGap" => true,
            "thinThickThinMediumGap" => true,
            "thinThickLargeGap" => true,
            "thickThinLargeGap" => true,
            "thinThickThinLargeGap" => true,
            "wave" => true,
            "doubleWave" => true,
            "dashSmallGap" => true,
            "dashDotStroked" => true,
            "threeDEmboss" => true,
            "threeDEngrave" => true,
            "outset" => true,
            "inset" => true,
            "apples" => true,
            "archedScallops" => true,
            "babyPacifier" => true,
            "babyRattle" => true,
            "balloons3Colors" => true,
            "balloonsHotAir" => true,
            "basicBlackDashes" => true,
            "basicBlackDots" => true,
            "basicBlackSquares" => true,
            "basicThinLines" => true,
            "basicWhiteDashes" => true,
            "basicWhiteDots" => true,
            "basicWhiteSquares" => true,
            "basicWideInline" => true,
            "basicWideMidline" => true,
            "basicWideOutline" => true,
            "bats" => true,
            "birds" => true,
            "birdsFlight" => true,
            "cabins" => true,
            "cakeSlice" => true,
            "candyCorn" => true,
            "celticKnotwork" => true,
            "certificateBanner" => true,
            "chainLink" => true,
            "champagneBottle" => true,
            "checkedBarBlack" => true,
            "checkedBarColor" => true,
            "checkered" => true,
            "christmasTree" => true,
            "circlesLines" => true,
            "circlesRectangles" => true,
            "classicalWave" => true,
            "clocks" => true,
            "compass" => true,
            "confetti" => true,
            "confettiGrays" => true,
            "confettiOutline" => true,
            "confettiStreamers" => true,
            "confettiWhite" => true,
            "cornerTriangles" => true,
            "couponCutoutDashes" => true,
            "couponCutoutDots" => true,
            "crazyMaze" => true,
            "creaturesButterfly" => true,
            "creaturesFish" => true,
            "creaturesInsects" => true,
            "creaturesLadyBug" => true,
            "crossStitch" => true,
            "cup" => true,
            "decoArch" => true,
            "decoArchColor" => true,
            "decoBlocks" => true,
            "diamondsGray" => true,
            "doubleD" => true,
            "doubleDiamonds" => true,
            "earth1" => true,
            "earth2" => true,
            "eclipsingSquares1" => true,
            "eclipsingSquares2" => true,
            "eggsBlack" => true,
            "fans" => true,
            "film" => true,
            "firecrackers" => true,
            "flowersBlockPrint" => true,
            "flowersDaisies" => true,
            "flowersModern1" => true,
            "flowersModern2" => true,
            "flowersPansy" => true,
            "flowersRedRose" => true,
            "flowersRoses" => true,
            "flowersTeacup" => true,
            "flowersTiny" => true,
            "gems" => true,
            "gingerbreadMan" => true,
            "gradient" => true,
            "handmade1" => true,
            "handmade2" => true,
            "heartBalloon" => true,
            "heartGray" => true,
            "hearts" => true,
            "heebieJeebies" => true,
            "holly" => true,
            "houseFunky" => true,
            "hypnotic" => true,
            "iceCreamCones" => true,
            "lightBulb" => true,
            "lightning1" => true,
            "lightning2" => true,
            "mapPins" => true,
            "mapleLeaf" => true,
            "mapleMuffins" => true,
            "marquee" => true,
            "marqueeToothed" => true,
            "moons" => true,
            "mosaic" => true,
            "musicNotes" => true,
            "northwest" => true,
            "ovals" => true,
            "packages" => true,
            "palmsBlack" => true,
            "palmsColor" => true,
            "paperClips" => true,
            "papyrus" => true,
            "partyFavor" => true,
            "partyGlass" => true,
            "pencils" => true,
            "people" => true,
            "peopleWaving" => true,
            "peopleHats" => true,
            "poinsettias" => true,
            "postageStamp" => true,
            "pumpkin1" => true,
            "pushPinNote2" => true,
            "pushPinNote1" => true,
            "pyramids" => true,
            "pyramidsAbove" => true,
            "quadrants" => true,
            "rings" => true,
            "safari" => true,
            "sawtooth" => true,
            "sawtoothGray" => true,
            "scaredCat" => true,
            "seattle" => true,
            "shadowedSquares" => true,
            "sharksTeeth" => true,
            "shorebirdTracks" => true,
            "skyrocket" => true,
            "snowflakeFancy" => true,
            "snowflakes" => true,
            "sombrero" => true,
            "southwest" => true,
            "stars" => true,
            "starsTop" => true,
            "stars3d" => true,
            "starsBlack" => true,
            "starsShadowed" => true,
            "sun" => true,
            "swirligig" => true,
            "tornPaper" => true,
            "tornPaperBlack" => true,
            "trees" => true,
            "triangleParty" => true,
            "triangles" => true,
            "tribal1" => true,
            "tribal2" => true,
            "tribal3" => true,
            "tribal4" => true,
            "tribal5" => true,
            "tribal6" => true,
            "triangle1" => true,
            "triangle2" => true,
            "triangleCircle1" => true,
            "triangleCircle2" => true,
            "shapes1" => true,
            "shapes2" => true,
            "twistedLines1" => true,
            "twistedLines2" => true,
            "vine" => true,
            "waveline" => true,
            "weavingAngles" => true,
            "weavingBraid" => true,
            "weavingRibbon" => true,
            "weavingStrips" => true,
            "whiteFlowers" => true,
            "woodwork" => true,
            "xIllusions" => true,
            "zanyTriangles" => true,
            "zigZag" => true,
            "zigZagStitch" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "nil";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// No Border.
        /// <para>When the item is serialized out as xml, its value is "nil".</para>
        /// </summary>
        public static BorderValues Nil => new("nil");
        /// <summary>
        /// No Border.
        /// <para>When the item is serialized out as xml, its value is "none".</para>
        /// </summary>
        public static BorderValues None => new("none");
        /// <summary>
        /// Single Line Border.
        /// <para>When the item is serialized out as xml, its value is "single".</para>
        /// </summary>
        public static BorderValues Single => new("single");
        /// <summary>
        /// Single Line Border.
        /// <para>When the item is serialized out as xml, its value is "thick".</para>
        /// </summary>
        public static BorderValues Thick => new("thick");
        /// <summary>
        /// Double Line Border.
        /// <para>When the item is serialized out as xml, its value is "double".</para>
        /// </summary>
        public static BorderValues Double => new("double");
        /// <summary>
        /// Dotted Line Border.
        /// <para>When the item is serialized out as xml, its value is "dotted".</para>
        /// </summary>
        public static BorderValues Dotted => new("dotted");
        /// <summary>
        /// Dashed Line Border.
        /// <para>When the item is serialized out as xml, its value is "dashed".</para>
        /// </summary>
        public static BorderValues Dashed => new("dashed");
        /// <summary>
        /// Dot Dash Line Border.
        /// <para>When the item is serialized out as xml, its value is "dotDash".</para>
        /// </summary>
        public static BorderValues DotDash => new("dotDash");
        /// <summary>
        /// Dot Dot Dash Line Border.
        /// <para>When the item is serialized out as xml, its value is "dotDotDash".</para>
        /// </summary>
        public static BorderValues DotDotDash => new("dotDotDash");
        /// <summary>
        /// Triple Line Border.
        /// <para>When the item is serialized out as xml, its value is "triple".</para>
        /// </summary>
        public static BorderValues Triple => new("triple");
        /// <summary>
        /// Thin, Thick Line Border.
        /// <para>When the item is serialized out as xml, its value is "thinThickSmallGap".</para>
        /// </summary>
        public static BorderValues ThinThickSmallGap => new("thinThickSmallGap");
        /// <summary>
        /// Thick, Thin Line Border.
        /// <para>When the item is serialized out as xml, its value is "thickThinSmallGap".</para>
        /// </summary>
        public static BorderValues ThickThinSmallGap => new("thickThinSmallGap");
        /// <summary>
        /// Thin, Thick, Thin Line Border.
        /// <para>When the item is serialized out as xml, its value is "thinThickThinSmallGap".</para>
        /// </summary>
        public static BorderValues ThinThickThinSmallGap => new("thinThickThinSmallGap");
        /// <summary>
        /// Thin, Thick Line Border.
        /// <para>When the item is serialized out as xml, its value is "thinThickMediumGap".</para>
        /// </summary>
        public static BorderValues ThinThickMediumGap => new("thinThickMediumGap");
        /// <summary>
        /// Thick, Thin Line Border.
        /// <para>When the item is serialized out as xml, its value is "thickThinMediumGap".</para>
        /// </summary>
        public static BorderValues ThickThinMediumGap => new("thickThinMediumGap");
        /// <summary>
        /// Thin, Thick, Thin Line Border.
        /// <para>When the item is serialized out as xml, its value is "thinThickThinMediumGap".</para>
        /// </summary>
        public static BorderValues ThinThickThinMediumGap => new("thinThickThinMediumGap");
        /// <summary>
        /// Thin, Thick Line Border.
        /// <para>When the item is serialized out as xml, its value is "thinThickLargeGap".</para>
        /// </summary>
        public static BorderValues ThinThickLargeGap => new("thinThickLargeGap");
        /// <summary>
        /// Thick, Thin Line Border.
        /// <para>When the item is serialized out as xml, its value is "thickThinLargeGap".</para>
        /// </summary>
        public static BorderValues ThickThinLargeGap => new("thickThinLargeGap");
        /// <summary>
        /// Thin, Thick, Thin Line Border.
        /// <para>When the item is serialized out as xml, its value is "thinThickThinLargeGap".</para>
        /// </summary>
        public static BorderValues ThinThickThinLargeGap => new("thinThickThinLargeGap");
        /// <summary>
        /// Wavy Line Border.
        /// <para>When the item is serialized out as xml, its value is "wave".</para>
        /// </summary>
        public static BorderValues Wave => new("wave");
        /// <summary>
        /// Double Wave Line Border.
        /// <para>When the item is serialized out as xml, its value is "doubleWave".</para>
        /// </summary>
        public static BorderValues DoubleWave => new("doubleWave");
        /// <summary>
        /// Dashed Line Border.
        /// <para>When the item is serialized out as xml, its value is "dashSmallGap".</para>
        /// </summary>
        public static BorderValues DashSmallGap => new("dashSmallGap");
        /// <summary>
        /// Dash Dot Strokes Line Border.
        /// <para>When the item is serialized out as xml, its value is "dashDotStroked".</para>
        /// </summary>
        public static BorderValues DashDotStroked => new("dashDotStroked");
        /// <summary>
        /// 3D Embossed Line Border.
        /// <para>When the item is serialized out as xml, its value is "threeDEmboss".</para>
        /// </summary>
        public static BorderValues ThreeDEmboss => new("threeDEmboss");
        /// <summary>
        /// 3D Engraved Line Border.
        /// <para>When the item is serialized out as xml, its value is "threeDEngrave".</para>
        /// </summary>
        public static BorderValues ThreeDEngrave => new("threeDEngrave");
        /// <summary>
        /// Outset Line Border.
        /// <para>When the item is serialized out as xml, its value is "outset".</para>
        /// </summary>
        public static BorderValues Outset => new("outset");
        /// <summary>
        /// Inset Line Border.
        /// <para>When the item is serialized out as xml, its value is "inset".</para>
        /// </summary>
        public static BorderValues Inset => new("inset");
        /// <summary>
        /// Apples Art Border.
        /// <para>When the item is serialized out as xml, its value is "apples".</para>
        /// </summary>
        public static BorderValues Apples => new("apples");
        /// <summary>
        /// Arched Scallops Art Border.
        /// <para>When the item is serialized out as xml, its value is "archedScallops".</para>
        /// </summary>
        public static BorderValues ArchedScallops => new("archedScallops");
        /// <summary>
        /// Baby Pacifier Art Border.
        /// <para>When the item is serialized out as xml, its value is "babyPacifier".</para>
        /// </summary>
        public static BorderValues BabyPacifier => new("babyPacifier");
        /// <summary>
        /// Baby Rattle Art Border.
        /// <para>When the item is serialized out as xml, its value is "babyRattle".</para>
        /// </summary>
        public static BorderValues BabyRattle => new("babyRattle");
        /// <summary>
        /// Three Color Balloons Art Border.
        /// <para>When the item is serialized out as xml, its value is "balloons3Colors".</para>
        /// </summary>
        public static BorderValues Balloons3Colors => new("balloons3Colors");
        /// <summary>
        /// Hot Air Balloons Art Border.
        /// <para>When the item is serialized out as xml, its value is "balloonsHotAir".</para>
        /// </summary>
        public static BorderValues BalloonsHotAir => new("balloonsHotAir");
        /// <summary>
        /// Black Dash Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicBlackDashes".</para>
        /// </summary>
        public static BorderValues BasicBlackDashes => new("basicBlackDashes");
        /// <summary>
        /// Black Dot Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicBlackDots".</para>
        /// </summary>
        public static BorderValues BasicBlackDots => new("basicBlackDots");
        /// <summary>
        /// Black Square Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicBlackSquares".</para>
        /// </summary>
        public static BorderValues BasicBlackSquares => new("basicBlackSquares");
        /// <summary>
        /// Thin Line Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicThinLines".</para>
        /// </summary>
        public static BorderValues BasicThinLines => new("basicThinLines");
        /// <summary>
        /// White Dash Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicWhiteDashes".</para>
        /// </summary>
        public static BorderValues BasicWhiteDashes => new("basicWhiteDashes");
        /// <summary>
        /// White Dot Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicWhiteDots".</para>
        /// </summary>
        public static BorderValues BasicWhiteDots => new("basicWhiteDots");
        /// <summary>
        /// White Square Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicWhiteSquares".</para>
        /// </summary>
        public static BorderValues BasicWhiteSquares => new("basicWhiteSquares");
        /// <summary>
        /// Wide Inline Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicWideInline".</para>
        /// </summary>
        public static BorderValues BasicWideInline => new("basicWideInline");
        /// <summary>
        /// Wide Midline Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicWideMidline".</para>
        /// </summary>
        public static BorderValues BasicWideMidline => new("basicWideMidline");
        /// <summary>
        /// Wide Outline Art Border.
        /// <para>When the item is serialized out as xml, its value is "basicWideOutline".</para>
        /// </summary>
        public static BorderValues BasicWideOutline => new("basicWideOutline");
        /// <summary>
        /// Bats Art Border.
        /// <para>When the item is serialized out as xml, its value is "bats".</para>
        /// </summary>
        public static BorderValues Bats => new("bats");
        /// <summary>
        /// Birds Art Border.
        /// <para>When the item is serialized out as xml, its value is "birds".</para>
        /// </summary>
        public static BorderValues Birds => new("birds");
        /// <summary>
        /// Birds Flying Art Border.
        /// <para>When the item is serialized out as xml, its value is "birdsFlight".</para>
        /// </summary>
        public static BorderValues BirdsFlight => new("birdsFlight");
        /// <summary>
        /// Cabin Art Border.
        /// <para>When the item is serialized out as xml, its value is "cabins".</para>
        /// </summary>
        public static BorderValues Cabins => new("cabins");
        /// <summary>
        /// Cake Art Border.
        /// <para>When the item is serialized out as xml, its value is "cakeSlice".</para>
        /// </summary>
        public static BorderValues CakeSlice => new("cakeSlice");
        /// <summary>
        /// Candy Corn Art Border.
        /// <para>When the item is serialized out as xml, its value is "candyCorn".</para>
        /// </summary>
        public static BorderValues CandyCorn => new("candyCorn");
        /// <summary>
        /// Knot Work Art Border.
        /// <para>When the item is serialized out as xml, its value is "celticKnotwork".</para>
        /// </summary>
        public static BorderValues CelticKnotwork => new("celticKnotwork");
        /// <summary>
        /// Certificate Banner Art Border.
        /// <para>When the item is serialized out as xml, its value is "certificateBanner".</para>
        /// </summary>
        public static BorderValues CertificateBanner => new("certificateBanner");
        /// <summary>
        /// Chain Link Art Border.
        /// <para>When the item is serialized out as xml, its value is "chainLink".</para>
        /// </summary>
        public static BorderValues ChainLink => new("chainLink");
        /// <summary>
        /// Champagne Bottle Art Border.
        /// <para>When the item is serialized out as xml, its value is "champagneBottle".</para>
        /// </summary>
        public static BorderValues ChampagneBottle => new("champagneBottle");
        /// <summary>
        /// Black and White Bar Art Border.
        /// <para>When the item is serialized out as xml, its value is "checkedBarBlack".</para>
        /// </summary>
        public static BorderValues CheckedBarBlack => new("checkedBarBlack");
        /// <summary>
        /// Color Checked Bar Art Border.
        /// <para>When the item is serialized out as xml, its value is "checkedBarColor".</para>
        /// </summary>
        public static BorderValues CheckedBarColor => new("checkedBarColor");
        /// <summary>
        /// Checkerboard Art Border.
        /// <para>When the item is serialized out as xml, its value is "checkered".</para>
        /// </summary>
        public static BorderValues Checkered => new("checkered");
        /// <summary>
        /// Christmas Tree Art Border.
        /// <para>When the item is serialized out as xml, its value is "christmasTree".</para>
        /// </summary>
        public static BorderValues ChristmasTree => new("christmasTree");
        /// <summary>
        /// Circles And Lines Art Border.
        /// <para>When the item is serialized out as xml, its value is "circlesLines".</para>
        /// </summary>
        public static BorderValues CirclesLines => new("circlesLines");
        /// <summary>
        /// Circles and Rectangles Art Border.
        /// <para>When the item is serialized out as xml, its value is "circlesRectangles".</para>
        /// </summary>
        public static BorderValues CirclesRectangles => new("circlesRectangles");
        /// <summary>
        /// Wave Art Border.
        /// <para>When the item is serialized out as xml, its value is "classicalWave".</para>
        /// </summary>
        public static BorderValues ClassicalWave => new("classicalWave");
        /// <summary>
        /// Clocks Art Border.
        /// <para>When the item is serialized out as xml, its value is "clocks".</para>
        /// </summary>
        public static BorderValues Clocks => new("clocks");
        /// <summary>
        /// Compass Art Border.
        /// <para>When the item is serialized out as xml, its value is "compass".</para>
        /// </summary>
        public static BorderValues Compass => new("compass");
        /// <summary>
        /// Confetti Art Border.
        /// <para>When the item is serialized out as xml, its value is "confetti".</para>
        /// </summary>
        public static BorderValues Confetti => new("confetti");
        /// <summary>
        /// Confetti Art Border.
        /// <para>When the item is serialized out as xml, its value is "confettiGrays".</para>
        /// </summary>
        public static BorderValues ConfettiGrays => new("confettiGrays");
        /// <summary>
        /// Confetti Art Border.
        /// <para>When the item is serialized out as xml, its value is "confettiOutline".</para>
        /// </summary>
        public static BorderValues ConfettiOutline => new("confettiOutline");
        /// <summary>
        /// Confetti Streamers Art Border.
        /// <para>When the item is serialized out as xml, its value is "confettiStreamers".</para>
        /// </summary>
        public static BorderValues ConfettiStreamers => new("confettiStreamers");
        /// <summary>
        /// Confetti Art Border.
        /// <para>When the item is serialized out as xml, its value is "confettiWhite".</para>
        /// </summary>
        public static BorderValues ConfettiWhite => new("confettiWhite");
        /// <summary>
        /// Corner Triangle Art Border.
        /// <para>When the item is serialized out as xml, its value is "cornerTriangles".</para>
        /// </summary>
        public static BorderValues CornerTriangles => new("cornerTriangles");
        /// <summary>
        /// Dashed Line Art Border.
        /// <para>When the item is serialized out as xml, its value is "couponCutoutDashes".</para>
        /// </summary>
        public static BorderValues CouponCutoutDashes => new("couponCutoutDashes");
        /// <summary>
        /// Dotted Line Art Border.
        /// <para>When the item is serialized out as xml, its value is "couponCutoutDots".</para>
        /// </summary>
        public static BorderValues CouponCutoutDots => new("couponCutoutDots");
        /// <summary>
        /// Maze Art Border.
        /// <para>When the item is serialized out as xml, its value is "crazyMaze".</para>
        /// </summary>
        public static BorderValues CrazyMaze => new("crazyMaze");
        /// <summary>
        /// Butterfly Art Border.
        /// <para>When the item is serialized out as xml, its value is "creaturesButterfly".</para>
        /// </summary>
        public static BorderValues CreaturesButterfly => new("creaturesButterfly");
        /// <summary>
        /// Fish Art Border.
        /// <para>When the item is serialized out as xml, its value is "creaturesFish".</para>
        /// </summary>
        public static BorderValues CreaturesFish => new("creaturesFish");
        /// <summary>
        /// Insects Art Border.
        /// <para>When the item is serialized out as xml, its value is "creaturesInsects".</para>
        /// </summary>
        public static BorderValues CreaturesInsects => new("creaturesInsects");
        /// <summary>
        /// Ladybug Art Border.
        /// <para>When the item is serialized out as xml, its value is "creaturesLadyBug".</para>
        /// </summary>
        public static BorderValues CreaturesLadyBug => new("creaturesLadyBug");
        /// <summary>
        /// Cross-stitch Art Border.
        /// <para>When the item is serialized out as xml, its value is "crossStitch".</para>
        /// </summary>
        public static BorderValues CrossStitch => new("crossStitch");
        /// <summary>
        /// Cupid Art Border.
        /// <para>When the item is serialized out as xml, its value is "cup".</para>
        /// </summary>
        public static BorderValues Cup => new("cup");
        /// <summary>
        /// Archway Art Border.
        /// <para>When the item is serialized out as xml, its value is "decoArch".</para>
        /// </summary>
        public static BorderValues DecoArch => new("decoArch");
        /// <summary>
        /// Color Archway Art Border.
        /// <para>When the item is serialized out as xml, its value is "decoArchColor".</para>
        /// </summary>
        public static BorderValues DecoArchColor => new("decoArchColor");
        /// <summary>
        /// Blocks Art Border.
        /// <para>When the item is serialized out as xml, its value is "decoBlocks".</para>
        /// </summary>
        public static BorderValues DecoBlocks => new("decoBlocks");
        /// <summary>
        /// Gray Diamond Art Border.
        /// <para>When the item is serialized out as xml, its value is "diamondsGray".</para>
        /// </summary>
        public static BorderValues DiamondsGray => new("diamondsGray");
        /// <summary>
        /// Double D Art Border.
        /// <para>When the item is serialized out as xml, its value is "doubleD".</para>
        /// </summary>
        public static BorderValues DoubleD => new("doubleD");
        /// <summary>
        /// Diamond Art Border.
        /// <para>When the item is serialized out as xml, its value is "doubleDiamonds".</para>
        /// </summary>
        public static BorderValues DoubleDiamonds => new("doubleDiamonds");
        /// <summary>
        /// Earth Art Border.
        /// <para>When the item is serialized out as xml, its value is "earth1".</para>
        /// </summary>
        public static BorderValues Earth1 => new("earth1");
        /// <summary>
        /// Earth Art Border.
        /// <para>When the item is serialized out as xml, its value is "earth2".</para>
        /// </summary>
        public static BorderValues Earth2 => new("earth2");
        /// <summary>
        /// Shadowed Square Art Border.
        /// <para>When the item is serialized out as xml, its value is "eclipsingSquares1".</para>
        /// </summary>
        public static BorderValues EclipsingSquares1 => new("eclipsingSquares1");
        /// <summary>
        /// Shadowed Square Art Border.
        /// <para>When the item is serialized out as xml, its value is "eclipsingSquares2".</para>
        /// </summary>
        public static BorderValues EclipsingSquares2 => new("eclipsingSquares2");
        /// <summary>
        /// Painted Egg Art Border.
        /// <para>When the item is serialized out as xml, its value is "eggsBlack".</para>
        /// </summary>
        public static BorderValues EggsBlack => new("eggsBlack");
        /// <summary>
        /// Fans Art Border.
        /// <para>When the item is serialized out as xml, its value is "fans".</para>
        /// </summary>
        public static BorderValues Fans => new("fans");
        /// <summary>
        /// Film Reel Art Border.
        /// <para>When the item is serialized out as xml, its value is "film".</para>
        /// </summary>
        public static BorderValues Film => new("film");
        /// <summary>
        /// Firecracker Art Border.
        /// <para>When the item is serialized out as xml, its value is "firecrackers".</para>
        /// </summary>
        public static BorderValues Firecrackers => new("firecrackers");
        /// <summary>
        /// Flowers Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersBlockPrint".</para>
        /// </summary>
        public static BorderValues FlowersBlockPrint => new("flowersBlockPrint");
        /// <summary>
        /// Daisy Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersDaisies".</para>
        /// </summary>
        public static BorderValues FlowersDaisies => new("flowersDaisies");
        /// <summary>
        /// Flowers Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersModern1".</para>
        /// </summary>
        public static BorderValues FlowersModern1 => new("flowersModern1");
        /// <summary>
        /// Flowers Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersModern2".</para>
        /// </summary>
        public static BorderValues FlowersModern2 => new("flowersModern2");
        /// <summary>
        /// Pansy Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersPansy".</para>
        /// </summary>
        public static BorderValues FlowersPansy => new("flowersPansy");
        /// <summary>
        /// Red Rose Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersRedRose".</para>
        /// </summary>
        public static BorderValues FlowersRedRose => new("flowersRedRose");
        /// <summary>
        /// Roses Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersRoses".</para>
        /// </summary>
        public static BorderValues FlowersRoses => new("flowersRoses");
        /// <summary>
        /// Flowers in a Teacup Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersTeacup".</para>
        /// </summary>
        public static BorderValues FlowersTeacup => new("flowersTeacup");
        /// <summary>
        /// Small Flower Art Border.
        /// <para>When the item is serialized out as xml, its value is "flowersTiny".</para>
        /// </summary>
        public static BorderValues FlowersTiny => new("flowersTiny");
        /// <summary>
        /// Gems Art Border.
        /// <para>When the item is serialized out as xml, its value is "gems".</para>
        /// </summary>
        public static BorderValues Gems => new("gems");
        /// <summary>
        /// Gingerbread Man Art Border.
        /// <para>When the item is serialized out as xml, its value is "gingerbreadMan".</para>
        /// </summary>
        public static BorderValues GingerbreadMan => new("gingerbreadMan");
        /// <summary>
        /// Triangle Gradient Art Border.
        /// <para>When the item is serialized out as xml, its value is "gradient".</para>
        /// </summary>
        public static BorderValues Gradient => new("gradient");
        /// <summary>
        /// Handmade Art Border.
        /// <para>When the item is serialized out as xml, its value is "handmade1".</para>
        /// </summary>
        public static BorderValues Handmade1 => new("handmade1");
        /// <summary>
        /// Handmade Art Border.
        /// <para>When the item is serialized out as xml, its value is "handmade2".</para>
        /// </summary>
        public static BorderValues Handmade2 => new("handmade2");
        /// <summary>
        /// Heart-Shaped Balloon Art Border.
        /// <para>When the item is serialized out as xml, its value is "heartBalloon".</para>
        /// </summary>
        public static BorderValues HeartBalloon => new("heartBalloon");
        /// <summary>
        /// Gray Heart Art Border.
        /// <para>When the item is serialized out as xml, its value is "heartGray".</para>
        /// </summary>
        public static BorderValues HeartGray => new("heartGray");
        /// <summary>
        /// Hearts Art Border.
        /// <para>When the item is serialized out as xml, its value is "hearts".</para>
        /// </summary>
        public static BorderValues Hearts => new("hearts");
        /// <summary>
        /// Pattern Art Border.
        /// <para>When the item is serialized out as xml, its value is "heebieJeebies".</para>
        /// </summary>
        public static BorderValues HeebieJeebies => new("heebieJeebies");
        /// <summary>
        /// Holly Art Border.
        /// <para>When the item is serialized out as xml, its value is "holly".</para>
        /// </summary>
        public static BorderValues Holly => new("holly");
        /// <summary>
        /// House Art Border.
        /// <para>When the item is serialized out as xml, its value is "houseFunky".</para>
        /// </summary>
        public static BorderValues HouseFunky => new("houseFunky");
        /// <summary>
        /// Circular Art Border.
        /// <para>When the item is serialized out as xml, its value is "hypnotic".</para>
        /// </summary>
        public static BorderValues Hypnotic => new("hypnotic");
        /// <summary>
        /// Ice Cream Cone Art Border.
        /// <para>When the item is serialized out as xml, its value is "iceCreamCones".</para>
        /// </summary>
        public static BorderValues IceCreamCones => new("iceCreamCones");
        /// <summary>
        /// Light Bulb Art Border.
        /// <para>When the item is serialized out as xml, its value is "lightBulb".</para>
        /// </summary>
        public static BorderValues LightBulb => new("lightBulb");
        /// <summary>
        /// Lightning Art Border.
        /// <para>When the item is serialized out as xml, its value is "lightning1".</para>
        /// </summary>
        public static BorderValues Lightning1 => new("lightning1");
        /// <summary>
        /// Lightning Art Border.
        /// <para>When the item is serialized out as xml, its value is "lightning2".</para>
        /// </summary>
        public static BorderValues Lightning2 => new("lightning2");
        /// <summary>
        /// Map Pins Art Border.
        /// <para>When the item is serialized out as xml, its value is "mapPins".</para>
        /// </summary>
        public static BorderValues MapPins => new("mapPins");
        /// <summary>
        /// Maple Leaf Art Border.
        /// <para>When the item is serialized out as xml, its value is "mapleLeaf".</para>
        /// </summary>
        public static BorderValues MapleLeaf => new("mapleLeaf");
        /// <summary>
        /// Muffin Art Border.
        /// <para>When the item is serialized out as xml, its value is "mapleMuffins".</para>
        /// </summary>
        public static BorderValues MapleMuffins => new("mapleMuffins");
        /// <summary>
        /// Marquee Art Border.
        /// <para>When the item is serialized out as xml, its value is "marquee".</para>
        /// </summary>
        public static BorderValues Marquee => new("marquee");
        /// <summary>
        /// Marquee Art Border.
        /// <para>When the item is serialized out as xml, its value is "marqueeToothed".</para>
        /// </summary>
        public static BorderValues MarqueeToothed => new("marqueeToothed");
        /// <summary>
        /// Moon Art Border.
        /// <para>When the item is serialized out as xml, its value is "moons".</para>
        /// </summary>
        public static BorderValues Moons => new("moons");
        /// <summary>
        /// Mosaic Art Border.
        /// <para>When the item is serialized out as xml, its value is "mosaic".</para>
        /// </summary>
        public static BorderValues Mosaic => new("mosaic");
        /// <summary>
        /// Musical Note Art Border.
        /// <para>When the item is serialized out as xml, its value is "musicNotes".</para>
        /// </summary>
        public static BorderValues MusicNotes => new("musicNotes");
        /// <summary>
        /// Patterned Art Border.
        /// <para>When the item is serialized out as xml, its value is "northwest".</para>
        /// </summary>
        public static BorderValues Northwest => new("northwest");
        /// <summary>
        /// Oval Art Border.
        /// <para>When the item is serialized out as xml, its value is "ovals".</para>
        /// </summary>
        public static BorderValues Ovals => new("ovals");
        /// <summary>
        /// Package Art Border.
        /// <para>When the item is serialized out as xml, its value is "packages".</para>
        /// </summary>
        public static BorderValues Packages => new("packages");
        /// <summary>
        /// Black Palm Tree Art Border.
        /// <para>When the item is serialized out as xml, its value is "palmsBlack".</para>
        /// </summary>
        public static BorderValues PalmsBlack => new("palmsBlack");
        /// <summary>
        /// Color Palm Tree Art Border.
        /// <para>When the item is serialized out as xml, its value is "palmsColor".</para>
        /// </summary>
        public static BorderValues PalmsColor => new("palmsColor");
        /// <summary>
        /// Paper Clip Art Border.
        /// <para>When the item is serialized out as xml, its value is "paperClips".</para>
        /// </summary>
        public static BorderValues PaperClips => new("paperClips");
        /// <summary>
        /// Papyrus Art Border.
        /// <para>When the item is serialized out as xml, its value is "papyrus".</para>
        /// </summary>
        public static BorderValues Papyrus => new("papyrus");
        /// <summary>
        /// Party Favor Art Border.
        /// <para>When the item is serialized out as xml, its value is "partyFavor".</para>
        /// </summary>
        public static BorderValues PartyFavor => new("partyFavor");
        /// <summary>
        /// Party Glass Art Border.
        /// <para>When the item is serialized out as xml, its value is "partyGlass".</para>
        /// </summary>
        public static BorderValues PartyGlass => new("partyGlass");
        /// <summary>
        /// Pencils Art Border.
        /// <para>When the item is serialized out as xml, its value is "pencils".</para>
        /// </summary>
        public static BorderValues Pencils => new("pencils");
        /// <summary>
        /// Character Art Border.
        /// <para>When the item is serialized out as xml, its value is "people".</para>
        /// </summary>
        public static BorderValues People => new("people");
        /// <summary>
        /// Waving Character Border.
        /// <para>When the item is serialized out as xml, its value is "peopleWaving".</para>
        /// </summary>
        public static BorderValues PeopleWaving => new("peopleWaving");
        /// <summary>
        /// Character With Hat Art Border.
        /// <para>When the item is serialized out as xml, its value is "peopleHats".</para>
        /// </summary>
        public static BorderValues PeopleHats => new("peopleHats");
        /// <summary>
        /// Poinsettia Art Border.
        /// <para>When the item is serialized out as xml, its value is "poinsettias".</para>
        /// </summary>
        public static BorderValues Poinsettias => new("poinsettias");
        /// <summary>
        /// Postage Stamp Art Border.
        /// <para>When the item is serialized out as xml, its value is "postageStamp".</para>
        /// </summary>
        public static BorderValues PostageStamp => new("postageStamp");
        /// <summary>
        /// Pumpkin Art Border.
        /// <para>When the item is serialized out as xml, its value is "pumpkin1".</para>
        /// </summary>
        public static BorderValues Pumpkin1 => new("pumpkin1");
        /// <summary>
        /// Push Pin Art Border.
        /// <para>When the item is serialized out as xml, its value is "pushPinNote2".</para>
        /// </summary>
        public static BorderValues PushPinNote2 => new("pushPinNote2");
        /// <summary>
        /// Push Pin Art Border.
        /// <para>When the item is serialized out as xml, its value is "pushPinNote1".</para>
        /// </summary>
        public static BorderValues PushPinNote1 => new("pushPinNote1");
        /// <summary>
        /// Pyramid Art Border.
        /// <para>When the item is serialized out as xml, its value is "pyramids".</para>
        /// </summary>
        public static BorderValues Pyramids => new("pyramids");
        /// <summary>
        /// Pyramid Art Border.
        /// <para>When the item is serialized out as xml, its value is "pyramidsAbove".</para>
        /// </summary>
        public static BorderValues PyramidsAbove => new("pyramidsAbove");
        /// <summary>
        /// Quadrants Art Border.
        /// <para>When the item is serialized out as xml, its value is "quadrants".</para>
        /// </summary>
        public static BorderValues Quadrants => new("quadrants");
        /// <summary>
        /// Rings Art Border.
        /// <para>When the item is serialized out as xml, its value is "rings".</para>
        /// </summary>
        public static BorderValues Rings => new("rings");
        /// <summary>
        /// Safari Art Border.
        /// <para>When the item is serialized out as xml, its value is "safari".</para>
        /// </summary>
        public static BorderValues Safari => new("safari");
        /// <summary>
        /// Saw tooth Art Border.
        /// <para>When the item is serialized out as xml, its value is "sawtooth".</para>
        /// </summary>
        public static BorderValues Sawtooth => new("sawtooth");
        /// <summary>
        /// Gray Saw tooth Art Border.
        /// <para>When the item is serialized out as xml, its value is "sawtoothGray".</para>
        /// </summary>
        public static BorderValues SawtoothGray => new("sawtoothGray");
        /// <summary>
        /// Scared Cat Art Border.
        /// <para>When the item is serialized out as xml, its value is "scaredCat".</para>
        /// </summary>
        public static BorderValues ScaredCat => new("scaredCat");
        /// <summary>
        /// Umbrella Art Border.
        /// <para>When the item is serialized out as xml, its value is "seattle".</para>
        /// </summary>
        public static BorderValues Seattle => new("seattle");
        /// <summary>
        /// Shadowed Squares Art Border.
        /// <para>When the item is serialized out as xml, its value is "shadowedSquares".</para>
        /// </summary>
        public static BorderValues ShadowedSquares => new("shadowedSquares");
        /// <summary>
        /// Shark Tooth Art Border.
        /// <para>When the item is serialized out as xml, its value is "sharksTeeth".</para>
        /// </summary>
        public static BorderValues SharksTeeth => new("sharksTeeth");
        /// <summary>
        /// Bird Tracks Art Border.
        /// <para>When the item is serialized out as xml, its value is "shorebirdTracks".</para>
        /// </summary>
        public static BorderValues ShorebirdTracks => new("shorebirdTracks");
        /// <summary>
        /// Rocket Art Border.
        /// <para>When the item is serialized out as xml, its value is "skyrocket".</para>
        /// </summary>
        public static BorderValues Skyrocket => new("skyrocket");
        /// <summary>
        /// Snowflake Art Border.
        /// <para>When the item is serialized out as xml, its value is "snowflakeFancy".</para>
        /// </summary>
        public static BorderValues SnowflakeFancy => new("snowflakeFancy");
        /// <summary>
        /// Snowflake Art Border.
        /// <para>When the item is serialized out as xml, its value is "snowflakes".</para>
        /// </summary>
        public static BorderValues Snowflakes => new("snowflakes");
        /// <summary>
        /// Sombrero Art Border.
        /// <para>When the item is serialized out as xml, its value is "sombrero".</para>
        /// </summary>
        public static BorderValues Sombrero => new("sombrero");
        /// <summary>
        /// Southwest-themed Art Border.
        /// <para>When the item is serialized out as xml, its value is "southwest".</para>
        /// </summary>
        public static BorderValues Southwest => new("southwest");
        /// <summary>
        /// Stars Art Border.
        /// <para>When the item is serialized out as xml, its value is "stars".</para>
        /// </summary>
        public static BorderValues Stars => new("stars");
        /// <summary>
        /// Stars On Top Art Border.
        /// <para>When the item is serialized out as xml, its value is "starsTop".</para>
        /// </summary>
        public static BorderValues StarsTop => new("starsTop");
        /// <summary>
        /// 3-D Stars Art Border.
        /// <para>When the item is serialized out as xml, its value is "stars3d".</para>
        /// </summary>
        public static BorderValues Stars3d => new("stars3d");
        /// <summary>
        /// Stars Art Border.
        /// <para>When the item is serialized out as xml, its value is "starsBlack".</para>
        /// </summary>
        public static BorderValues StarsBlack => new("starsBlack");
        /// <summary>
        /// Stars With Shadows Art Border.
        /// <para>When the item is serialized out as xml, its value is "starsShadowed".</para>
        /// </summary>
        public static BorderValues StarsShadowed => new("starsShadowed");
        /// <summary>
        /// Sun Art Border.
        /// <para>When the item is serialized out as xml, its value is "sun".</para>
        /// </summary>
        public static BorderValues Sun => new("sun");
        /// <summary>
        /// Whirligig Art Border.
        /// <para>When the item is serialized out as xml, its value is "swirligig".</para>
        /// </summary>
        public static BorderValues Swirligig => new("swirligig");
        /// <summary>
        /// Torn Paper Art Border.
        /// <para>When the item is serialized out as xml, its value is "tornPaper".</para>
        /// </summary>
        public static BorderValues TornPaper => new("tornPaper");
        /// <summary>
        /// Black Torn Paper Art Border.
        /// <para>When the item is serialized out as xml, its value is "tornPaperBlack".</para>
        /// </summary>
        public static BorderValues TornPaperBlack => new("tornPaperBlack");
        /// <summary>
        /// Tree Art Border.
        /// <para>When the item is serialized out as xml, its value is "trees".</para>
        /// </summary>
        public static BorderValues Trees => new("trees");
        /// <summary>
        /// Triangle Art Border.
        /// <para>When the item is serialized out as xml, its value is "triangleParty".</para>
        /// </summary>
        public static BorderValues TriangleParty => new("triangleParty");
        /// <summary>
        /// Triangles Art Border.
        /// <para>When the item is serialized out as xml, its value is "triangles".</para>
        /// </summary>
        public static BorderValues Triangles => new("triangles");
        /// <summary>
        /// Tribal Art Border One.
        /// <para>When the item is serialized out as xml, its value is "tribal1".</para>
        /// </summary>
        public static BorderValues Tribal1 => new("tribal1");
        /// <summary>
        /// Tribal Art Border Two.
        /// <para>When the item is serialized out as xml, its value is "tribal2".</para>
        /// </summary>
        public static BorderValues Tribal2 => new("tribal2");
        /// <summary>
        /// Tribal Art Border Three.
        /// <para>When the item is serialized out as xml, its value is "tribal3".</para>
        /// </summary>
        public static BorderValues Tribal3 => new("tribal3");
        /// <summary>
        /// Tribal Art Border Four.
        /// <para>When the item is serialized out as xml, its value is "tribal4".</para>
        /// </summary>
        public static BorderValues Tribal4 => new("tribal4");
        /// <summary>
        /// Tribal Art Border Five.
        /// <para>When the item is serialized out as xml, its value is "tribal5".</para>
        /// </summary>
        public static BorderValues Tribal5 => new("tribal5");
        /// <summary>
        /// Tribal Art Border Six.
        /// <para>When the item is serialized out as xml, its value is "tribal6".</para>
        /// </summary>
        public static BorderValues Tribal6 => new("tribal6");
        /// <summary>
        /// triangle1.
        /// <para>When the item is serialized out as xml, its value is "triangle1".</para>
        /// </summary>
        public static BorderValues Triangle1 => new("triangle1");
        /// <summary>
        /// triangle2.
        /// <para>When the item is serialized out as xml, its value is "triangle2".</para>
        /// </summary>
        public static BorderValues Triangle2 => new("triangle2");
        /// <summary>
        /// triangleCircle1.
        /// <para>When the item is serialized out as xml, its value is "triangleCircle1".</para>
        /// </summary>
        public static BorderValues TriangleCircle1 => new("triangleCircle1");
        /// <summary>
        /// triangleCircle2.
        /// <para>When the item is serialized out as xml, its value is "triangleCircle2".</para>
        /// </summary>
        public static BorderValues TriangleCircle2 => new("triangleCircle2");
        /// <summary>
        /// shapes1.
        /// <para>When the item is serialized out as xml, its value is "shapes1".</para>
        /// </summary>
        public static BorderValues Shapes1 => new("shapes1");
        /// <summary>
        /// shapes2.
        /// <para>When the item is serialized out as xml, its value is "shapes2".</para>
        /// </summary>
        public static BorderValues Shapes2 => new("shapes2");
        /// <summary>
        /// Twisted Lines Art Border.
        /// <para>When the item is serialized out as xml, its value is "twistedLines1".</para>
        /// </summary>
        public static BorderValues TwistedLines1 => new("twistedLines1");
        /// <summary>
        /// Twisted Lines Art Border.
        /// <para>When the item is serialized out as xml, its value is "twistedLines2".</para>
        /// </summary>
        public static BorderValues TwistedLines2 => new("twistedLines2");
        /// <summary>
        /// Vine Art Border.
        /// <para>When the item is serialized out as xml, its value is "vine".</para>
        /// </summary>
        public static BorderValues Vine => new("vine");
        /// <summary>
        /// Wavy Line Art Border.
        /// <para>When the item is serialized out as xml, its value is "waveline".</para>
        /// </summary>
        public static BorderValues Waveline => new("waveline");
        /// <summary>
        /// Weaving Angles Art Border.
        /// <para>When the item is serialized out as xml, its value is "weavingAngles".</para>
        /// </summary>
        public static BorderValues WeavingAngles => new("weavingAngles");
        /// <summary>
        /// Weaving Braid Art Border.
        /// <para>When the item is serialized out as xml, its value is "weavingBraid".</para>
        /// </summary>
        public static BorderValues WeavingBraid => new("weavingBraid");
        /// <summary>
        /// Weaving Ribbon Art Border.
        /// <para>When the item is serialized out as xml, its value is "weavingRibbon".</para>
        /// </summary>
        public static BorderValues WeavingRibbon => new("weavingRibbon");
        /// <summary>
        /// Weaving Strips Art Border.
        /// <para>When the item is serialized out as xml, its value is "weavingStrips".</para>
        /// </summary>
        public static BorderValues WeavingStrips => new("weavingStrips");
        /// <summary>
        /// White Flowers Art Border.
        /// <para>When the item is serialized out as xml, its value is "whiteFlowers".</para>
        /// </summary>
        public static BorderValues WhiteFlowers => new("whiteFlowers");
        /// <summary>
        /// Woodwork Art Border.
        /// <para>When the item is serialized out as xml, its value is "woodwork".</para>
        /// </summary>
        public static BorderValues Woodwork => new("woodwork");
        /// <summary>
        /// Crisscross Art Border.
        /// <para>When the item is serialized out as xml, its value is "xIllusions".</para>
        /// </summary>
        public static BorderValues XIllusions => new("xIllusions");
        /// <summary>
        /// Triangle Art Border.
        /// <para>When the item is serialized out as xml, its value is "zanyTriangles".</para>
        /// </summary>
        public static BorderValues ZanyTriangles => new("zanyTriangles");
        /// <summary>
        /// Zigzag Art Border.
        /// <para>When the item is serialized out as xml, its value is "zigZag".</para>
        /// </summary>
        public static BorderValues ZigZag => new("zigZag");
        /// <summary>
        /// Zigzag stitch.
        /// <para>When the item is serialized out as xml, its value is "zigZagStitch".</para>
        /// </summary>
        public static BorderValues ZigZagStitch => new("zigZagStitch");
    
    }

    /// <summary>
    /// Defines the DocumentConformance enumeration.
    /// </summary>
    public readonly record struct DocumentConformance : IEnumValue, IEnumValueFactory<DocumentConformance>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DocumentConformance enum instance
        /// </summary>
        public DocumentConformance(string value) => _value = value;
        DocumentConformance IEnumValueFactory<DocumentConformance>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "transitional" => true,
            "strict" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "transitional";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// transitional.
        /// <para>When the item is serialized out as xml, its value is "transitional".</para>
        /// </summary>
        public static DocumentConformance transitional => new("transitional");
        /// <summary>
        /// strict.
        /// <para>When the item is serialized out as xml, its value is "strict".</para>
        /// </summary>
        public static DocumentConformance strict => new("strict");
    
    }

    /// <summary>
    /// Defines the StrictCharacterSet enumeration.
    /// </summary>
    public readonly record struct StrictCharacterSet : IEnumValue, IEnumValueFactory<StrictCharacterSet>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new StrictCharacterSet enum instance
        /// </summary>
        public StrictCharacterSet(string value) => _value = value;
        StrictCharacterSet IEnumValueFactory<StrictCharacterSet>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "iso-8859-1" => true,
            "macintosh" => true,
            "shift_jis" => true,
            "ks_c-5601-1987" => true,
            "KS_C-5601-1992" => true,
            "GBK" => true,
            "Big5" => true,
            "windows-1253" => true,
            "iso-8859-9" => true,
            "windows-1258" => true,
            "windows-1255" => true,
            "windows-1256" => true,
            "windows-1257" => true,
            "windows-1251" => true,
            "windows-874" => true,
            "windows-1250" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "iso-8859-1";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// iso-8859-1.
        /// <para>When the item is serialized out as xml, its value is "iso-8859-1".</para>
        /// </summary>
        public static StrictCharacterSet chsAnsi => new("iso-8859-1");
        /// <summary>
        /// macintosh.
        /// <para>When the item is serialized out as xml, its value is "macintosh".</para>
        /// </summary>
        public static StrictCharacterSet chsMacFfn => new("macintosh");
        /// <summary>
        /// shift_jis.
        /// <para>When the item is serialized out as xml, its value is "shift_jis".</para>
        /// </summary>
        public static StrictCharacterSet chsShiftJIS => new("shift_jis");
        /// <summary>
        /// ks_c-5601-1987.
        /// <para>When the item is serialized out as xml, its value is "ks_c-5601-1987".</para>
        /// </summary>
        public static StrictCharacterSet chsHangeul => new("ks_c-5601-1987");
        /// <summary>
        /// KS_C-5601-1992.
        /// <para>When the item is serialized out as xml, its value is "KS_C-5601-1992".</para>
        /// </summary>
        public static StrictCharacterSet chsJohab => new("KS_C-5601-1992");
        /// <summary>
        /// GBK.
        /// <para>When the item is serialized out as xml, its value is "GBK".</para>
        /// </summary>
        public static StrictCharacterSet chsGB2312 => new("GBK");
        /// <summary>
        /// Big5.
        /// <para>When the item is serialized out as xml, its value is "Big5".</para>
        /// </summary>
        public static StrictCharacterSet chsChinese5 => new("Big5");
        /// <summary>
        /// windows-1253.
        /// <para>When the item is serialized out as xml, its value is "windows-1253".</para>
        /// </summary>
        public static StrictCharacterSet chsGreek => new("windows-1253");
        /// <summary>
        /// iso-8859-9.
        /// <para>When the item is serialized out as xml, its value is "iso-8859-9".</para>
        /// </summary>
        public static StrictCharacterSet chsTurkish => new("iso-8859-9");
        /// <summary>
        /// windows-1258.
        /// <para>When the item is serialized out as xml, its value is "windows-1258".</para>
        /// </summary>
        public static StrictCharacterSet chsVietnamese => new("windows-1258");
        /// <summary>
        /// windows-1255.
        /// <para>When the item is serialized out as xml, its value is "windows-1255".</para>
        /// </summary>
        public static StrictCharacterSet chsHebrew => new("windows-1255");
        /// <summary>
        /// windows-1256.
        /// <para>When the item is serialized out as xml, its value is "windows-1256".</para>
        /// </summary>
        public static StrictCharacterSet chsArabic => new("windows-1256");
        /// <summary>
        /// windows-1257.
        /// <para>When the item is serialized out as xml, its value is "windows-1257".</para>
        /// </summary>
        public static StrictCharacterSet chsBaltic => new("windows-1257");
        /// <summary>
        /// windows-1251.
        /// <para>When the item is serialized out as xml, its value is "windows-1251".</para>
        /// </summary>
        public static StrictCharacterSet chsRussian => new("windows-1251");
        /// <summary>
        /// windows-874.
        /// <para>When the item is serialized out as xml, its value is "windows-874".</para>
        /// </summary>
        public static StrictCharacterSet chsThai => new("windows-874");
        /// <summary>
        /// windows-1250.
        /// <para>When the item is serialized out as xml, its value is "windows-1250".</para>
        /// </summary>
        public static StrictCharacterSet chsEastEurope => new("windows-1250");
    
    }

    /// <summary>
    /// Defines the ObjectDrawAspect enumeration.
    /// </summary>
    public readonly record struct ObjectDrawAspect : IEnumValue, IEnumValueFactory<ObjectDrawAspect>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ObjectDrawAspect enum instance
        /// </summary>
        public ObjectDrawAspect(string value) => _value = value;
        ObjectDrawAspect IEnumValueFactory<ObjectDrawAspect>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "content" => true,
            "icon" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "content";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// content.
        /// <para>When the item is serialized out as xml, its value is "content".</para>
        /// </summary>
        public static ObjectDrawAspect content => new("content");
        /// <summary>
        /// icon.
        /// <para>When the item is serialized out as xml, its value is "icon".</para>
        /// </summary>
        public static ObjectDrawAspect icon => new("icon");
    
    }

    /// <summary>
    /// Linked Object Update Modes
    /// </summary>
    public readonly record struct ObjectUpdateMode : IEnumValue, IEnumValueFactory<ObjectUpdateMode>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new ObjectUpdateMode enum instance
        /// </summary>
        public ObjectUpdateMode(string value) => _value = value;
        ObjectUpdateMode IEnumValueFactory<ObjectUpdateMode>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "always" => true,
            "onCall" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "always";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// always.
        /// <para>When the item is serialized out as xml, its value is "always".</para>
        /// </summary>
        public static ObjectUpdateMode always => new("always");
        /// <summary>
        /// onCall.
        /// <para>When the item is serialized out as xml, its value is "onCall".</para>
        /// </summary>
        public static ObjectUpdateMode onCall => new("onCall");
    
    }

    /// <summary>
    /// Defines the CompatSettingNameValues enumeration.
    /// </summary>
    public readonly record struct CompatSettingNameValues : IEnumValue, IEnumValueFactory<CompatSettingNameValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new CompatSettingNameValues enum instance
        /// </summary>
        public CompatSettingNameValues(string value) => _value = value;
        CompatSettingNameValues IEnumValueFactory<CompatSettingNameValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "compatibilityMode" => true,
            "overrideTableStyleFontSizeAndJustification" => true,
            "enableOpenTypeFeatures" => true,
            "doNotFlipMirrorIndents" => true,
            "differentiateMultirowTableHeaders" => true,
            "useWord2013TrackBottomHyphenation" => true,
            "allowHyphenationAtTrackBottom" => true,
            "allowTextAfterFloatingTableBreak" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "compatibilityMode";
        FileFormatVersions IEnumValue.Version => InternalValue switch
        {
            "useWord2013TrackBottomHyphenation" => FileFormatVersions.Office2016,
            "allowHyphenationAtTrackBottom" => FileFormatVersions.Office2016,
            "allowTextAfterFloatingTableBreak" => FileFormatVersions.Office2013,
            _ => FileFormatVersions.Office2007,
        };
        /// <summary>
        /// compatibilityMode.
        /// <para>When the item is serialized out as xml, its value is "compatibilityMode".</para>
        /// </summary>
        public static CompatSettingNameValues CompatibilityMode => new("compatibilityMode");
        /// <summary>
        /// overrideTableStyleFontSizeAndJustification.
        /// <para>When the item is serialized out as xml, its value is "overrideTableStyleFontSizeAndJustification".</para>
        /// </summary>
        public static CompatSettingNameValues OverrideTableStyleFontSizeAndJustification => new("overrideTableStyleFontSizeAndJustification");
        /// <summary>
        /// enableOpenTypeFeatures.
        /// <para>When the item is serialized out as xml, its value is "enableOpenTypeFeatures".</para>
        /// </summary>
        public static CompatSettingNameValues EnableOpenTypeFeatures => new("enableOpenTypeFeatures");
        /// <summary>
        /// doNotFlipMirrorIndents.
        /// <para>When the item is serialized out as xml, its value is "doNotFlipMirrorIndents".</para>
        /// </summary>
        public static CompatSettingNameValues DoNotFlipMirrorIndents => new("doNotFlipMirrorIndents");
        /// <summary>
        /// differentiateMultirowTableHeaders.
        /// <para>When the item is serialized out as xml, its value is "differentiateMultirowTableHeaders".</para>
        /// </summary>
        public static CompatSettingNameValues DifferentiateMultirowTableHeaders => new("differentiateMultirowTableHeaders");
        /// <summary>
        /// useWord2013TrackBottomHyphenation.
        /// <para>When the item is serialized out as xml, its value is "useWord2013TrackBottomHyphenation".</para>
        /// <para>This item is only available in Office 2016 and later.</para>
        /// </summary>
        public static CompatSettingNameValues UseWord2013TrackBottomHyphenation => new("useWord2013TrackBottomHyphenation");
        /// <summary>
        /// allowHyphenationAtTrackBottom.
        /// <para>When the item is serialized out as xml, its value is "allowHyphenationAtTrackBottom".</para>
        /// <para>This item is only available in Office 2016 and later.</para>
        /// </summary>
        public static CompatSettingNameValues AllowHyphenationAtTrackBottom => new("allowHyphenationAtTrackBottom");
        /// <summary>
        /// allowTextAfterFloatingTableBreak.
        /// <para>When the item is serialized out as xml, its value is "allowTextAfterFloatingTableBreak".</para>
        /// <para>This item is only available in Office 2013 and later.</para>
        /// </summary>
        public static CompatSettingNameValues AllowTextAfterFloatingTableBreak => new("allowTextAfterFloatingTableBreak");
    
    }
}
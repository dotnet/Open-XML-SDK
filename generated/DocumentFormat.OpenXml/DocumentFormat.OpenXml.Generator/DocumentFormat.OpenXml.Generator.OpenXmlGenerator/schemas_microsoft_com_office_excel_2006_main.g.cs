// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.Excel
{
    /// <summary>
    /// <para>Defines the Macrosheet Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:macrosheet.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.AutoFilter" /> <c>&lt;x:autoFilter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.Columns" /> <c>&lt;x:cols></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting" /> <c>&lt;x:conditionalFormatting></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.CustomProperties" /> <c>&lt;x:customProperties></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.CustomSheetViews" /> <c>&lt;x:customSheetViews></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.DataConsolidate" /> <c>&lt;x:dataConsolidate></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.Drawing" /> <c>&lt;x:drawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.DrawingHeaderFooter" /> <c>&lt;x:drawingHF></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.ExtensionList" /> <c>&lt;x:extLst></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.HeaderFooter" /> <c>&lt;x:headerFooter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.LegacyDrawing" /> <c>&lt;x:legacyDrawing></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.LegacyDrawingHeaderFooter" /> <c>&lt;x:legacyDrawingHF></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.OleObjects" /> <c>&lt;x:oleObjects></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.RowBreaks" /> <c>&lt;x:rowBreaks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.ColumnBreaks" /> <c>&lt;x:colBreaks></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.PageMargins" /> <c>&lt;x:pageMargins></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.PageSetup" /> <c>&lt;x:pageSetup></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.PhoneticProperties" /> <c>&lt;x:phoneticPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.PrintOptions" /> <c>&lt;x:printOptions></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.Picture" /> <c>&lt;x:picture></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SheetData" /> <c>&lt;x:sheetData></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SheetDimension" /> <c>&lt;x:dimension></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties" /> <c>&lt;x:sheetFormatPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SheetProperties" /> <c>&lt;x:sheetPr></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SheetProtection" /> <c>&lt;x:sheetProtection></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SheetViews" /> <c>&lt;x:sheetViews></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Spreadsheet.SortState" /> <c>&lt;x:sortState></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Macrosheet : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "macrosheet");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/spreadsheetml/2006/main", "CT_Macrosheet");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Macrosheet class.
        /// </summary>
        public Macrosheet() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Macrosheet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Macrosheet(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Macrosheet class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Macrosheet(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Macrosheet class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Macrosheet(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.AutoFilter.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.AutoFilter());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.Columns.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.Columns());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.CustomProperties.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.CustomProperties());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.CustomSheetViews.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.CustomSheetViews());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.DataConsolidate.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.DataConsolidate());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.Drawing.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.Drawing());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.DrawingHeaderFooter.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.DrawingHeaderFooter());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.ExtensionList.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.ExtensionList());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.HeaderFooter.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.HeaderFooter());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.LegacyDrawing.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.LegacyDrawing());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.LegacyDrawingHeaderFooter.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.LegacyDrawingHeaderFooter());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.OleObjects.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.OleObjects());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.RowBreaks.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.RowBreaks());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.ColumnBreaks.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.ColumnBreaks());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.PageMargins.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.PageMargins());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.PageSetup.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.PageSetup());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.PhoneticProperties.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.PhoneticProperties());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.PrintOptions.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.PrintOptions());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.Picture.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.Picture());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SheetData.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SheetData());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SheetDimension.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SheetDimension());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SheetProperties.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SheetProperties());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SheetProtection.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SheetProtection());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SheetViews.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SheetViews());
            builder.AddChild(DocumentFormat.OpenXml.Spreadsheet.SortState.ElementType, static () => new DocumentFormat.OpenXml.Spreadsheet.SortState());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SheetProperties.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SheetDimension.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SheetViews.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.Columns.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SheetData.ElementType, 1, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SheetProtection.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.AutoFilter.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.SortState.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.DataConsolidate.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.CustomSheetViews.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.PhoneticProperties.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.PrintOptions.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.PageMargins.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.PageSetup.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.HeaderFooter.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.RowBreaks.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.ColumnBreaks.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.CustomProperties.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.Drawing.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.LegacyDrawing.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.LegacyDrawingHeaderFooter.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.Picture.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.OleObjects.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.DrawingHeaderFooter.ElementType, 0, 1, version: FileFormatVersions.Office2010),
                new ElementParticle(DocumentFormat.OpenXml.Spreadsheet.ExtensionList.ElementType, 0, 1)
            };
        }

        /// <summary>
        /// <para>Sheet Properties.</para>
        /// <para>Represents the following element tag in the schema: x:sheetPr.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remarks>
        public DocumentFormat.OpenXml.Spreadsheet.SheetProperties? SheetProperties
        {
            get => GetElement(DocumentFormat.OpenXml.Spreadsheet.SheetProperties.ElementType) as DocumentFormat.OpenXml.Spreadsheet.SheetProperties;
            set => SetElement(value, DocumentFormat.OpenXml.Spreadsheet.SheetProperties.ElementType);
        }

        /// <summary>
        /// <para>Macro Sheet Dimensions.</para>
        /// <para>Represents the following element tag in the schema: x:dimension.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remarks>
        public DocumentFormat.OpenXml.Spreadsheet.SheetDimension? SheetDimension
        {
            get => GetElement(DocumentFormat.OpenXml.Spreadsheet.SheetDimension.ElementType) as DocumentFormat.OpenXml.Spreadsheet.SheetDimension;
            set => SetElement(value, DocumentFormat.OpenXml.Spreadsheet.SheetDimension.ElementType);
        }

        /// <summary>
        /// <para>Macro Sheet Views.</para>
        /// <para>Represents the following element tag in the schema: x:sheetViews.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remarks>
        public DocumentFormat.OpenXml.Spreadsheet.SheetViews? SheetViews
        {
            get => GetElement(DocumentFormat.OpenXml.Spreadsheet.SheetViews.ElementType) as DocumentFormat.OpenXml.Spreadsheet.SheetViews;
            set => SetElement(value, DocumentFormat.OpenXml.Spreadsheet.SheetViews.ElementType);
        }

        /// <summary>
        /// <para>Sheet Format Properties.</para>
        /// <para>Represents the following element tag in the schema: x:sheetFormatPr.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
        /// </remarks>
        public DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties? SheetFormatProperties
        {
            get => GetElement(DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties.ElementType) as DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties;
            set => SetElement(value, DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Macrosheet>(deep);

        internal Macrosheet(MacroSheetPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the MacroSheetPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(MacroSheetPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the MacroSheetPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(MacroSheetPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the MacroSheetPart associated with this element.
        /// </summary>
        public MacroSheetPart? MacroSheetPart
        {
            get => OpenXmlPart as MacroSheetPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Worksheet Sort Map.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:worksheetSortMap.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.ColumnSortMap" /> <c>&lt;xne:colSortMap></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.RowSortMap" /> <c>&lt;xne:rowSortMap></c></description></item>
    /// </list>
    /// </remarks>
    public partial class WorksheetSortMap : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "worksheetSortMap");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "CT_WorksheetSortMap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class.
        /// </summary>
        public WorksheetSortMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WorksheetSortMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public WorksheetSortMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the WorksheetSortMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public WorksheetSortMap(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Excel.ColumnSortMap.ElementType, static () => new DocumentFormat.OpenXml.Office.Excel.ColumnSortMap());
            builder.AddChild(DocumentFormat.OpenXml.Office.Excel.RowSortMap.ElementType, static () => new DocumentFormat.OpenXml.Office.Excel.RowSortMap());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Excel.RowSortMap.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Excel.ColumnSortMap.ElementType, 0, 1)
            };
        }

        /// <summary>
        /// <para>Row Sort Map.</para>
        /// <para>Represents the following element tag in the schema: xne:rowSortMap.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:xne = http://schemas.microsoft.com/office/excel/2006/main
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Excel.RowSortMap? RowSortMap
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Excel.RowSortMap.ElementType) as DocumentFormat.OpenXml.Office.Excel.RowSortMap;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Excel.RowSortMap.ElementType);
        }

        /// <summary>
        /// <para>Column Sort Map.</para>
        /// <para>Represents the following element tag in the schema: xne:colSortMap.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:xne = http://schemas.microsoft.com/office/excel/2006/main
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Excel.ColumnSortMap? ColumnSortMap
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Excel.ColumnSortMap.ElementType) as DocumentFormat.OpenXml.Office.Excel.ColumnSortMap;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Excel.ColumnSortMap.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WorksheetSortMap>(deep);

        internal WorksheetSortMap(WorksheetSortMapPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the WorksheetSortMapPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(WorksheetSortMapPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the WorksheetSortMapPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(WorksheetSortMapPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the WorksheetSortMapPart associated with this element.
        /// </summary>
        public WorksheetSortMapPart? WorksheetSortMapPart
        {
            get => OpenXmlPart as WorksheetSortMapPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the ReferenceSequence Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:sqref.</para>
    /// </summary>
    public partial class ReferenceSequence : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "sqref");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "ST_Sqref");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ReferenceSequence class.
        /// </summary>
        public ReferenceSequence() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ReferenceSequence class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ReferenceSequence(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new ListValue<StringValue> { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<ListValue<StringValue>>(NumberValidator.Instance);
            builder.SetSchema(ElementType);
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReferenceSequence>(deep);
    }

    /// <summary>
    /// <para>Defines the Formula Class.</para>
    /// <para>This class is available in Office 2010 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:f.</para>
    /// </summary>
    public partial class Formula : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "f");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/spreadsheetml/2006/main", "ST_Formula");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Formula class.
        /// </summary>
        public Formula() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Formula class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Formula(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Availability = FileFormatVersions.Office2010;
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Formula>(deep);
    }

    /// <summary>
    /// <para>Row Sort Map.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:rowSortMap.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.RowSortMapItem" /> <c>&lt;xne:row></c></description></item>
    /// </list>
    /// </remarks>
    public partial class RowSortMap : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "rowSortMap");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "CT_RowSortMap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the RowSortMap class.
        /// </summary>
        public RowSortMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RowSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RowSortMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RowSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public RowSortMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the RowSortMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public RowSortMap(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Reference</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue? Ref
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Count</para>
        /// <para>Represents the following attribute in the schema: count</para>
        /// </summary>
        public UInt32Value? Count
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Excel.RowSortMapItem.ElementType, static () => new DocumentFormat.OpenXml.Office.Excel.RowSortMapItem());
            builder.AddElement<RowSortMap>()
                .AddAttribute("ref", a => a.Ref, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("count", a => a.Count, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (536870910L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Excel.RowSortMapItem.ElementType, 1, 536870910)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowSortMap>(deep);
    }

    /// <summary>
    /// <para>Column Sort Map.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:colSortMap.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Excel.ColumnSortMapItem" /> <c>&lt;xne:col></c></description></item>
    /// </list>
    /// </remarks>
    public partial class ColumnSortMap : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "colSortMap");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "CT_ColSortMap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class.
        /// </summary>
        public ColumnSortMap() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColumnSortMap(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ColumnSortMap(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ColumnSortMap class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ColumnSortMap(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Reference</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue? Ref
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Count</para>
        /// <para>Represents the following attribute in the schema: count</para>
        /// </summary>
        public UInt32Value? Count
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Excel.ColumnSortMapItem.ElementType, static () => new DocumentFormat.OpenXml.Office.Excel.ColumnSortMapItem());
            builder.AddElement<ColumnSortMap>()
                .AddAttribute("ref", a => a.Ref, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("count", a => a.Count, aBuilder =>
                {
                    aBuilder.AddValidator(new NumberValidator() { MaxInclusive = (536870910L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Excel.ColumnSortMapItem.ElementType, 1, 536870910)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnSortMap>(deep);
    }

    /// <summary>
    /// <para>Row.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:row.</para>
    /// </summary>
    public partial class RowSortMapItem : SortMapItemType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "row");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "CT_SortMapItem");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the RowSortMapItem class.
        /// </summary>
        public RowSortMapItem() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RowSortMapItem>(deep);
    }

    /// <summary>
    /// <para>Column.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xne:col.</para>
    /// </summary>
    public partial class ColumnSortMapItem : SortMapItemType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/excel/2006/main", "col");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "CT_SortMapItem");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ColumnSortMapItem class.
        /// </summary>
        public ColumnSortMapItem() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ColumnSortMapItem>(deep);
    }

    /// <summary>
    /// <para>Defines the SortMapItemType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class SortMapItemType : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/excel/2006/main", "CT_SortMapItem");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the SortMapItemType class.
        /// </summary>
        protected SortMapItemType() : base()
        {
        }

        /// <summary>
        /// <para>New Value</para>
        /// <para>Represents the following attribute in the schema: newVal</para>
        /// </summary>
        public UInt32Value? NewVal
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Old Value</para>
        /// <para>Represents the following attribute in the schema: oldVal</para>
        /// </summary>
        public UInt32Value? OldVal
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<SortMapItemType>()
                .AddAttribute("newVal", a => a.NewVal, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                })
                .AddAttribute("oldVal", a => a.OldVal, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }
    }
}
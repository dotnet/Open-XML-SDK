// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using DocumentFormat.OpenXml.Validation.Semantic;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.Word
{
    /// <summary>
    /// <para>Defines the TemplateCommandGroup Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:tcg.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.AllocatedCommands" /> <c>&lt;wne:acds></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.KeyMapCustomizations" /> <c>&lt;wne:keymaps></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.MismatchedKeyMapCustomization" /> <c>&lt;wne:keymapsBad></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Toolbars" /> <c>&lt;wne:toolbars></c></description></item>
    /// </list>
    /// </remarks>
    public partial class TemplateCommandGroup : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "tcg");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Tcg");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the TemplateCommandGroup class.
        /// </summary>
        public TemplateCommandGroup() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the TemplateCommandGroup class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TemplateCommandGroup(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TemplateCommandGroup class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public TemplateCommandGroup(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TemplateCommandGroup class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public TemplateCommandGroup(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.AllocatedCommands.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.AllocatedCommands());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.KeyMapCustomizations.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.KeyMapCustomizations());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.MismatchedKeyMapCustomization.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.MismatchedKeyMapCustomization());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.Toolbars.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.Toolbars());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.KeyMapCustomizations.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.MismatchedKeyMapCustomization.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.Toolbars.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.AllocatedCommands.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<TemplateCommandGroup>(deep);

        internal TemplateCommandGroup(CustomizationPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the CustomizationPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(CustomizationPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the CustomizationPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(CustomizationPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the CustomizationPart associated with this element.
        /// </summary>
        public CustomizationPart? CustomizationPart
        {
            get => OpenXmlPart as CustomizationPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the Mcds Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:mcds.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Mcd" /> <c>&lt;wne:mcd></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Mcds : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "mcds");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Mcds");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Mcds class.
        /// </summary>
        public Mcds() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Mcds class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Mcds(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Mcds class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Mcds(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Mcds class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Mcds(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.Mcd.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.Mcd());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.Mcd.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Mcds>(deep);
    }

    /// <summary>
    /// <para>Defines the VbaSuppData Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:vbaSuppData.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.DocEvents" /> <c>&lt;wne:docEvents></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.Mcds" /> <c>&lt;wne:mcds></c></description></item>
    /// </list>
    /// </remarks>
    public partial class VbaSuppData : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "vbaSuppData");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_VbaSuppData");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the VbaSuppData class.
        /// </summary>
        public VbaSuppData() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VbaSuppData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VbaSuppData(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VbaSuppData class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public VbaSuppData(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the VbaSuppData class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public VbaSuppData(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.DocEvents.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.DocEvents());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.Mcds.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.Mcds());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.DocEvents.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.Mcds.ElementType, 0, 1)
            };
        }

        /// <summary>
        /// <para>DocEvents.</para>
        /// <para>Represents the following element tag in the schema: wne:docEvents.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.DocEvents? DocEvents
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.DocEvents.ElementType) as DocumentFormat.OpenXml.Office.Word.DocEvents;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.DocEvents.ElementType);
        }

        /// <summary>
        /// <para>Mcds.</para>
        /// <para>Represents the following element tag in the schema: wne:mcds.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.Mcds? Mcds
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.Mcds.ElementType) as DocumentFormat.OpenXml.Office.Word.Mcds;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.Mcds.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<VbaSuppData>(deep);

        internal VbaSuppData(VbaDataPart ownerPart) : base(ownerPart)
        {
        }

        /// <summary>
        /// Loads the DOM from the VbaDataPart
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to be loaded.</param>
        public void Load(VbaDataPart openXmlPart)
        {
            LoadFromPart(openXmlPart);
        }

        /// <summary>
        /// Saves the DOM into the VbaDataPart.
        /// </summary>
        /// <param name="openXmlPart">Specifies the part to save to.</param>
        public void Save(VbaDataPart openXmlPart)
        {
            base.SaveToPart(openXmlPart);
        }

        /// <summary>
        /// Gets the VbaDataPart associated with this element.
        /// </summary>
        public VbaDataPart? VbaDataPart
        {
            get => OpenXmlPart as VbaDataPart;
            internal set => OpenXmlPart = value;
        }
    }

    /// <summary>
    /// <para>Defines the MailMergeRecipients Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:recipients.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.SingleDataSourceRecord" /> <c>&lt;wne:recipientData></c></description></item>
    /// </list>
    /// </remarks>
    public partial class MailMergeRecipients : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "recipients");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_HashedRecipients");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the MailMergeRecipients class.
        /// </summary>
        public MailMergeRecipients() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMergeRecipients class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MailMergeRecipients(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMergeRecipients class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MailMergeRecipients(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MailMergeRecipients class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MailMergeRecipients(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.SingleDataSourceRecord.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.SingleDataSourceRecord());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.SingleDataSourceRecord.ElementType, 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MailMergeRecipients>(deep);
    }

    /// <summary>
    /// <para>Defines the FixedCommandKeyboardCustomization Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:fci.</para>
    /// </summary>
    public partial class FixedCommandKeyboardCustomization : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "fci");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Fci");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the FixedCommandKeyboardCustomization class.
        /// </summary>
        public FixedCommandKeyboardCustomization() : base()
        {
        }

        /// <summary>
        /// <para>fciName</para>
        /// <para>Represents the following attribute in the schema: wne:fciName</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? CommandName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>fciIndex</para>
        /// <para>Represents the following attribute in the schema: wne:fciIndex</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? CommandIndex
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>swArg</para>
        /// <para>Represents the following attribute in the schema: wne:swArg</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? Argument
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<FixedCommandKeyboardCustomization>()
                .AddAttribute("wne:fciName", a => a.CommandName)
                .AddAttribute("wne:fciIndex", a => a.CommandIndex, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("wne:swArg", a => a.Argument, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<FixedCommandKeyboardCustomization>(deep);
    }

    /// <summary>
    /// <para>Defines the MacroKeyboardCustomization Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:macro.</para>
    /// </summary>
    public partial class MacroKeyboardCustomization : MacroWllType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "macro");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_MacroWll");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the MacroKeyboardCustomization class.
        /// </summary>
        public MacroKeyboardCustomization() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MacroKeyboardCustomization>(deep);
    }

    /// <summary>
    /// <para>Defines the WllMacroKeyboardCustomization Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:wll.</para>
    /// </summary>
    public partial class WllMacroKeyboardCustomization : MacroWllType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "wll");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_MacroWll");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the WllMacroKeyboardCustomization class.
        /// </summary>
        public WllMacroKeyboardCustomization() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<WllMacroKeyboardCustomization>(deep);
    }

    /// <summary>
    /// <para>Defines the MacroWllType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class MacroWllType : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_MacroWll");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the MacroWllType class.
        /// </summary>
        protected MacroWllType() : base()
        {
        }

        /// <summary>
        /// <para>macroName</para>
        /// <para>Represents the following attribute in the schema: wne:macroName</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? MacroName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<MacroWllType>()
                .AddAttribute("wne:macroName", a => a.MacroName);
        }
    }

    /// <summary>
    /// <para>Defines the AllocatedCommandKeyboardCustomization Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:acd.</para>
    /// </summary>
    public partial class AllocatedCommandKeyboardCustomization : AcceleratorKeymapType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "acd");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_AcdKeymap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AllocatedCommandKeyboardCustomization class.
        /// </summary>
        public AllocatedCommandKeyboardCustomization() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllocatedCommandKeyboardCustomization>(deep);
    }

    /// <summary>
    /// <para>Defines the AllocatedCommandManifestEntry Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:acdEntry.</para>
    /// </summary>
    public partial class AllocatedCommandManifestEntry : AcceleratorKeymapType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "acdEntry");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_AcdKeymap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AllocatedCommandManifestEntry class.
        /// </summary>
        public AllocatedCommandManifestEntry() : base()
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllocatedCommandManifestEntry>(deep);
    }

    /// <summary>
    /// <para>Defines the AcceleratorKeymapType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    public abstract partial class AcceleratorKeymapType : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_AcdKeymap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AcceleratorKeymapType class.
        /// </summary>
        protected AcceleratorKeymapType() : base()
        {
        }

        /// <summary>
        /// <para>acdName</para>
        /// <para>Represents the following attribute in the schema: wne:acdName</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? AcceleratorName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddElement<AcceleratorKeymapType>()
                .AddAttribute("wne:acdName", a => a.AcceleratorName);
        }
    }

    /// <summary>
    /// <para>Defines the CharacterInsertion Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:wch.</para>
    /// </summary>
    public partial class CharacterInsertion : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "wch");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_LongHexNumber");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the CharacterInsertion class.
        /// </summary>
        public CharacterInsertion() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: wne:val</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? Val
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<CharacterInsertion>()
                .AddAttribute("wne:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                    aBuilder.AddValidator(new StringValidator() { Length = (4L) });
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CharacterInsertion>(deep);
    }

    /// <summary>
    /// <para>Defines the KeyMapEntry Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:keymap.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization" /> <c>&lt;wne:acd></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization" /> <c>&lt;wne:fci></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.CharacterInsertion" /> <c>&lt;wne:wch></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization" /> <c>&lt;wne:macro></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization" /> <c>&lt;wne:wll></c></description></item>
    /// </list>
    /// </remarks>
    public partial class KeyMapEntry : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "keymap");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Keymap");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the KeyMapEntry class.
        /// </summary>
        public KeyMapEntry() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeyMapEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public KeyMapEntry(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeyMapEntry class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public KeyMapEntry(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeyMapEntry class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public KeyMapEntry(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>chmPrimary</para>
        /// <para>Represents the following attribute in the schema: wne:chmPrimary</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? CharacterMapPrimary
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>chmSecondary</para>
        /// <para>Represents the following attribute in the schema: wne:chmSecondary</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? CharacterMapSecondary
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>kcmPrimary</para>
        /// <para>Represents the following attribute in the schema: wne:kcmPrimary</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? KeyCodePrimary
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>kcmSecondary</para>
        /// <para>Represents the following attribute in the schema: wne:kcmSecondary</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? KeyCodeSecondary
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>mask</para>
        /// <para>Represents the following attribute in the schema: wne:mask</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public OnOffValue? Mask
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.CharacterInsertion.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.CharacterInsertion());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization());
            builder.AddElement<KeyMapEntry>()
                .AddAttribute("wne:chmPrimary", a => a.CharacterMapPrimary, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("wne:chmSecondary", a => a.CharacterMapSecondary, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("wne:kcmPrimary", a => a.KeyCodePrimary, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("wne:kcmSecondary", a => a.KeyCodeSecondary, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("wne:mask", a => a.Mask);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization.ElementType, 1, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization.ElementType, 1, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization.ElementType, 1, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization.ElementType, 1, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.CharacterInsertion.ElementType, 1, 1)
            };
        }

        /// <summary>
        /// <para>FixedCommandKeyboardCustomization.</para>
        /// <para>Represents the following element tag in the schema: wne:fci.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization? FixedCommandKeyboardCustomization
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization.ElementType) as DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.FixedCommandKeyboardCustomization.ElementType);
        }

        /// <summary>
        /// <para>MacroKeyboardCustomization.</para>
        /// <para>Represents the following element tag in the schema: wne:macro.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization? MacroKeyboardCustomization
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization.ElementType) as DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.MacroKeyboardCustomization.ElementType);
        }

        /// <summary>
        /// <para>AllocatedCommandKeyboardCustomization.</para>
        /// <para>Represents the following element tag in the schema: wne:acd.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization? AllocatedCommandKeyboardCustomization
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization.ElementType) as DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.AllocatedCommandKeyboardCustomization.ElementType);
        }

        /// <summary>
        /// <para>WllMacroKeyboardCustomization.</para>
        /// <para>Represents the following element tag in the schema: wne:wll.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization? WllMacroKeyboardCustomization
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization.ElementType) as DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.WllMacroKeyboardCustomization.ElementType);
        }

        /// <summary>
        /// <para>CharacterInsertion.</para>
        /// <para>Represents the following element tag in the schema: wne:wch.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.CharacterInsertion? CharacterInsertion
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.CharacterInsertion.ElementType) as DocumentFormat.OpenXml.Office.Word.CharacterInsertion;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.CharacterInsertion.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<KeyMapEntry>(deep);
    }

    /// <summary>
    /// <para>Defines the AllocatedCommand Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:acd.</para>
    /// </summary>
    public partial class AllocatedCommand : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "acd");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Acd");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AllocatedCommand class.
        /// </summary>
        public AllocatedCommand() : base()
        {
        }

        /// <summary>
        /// <para>argValue</para>
        /// <para>Represents the following attribute in the schema: wne:argValue</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? ArgumentValue
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>fciBasedOn</para>
        /// <para>Represents the following attribute in the schema: wne:fciBasedOn</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? CommandBasedOn
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>fciIndexBasedOn</para>
        /// <para>Represents the following attribute in the schema: wne:fciIndexBasedOn</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? CommandIndexBasedOn
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>acdName</para>
        /// <para>Represents the following attribute in the schema: wne:acdName</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? AcceleratorName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<AllocatedCommand>()
                .AddAttribute("wne:argValue", a => a.ArgumentValue)
                .AddAttribute("wne:fciBasedOn", a => a.CommandBasedOn)
                .AddAttribute("wne:fciIndexBasedOn", a => a.CommandIndexBasedOn, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (2L) });
                })
                .AddAttribute("wne:acdName", a => a.AcceleratorName);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllocatedCommand>(deep);
    }

    /// <summary>
    /// <para>Defines the Mcd Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:mcd.</para>
    /// </summary>
    public partial class Mcd : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "mcd");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Mcd");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Mcd class.
        /// </summary>
        public Mcd() : base()
        {
        }

        /// <summary>
        /// <para>macroName</para>
        /// <para>Represents the following attribute in the schema: wne:macroName</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? MacroName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>name</para>
        /// <para>Represents the following attribute in the schema: wne:name</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? Name
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>menuHelp</para>
        /// <para>Represents the following attribute in the schema: wne:menuHelp</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public StringValue? MenuHelp
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>bEncrypt</para>
        /// <para>Represents the following attribute in the schema: wne:bEncrypt</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? BEncrypt
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>cmg</para>
        /// <para>Represents the following attribute in the schema: wne:cmg</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public HexBinaryValue? Cmg
        {
            get => GetAttribute<HexBinaryValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<Mcd>()
                .AddAttribute("wne:macroName", a => a.MacroName)
                .AddAttribute("wne:name", a => a.Name)
                .AddAttribute("wne:menuHelp", a => a.MenuHelp)
                .AddAttribute("wne:bEncrypt", a => a.BEncrypt, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (1L) });
                })
                .AddAttribute("wne:cmg", a => a.Cmg, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { Length = (1L) });
                });
            builder.AddConstraint(new AttributeValueLengthConstraint(builder.CreateQName("wne:name"), 0, 255) { Version = FileFormatVersions.Office2010 });
            builder.AddConstraint(new AttributeValueSetConstraint(builder.CreateQName("wne:bEncrypt"), true, new string[] { "0" }) { Version = FileFormatVersions.Office2010 });
            builder.AddConstraint(new AttributeValueSetConstraint(builder.CreateQName("wne:cmg"), true, new string[] { "56" }) { Version = FileFormatVersions.Office2010 });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Mcd>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocNewXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocNew.</para>
    /// </summary>
    public partial class EventDocNewXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocNew");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocNewXsdString class.
        /// </summary>
        public EventDocNewXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocNewXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocNewXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocNewXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocOpenXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocOpen.</para>
    /// </summary>
    public partial class EventDocOpenXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocOpen");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocOpenXsdString class.
        /// </summary>
        public EventDocOpenXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocOpenXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocOpenXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocOpenXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocCloseXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocClose.</para>
    /// </summary>
    public partial class EventDocCloseXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocClose");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocCloseXsdString class.
        /// </summary>
        public EventDocCloseXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocCloseXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocCloseXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocCloseXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocSyncXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocSync.</para>
    /// </summary>
    public partial class EventDocSyncXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocSync");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocSyncXsdString class.
        /// </summary>
        public EventDocSyncXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocSyncXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocSyncXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocSyncXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocXmlAfterInsertXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocXmlAfterInsert.</para>
    /// </summary>
    public partial class EventDocXmlAfterInsertXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocXmlAfterInsert");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocXmlAfterInsertXsdString class.
        /// </summary>
        public EventDocXmlAfterInsertXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocXmlAfterInsertXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocXmlAfterInsertXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocXmlAfterInsertXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocXmlBeforeDeleteXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocXmlBeforeDelete.</para>
    /// </summary>
    public partial class EventDocXmlBeforeDeleteXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocXmlBeforeDelete");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocXmlBeforeDeleteXsdString class.
        /// </summary>
        public EventDocXmlBeforeDeleteXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocXmlBeforeDeleteXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocXmlBeforeDeleteXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocXmlBeforeDeleteXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocContentControlAfterInsertXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocContentControlAfterInsert.</para>
    /// </summary>
    public partial class EventDocContentControlAfterInsertXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocContentControlAfterInsert");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlAfterInsertXsdString class.
        /// </summary>
        public EventDocContentControlAfterInsertXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlAfterInsertXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocContentControlAfterInsertXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocContentControlAfterInsertXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocContentControlBeforeDeleteXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocContentControlBeforeDelete.</para>
    /// </summary>
    public partial class EventDocContentControlBeforeDeleteXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocContentControlBeforeDelete");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlBeforeDeleteXsdString class.
        /// </summary>
        public EventDocContentControlBeforeDeleteXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlBeforeDeleteXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocContentControlBeforeDeleteXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocContentControlBeforeDeleteXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocContentControlOnExistXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocContentControlOnExit.</para>
    /// </summary>
    public partial class EventDocContentControlOnExistXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocContentControlOnExit");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlOnExistXsdString class.
        /// </summary>
        public EventDocContentControlOnExistXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlOnExistXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocContentControlOnExistXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocContentControlOnExistXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocContentControlOnEnterXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocContentControlOnEnter.</para>
    /// </summary>
    public partial class EventDocContentControlOnEnterXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocContentControlOnEnter");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlOnEnterXsdString class.
        /// </summary>
        public EventDocContentControlOnEnterXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlOnEnterXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocContentControlOnEnterXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocContentControlOnEnterXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocStoreUpdateXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocStoreUpdate.</para>
    /// </summary>
    public partial class EventDocStoreUpdateXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocStoreUpdate");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocStoreUpdateXsdString class.
        /// </summary>
        public EventDocStoreUpdateXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocStoreUpdateXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocStoreUpdateXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocStoreUpdateXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocContentControlUpdateXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocContentControlContentUpdate.</para>
    /// </summary>
    public partial class EventDocContentControlUpdateXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocContentControlContentUpdate");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlUpdateXsdString class.
        /// </summary>
        public EventDocContentControlUpdateXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocContentControlUpdateXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocContentControlUpdateXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocContentControlUpdateXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the EventDocBuildingBlockAfterInsertXsdString Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:eventDocBuildingBlockAfterInsert.</para>
    /// </summary>
    public partial class EventDocBuildingBlockAfterInsertXsdString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "eventDocBuildingBlockAfterInsert");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://www.w3.org/2001/XMLSchema", "string");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the EventDocBuildingBlockAfterInsertXsdString class.
        /// </summary>
        public EventDocBuildingBlockAfterInsertXsdString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EventDocBuildingBlockAfterInsertXsdString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public EventDocBuildingBlockAfterInsertXsdString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<EventDocBuildingBlockAfterInsertXsdString>(deep);
    }

    /// <summary>
    /// <para>Defines the DocEvents Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:docEvents.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString" /> <c>&lt;wne:eventDocNew></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString" /> <c>&lt;wne:eventDocOpen></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString" /> <c>&lt;wne:eventDocClose></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString" /> <c>&lt;wne:eventDocSync></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString" /> <c>&lt;wne:eventDocXmlAfterInsert></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString" /> <c>&lt;wne:eventDocXmlBeforeDelete></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString" /> <c>&lt;wne:eventDocContentControlAfterInsert></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString" /> <c>&lt;wne:eventDocContentControlBeforeDelete></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString" /> <c>&lt;wne:eventDocContentControlOnExit></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString" /> <c>&lt;wne:eventDocContentControlOnEnter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString" /> <c>&lt;wne:eventDocStoreUpdate></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString" /> <c>&lt;wne:eventDocContentControlContentUpdate></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString" /> <c>&lt;wne:eventDocBuildingBlockAfterInsert></c></description></item>
    /// </list>
    /// </remarks>
    public partial class DocEvents : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "docEvents");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_DocEvents");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the DocEvents class.
        /// </summary>
        public DocEvents() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocEvents class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocEvents(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocEvents class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public DocEvents(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the DocEvents class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public DocEvents(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString.ElementType, 0, 1)
            };
        }

        /// <summary>
        /// <para>EventDocNewXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocNew.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString? EventDocNewXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocNewXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocOpenXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocOpen.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString? EventDocOpenXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocOpenXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocCloseXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocClose.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString? EventDocCloseXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocCloseXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocSyncXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocSync.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString? EventDocSyncXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocSyncXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocXmlAfterInsertXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocXmlAfterInsert.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString? EventDocXmlAfterInsertXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocXmlAfterInsertXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocXmlBeforeDeleteXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocXmlBeforeDelete.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString? EventDocXmlBeforeDeleteXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocXmlBeforeDeleteXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocContentControlAfterInsertXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocContentControlAfterInsert.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString? EventDocContentControlAfterInsertXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocContentControlAfterInsertXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocContentControlBeforeDeleteXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocContentControlBeforeDelete.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString? EventDocContentControlBeforeDeleteXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocContentControlBeforeDeleteXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocContentControlOnExistXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocContentControlOnExit.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString? EventDocContentControlOnExistXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnExistXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocContentControlOnEnterXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocContentControlOnEnter.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString? EventDocContentControlOnEnterXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocContentControlOnEnterXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocStoreUpdateXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocStoreUpdate.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString? EventDocStoreUpdateXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocStoreUpdateXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocContentControlUpdateXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocContentControlContentUpdate.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString? EventDocContentControlUpdateXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocContentControlUpdateXsdString.ElementType);
        }

        /// <summary>
        /// <para>EventDocBuildingBlockAfterInsertXsdString.</para>
        /// <para>Represents the following element tag in the schema: wne:eventDocBuildingBlockAfterInsert.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString? EventDocBuildingBlockAfterInsertXsdString
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString.ElementType) as DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.EventDocBuildingBlockAfterInsertXsdString.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DocEvents>(deep);
    }

    /// <summary>
    /// <para>Defines the AllocatedCommandManifest Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:acdManifest.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifestEntry" /> <c>&lt;wne:acdEntry></c></description></item>
    /// </list>
    /// </remarks>
    public partial class AllocatedCommandManifest : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "acdManifest");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_AcdManifest");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AllocatedCommandManifest class.
        /// </summary>
        public AllocatedCommandManifest() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AllocatedCommandManifest class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AllocatedCommandManifest(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AllocatedCommandManifest class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AllocatedCommandManifest(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AllocatedCommandManifest class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AllocatedCommandManifest(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifestEntry.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifestEntry());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifestEntry.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllocatedCommandManifest>(deep);
    }

    /// <summary>
    /// <para>Defines the ToolbarData Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:toolbarData.</para>
    /// </summary>
    public partial class ToolbarData : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "toolbarData");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Rel");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ToolbarData class.
        /// </summary>
        public ToolbarData() : base()
        {
        }

        /// <summary>
        /// <para>id</para>
        /// <para>Represents the following attribute in the schema: r:id</para>
        /// </summary>
        /// <remarks>
        /// xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
        /// </remarks>
        public StringValue? Id
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<ToolbarData>()
                .AddAttribute("r:id", a => a.Id, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ToolbarData>(deep);
    }

    /// <summary>
    /// <para>Defines the KeyMapCustomizations Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:keymaps.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.KeyMapEntry" /> <c>&lt;wne:keymap></c></description></item>
    /// </list>
    /// </remarks>
    public partial class KeyMapCustomizations : KeymapsType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "keymaps");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Keymaps");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the KeyMapCustomizations class.
        /// </summary>
        public KeyMapCustomizations() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeyMapCustomizations class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public KeyMapCustomizations(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeyMapCustomizations class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public KeyMapCustomizations(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeyMapCustomizations class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public KeyMapCustomizations(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.KeyMapEntry.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<KeyMapCustomizations>(deep);
    }

    /// <summary>
    /// <para>Defines the MismatchedKeyMapCustomization Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:keymapsBad.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.KeyMapEntry" /> <c>&lt;wne:keymap></c></description></item>
    /// </list>
    /// </remarks>
    public partial class MismatchedKeyMapCustomization : KeymapsType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "keymapsBad");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Keymaps");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the MismatchedKeyMapCustomization class.
        /// </summary>
        public MismatchedKeyMapCustomization() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MismatchedKeyMapCustomization class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MismatchedKeyMapCustomization(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MismatchedKeyMapCustomization class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public MismatchedKeyMapCustomization(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the MismatchedKeyMapCustomization class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public MismatchedKeyMapCustomization(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.KeyMapEntry.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MismatchedKeyMapCustomization>(deep);
    }

    /// <summary>
    /// <para>Defines the KeymapsType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.KeyMapEntry" /> <c>&lt;wne:keymap></c></description></item>
    /// </list>
    /// </remarks>
    public abstract partial class KeymapsType : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Keymaps");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the KeymapsType class.
        /// </summary>
        protected KeymapsType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeymapsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected KeymapsType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeymapsType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected KeymapsType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the KeymapsType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected KeymapsType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.KeyMapEntry.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.KeyMapEntry());
        }
    }

    /// <summary>
    /// <para>Defines the Toolbars Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:toolbars.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifest" /> <c>&lt;wne:acdManifest></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.ToolbarData" /> <c>&lt;wne:toolbarData></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Toolbars : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "toolbars");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Toolbars");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Toolbars class.
        /// </summary>
        public Toolbars() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Toolbars class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Toolbars(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Toolbars class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Toolbars(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Toolbars class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Toolbars(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifest.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifest());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.ToolbarData.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.ToolbarData());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.AllocatedCommandManifest.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.ToolbarData.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Toolbars>(deep);
    }

    /// <summary>
    /// <para>Defines the AllocatedCommands Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:acds.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.AllocatedCommand" /> <c>&lt;wne:acd></c></description></item>
    /// </list>
    /// </remarks>
    public partial class AllocatedCommands : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "acds");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_Acds");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AllocatedCommands class.
        /// </summary>
        public AllocatedCommands() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AllocatedCommands class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AllocatedCommands(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AllocatedCommands class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AllocatedCommands(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AllocatedCommands class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AllocatedCommands(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.AllocatedCommand.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.AllocatedCommand());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.AllocatedCommand.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AllocatedCommands>(deep);
    }

    /// <summary>
    /// <para>Defines the RecordIncluded Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:active.</para>
    /// </summary>
    public partial class RecordIncluded : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "active");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_OnOff");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the RecordIncluded class.
        /// </summary>
        public RecordIncluded() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: wne:val</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public OnOffValue? Val
        {
            get => GetAttribute<OnOffValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<RecordIncluded>()
                .AddAttribute("wne:val", a => a.Val);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecordIncluded>(deep);
    }

    /// <summary>
    /// <para>Defines the RecordHashCode Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:hash.</para>
    /// </summary>
    public partial class RecordHashCode : OpenXmlLeafElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "hash");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_DecimalNumber");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the RecordHashCode class.
        /// </summary>
        public RecordHashCode() : base()
        {
        }

        /// <summary>
        /// <para>val</para>
        /// <para>Represents the following attribute in the schema: wne:val</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne=http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public IntegerValue? Val
        {
            get => GetAttribute<IntegerValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddElement<RecordHashCode>()
                .AddAttribute("wne:val", a => a.Val, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecordHashCode>(deep);
    }

    /// <summary>
    /// <para>Defines the SingleDataSourceRecord Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is wne:recipientData.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.RecordHashCode" /> <c>&lt;wne:hash></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Office.Word.RecordIncluded" /> <c>&lt;wne:active></c></description></item>
    /// </list>
    /// </remarks>
    public partial class SingleDataSourceRecord : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.microsoft.com/office/word/2006/wordml", "recipientData");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.microsoft.com/office/word/2006/wordml", "CT_HashedRecipientData");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the SingleDataSourceRecord class.
        /// </summary>
        public SingleDataSourceRecord() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SingleDataSourceRecord class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SingleDataSourceRecord(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SingleDataSourceRecord class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public SingleDataSourceRecord(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the SingleDataSourceRecord class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public SingleDataSourceRecord(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.RecordHashCode.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.RecordHashCode());
            builder.AddChild(DocumentFormat.OpenXml.Office.Word.RecordIncluded.ElementType, static () => new DocumentFormat.OpenXml.Office.Word.RecordIncluded());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.RecordIncluded.ElementType, 0, 1),
                new ElementParticle(DocumentFormat.OpenXml.Office.Word.RecordHashCode.ElementType, 1, 1)
            };
        }

        /// <summary>
        /// <para>RecordIncluded.</para>
        /// <para>Represents the following element tag in the schema: wne:active.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.RecordIncluded? RecordIncluded
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.RecordIncluded.ElementType) as DocumentFormat.OpenXml.Office.Word.RecordIncluded;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.RecordIncluded.ElementType);
        }

        /// <summary>
        /// <para>RecordHashCode.</para>
        /// <para>Represents the following element tag in the schema: wne:hash.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:wne = http://schemas.microsoft.com/office/word/2006/wordml
        /// </remarks>
        public DocumentFormat.OpenXml.Office.Word.RecordHashCode? RecordHashCode
        {
            get => GetElement(DocumentFormat.OpenXml.Office.Word.RecordHashCode.ElementType) as DocumentFormat.OpenXml.Office.Word.RecordHashCode;
            set => SetElement(value, DocumentFormat.OpenXml.Office.Word.RecordHashCode.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SingleDataSourceRecord>(deep);
    }
}
// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.SpreadSheetML.Y2024.PivotDynamicArrays
{
    /// <summary>
    /// <para>Defines the PivotCacheDynamicArray Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xlpda:pivotCacheDynamicArray.</para>
    /// </summary>
    public partial class PivotCacheDynamicArray : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the PivotCacheDynamicArray class.
        /// </summary>
        public PivotCacheDynamicArray() : base()
        {
        }

        /// <summary>
        /// <para>ref, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: ref</para>
        /// </summary>
        public StringValue? Ref
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xlpda:pivotCacheDynamicArray");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<PivotCacheDynamicArray>()
                .AddAttribute("ref", a => a.Ref, aBuilder =>
                {
                    aBuilder.AddValidator(RequiredValidator.Instance);
                });
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PivotCacheDynamicArray>(deep);
    }
}
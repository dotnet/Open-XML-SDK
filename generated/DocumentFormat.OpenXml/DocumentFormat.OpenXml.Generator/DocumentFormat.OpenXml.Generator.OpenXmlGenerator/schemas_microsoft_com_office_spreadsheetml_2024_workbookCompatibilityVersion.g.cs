// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Office.SpreadSheetML.Y2024.WorkbookCompatibilityVersion
{
    /// <summary>
    /// <para>Defines the Version Class.</para>
    /// <para>This class is available in Microsoft365 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is xlwcv:version.</para>
    /// </summary>
    public partial class Version : OpenXmlLeafElement
    {
        /// <summary>
        /// Initializes a new instance of the Version class.
        /// </summary>
        public Version() : base()
        {
        }

        /// <summary>
        /// <para>warnBelowVersion, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: warnBelowVersion</para>
        /// </summary>
        public UInt32Value? WarnBelowVersion
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>setVersion, this property is only available in Microsoft365 and later.</para>
        /// <para>Represents the following attribute in the schema: setVersion</para>
        /// </summary>
        public UInt32Value? SetVersion
        {
            get => GetAttribute<UInt32Value>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema("xlwcv:version");
            builder.Availability = FileFormatVersions.Microsoft365;
            builder.AddElement<Version>()
                .AddAttribute("warnBelowVersion", a => a.WarnBelowVersion)
                .AddAttribute("setVersion", a => a.SetVersion);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Version>(deep);
    }
}
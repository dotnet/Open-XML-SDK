// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Framework;
using DocumentFormat.OpenXml.Framework.Metadata;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Validation.Schema;
using System;
using System.Collections.Generic;
using System.IO.Packaging;

namespace DocumentFormat.OpenXml.Bibliography
{
    /// <summary>
    /// <para>Sources.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Sources.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Source" /> <c>&lt;b:Source></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Sources : OpenXmlPartRootElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Sources");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_Sources");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Sources class.
        /// </summary>
        public Sources() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Sources class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Sources(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Sources class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Sources(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Sources class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Sources(string outerXml) : base(outerXml)
        {
        }

        /// <summary>
        /// <para>Selected Style</para>
        /// <para>Represents the following attribute in the schema: SelectedStyle</para>
        /// </summary>
        public StringValue? SelectedStyle
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Documentation Style Name</para>
        /// <para>Represents the following attribute in the schema: StyleName</para>
        /// </summary>
        public StringValue? StyleName
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        /// <summary>
        /// <para>Uniform Resource Identifier</para>
        /// <para>Represents the following attribute in the schema: URI</para>
        /// </summary>
        public StringValue? Uri
        {
            get => GetAttribute<StringValue>();
            set => SetAttribute(value);
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Source.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Source());
            builder.AddElement<Sources>()
                .AddAttribute("SelectedStyle", a => a.SelectedStyle, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
                })
                .AddAttribute("StyleName", a => a.StyleName, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
                })
                .AddAttribute("URI", a => a.Uri, aBuilder =>
                {
                    aBuilder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
                });
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.Source.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Sources>(deep);
    }

    /// <summary>
    /// <para>Person.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Person.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Last" /> <c>&lt;b:Last></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.First" /> <c>&lt;b:First></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Middle" /> <c>&lt;b:Middle></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Person : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Person");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_PersonType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Person class.
        /// </summary>
        public Person() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Person class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Person(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Person class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Person(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Person class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Person(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Last.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Last());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.First.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.First());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Middle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Middle());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.Last.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.First.ElementType, 0, 0),
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.Middle.ElementType, 0, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Person>(deep);
    }

    /// <summary>
    /// <para>Person's Last, or Family, Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Last.</para>
    /// </summary>
    public partial class Last : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Last");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Last class.
        /// </summary>
        public Last() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Last class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Last(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Last>(deep);
    }

    /// <summary>
    /// <para>Person's First, or Given, Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:First.</para>
    /// </summary>
    public partial class First : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "First");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the First class.
        /// </summary>
        public First() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the First class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public First(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<First>(deep);
    }

    /// <summary>
    /// <para>Person's Middle, or Other, Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Middle.</para>
    /// </summary>
    public partial class Middle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Middle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Middle class.
        /// </summary>
        public Middle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Middle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Middle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Middle>(deep);
    }

    /// <summary>
    /// <para>Corporate Author.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Corporate.</para>
    /// </summary>
    public partial class Corporate : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Corporate");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Corporate class.
        /// </summary>
        public Corporate() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Corporate class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Corporate(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Corporate>(deep);
    }

    /// <summary>
    /// <para>Abbreviated Case Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:AbbreviatedCaseNumber.</para>
    /// </summary>
    public partial class AbbreviatedCaseNumber : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "AbbreviatedCaseNumber");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AbbreviatedCaseNumber class.
        /// </summary>
        public AbbreviatedCaseNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AbbreviatedCaseNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public AbbreviatedCaseNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AbbreviatedCaseNumber>(deep);
    }

    /// <summary>
    /// <para>Album Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:AlbumTitle.</para>
    /// </summary>
    public partial class AlbumTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "AlbumTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AlbumTitle class.
        /// </summary>
        public AlbumTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AlbumTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public AlbumTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AlbumTitle>(deep);
    }

    /// <summary>
    /// <para>Book Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:BookTitle.</para>
    /// </summary>
    public partial class BookTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "BookTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the BookTitle class.
        /// </summary>
        public BookTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public BookTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookTitle>(deep);
    }

    /// <summary>
    /// <para>Broadcaster.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Broadcaster.</para>
    /// </summary>
    public partial class Broadcaster : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Broadcaster");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Broadcaster class.
        /// </summary>
        public Broadcaster() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Broadcaster class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Broadcaster(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Broadcaster>(deep);
    }

    /// <summary>
    /// <para>Broadcast Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:BroadcastTitle.</para>
    /// </summary>
    public partial class BroadcastTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "BroadcastTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the BroadcastTitle class.
        /// </summary>
        public BroadcastTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BroadcastTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public BroadcastTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BroadcastTitle>(deep);
    }

    /// <summary>
    /// <para>Case Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:CaseNumber.</para>
    /// </summary>
    public partial class CaseNumber : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CaseNumber");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the CaseNumber class.
        /// </summary>
        public CaseNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CaseNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public CaseNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CaseNumber>(deep);
    }

    /// <summary>
    /// <para>Chapter Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ChapterNumber.</para>
    /// </summary>
    public partial class ChapterNumber : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ChapterNumber");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ChapterNumber class.
        /// </summary>
        public ChapterNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ChapterNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ChapterNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ChapterNumber>(deep);
    }

    /// <summary>
    /// <para>City.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:City.</para>
    /// </summary>
    public partial class City : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "City");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the City class.
        /// </summary>
        public City() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the City class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public City(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<City>(deep);
    }

    /// <summary>
    /// <para>Comments.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Comments.</para>
    /// </summary>
    public partial class Comments : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Comments");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Comments class.
        /// </summary>
        public Comments() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Comments class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Comments(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Comments>(deep);
    }

    /// <summary>
    /// <para>Conference or Proceedings Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ConferenceName.</para>
    /// </summary>
    public partial class ConferenceName : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ConferenceName");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ConferenceName class.
        /// </summary>
        public ConferenceName() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ConferenceName class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ConferenceName(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ConferenceName>(deep);
    }

    /// <summary>
    /// <para>Country or Region.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:CountryRegion.</para>
    /// </summary>
    public partial class CountryRegion : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CountryRegion");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the CountryRegion class.
        /// </summary>
        public CountryRegion() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the CountryRegion class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public CountryRegion(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<CountryRegion>(deep);
    }

    /// <summary>
    /// <para>Court.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Court.</para>
    /// </summary>
    public partial class Court : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Court");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Court class.
        /// </summary>
        public Court() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Court class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Court(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Court>(deep);
    }

    /// <summary>
    /// <para>Day.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Day.</para>
    /// </summary>
    public partial class Day : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Day");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Day class.
        /// </summary>
        public Day() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Day class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Day(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Day>(deep);
    }

    /// <summary>
    /// <para>Day Accessed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:DayAccessed.</para>
    /// </summary>
    public partial class DayAccessed : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "DayAccessed");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the DayAccessed class.
        /// </summary>
        public DayAccessed() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the DayAccessed class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public DayAccessed(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<DayAccessed>(deep);
    }

    /// <summary>
    /// <para>Department.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Department.</para>
    /// </summary>
    public partial class Department : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Department");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Department class.
        /// </summary>
        public Department() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Department class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Department(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Department>(deep);
    }

    /// <summary>
    /// <para>Distributor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Distributor.</para>
    /// </summary>
    public partial class Distributor : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Distributor");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Distributor class.
        /// </summary>
        public Distributor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Distributor class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Distributor(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Distributor>(deep);
    }

    /// <summary>
    /// <para>Editor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Edition.</para>
    /// </summary>
    public partial class Edition : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Edition");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Edition class.
        /// </summary>
        public Edition() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Edition class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Edition(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Edition>(deep);
    }

    /// <summary>
    /// <para>GUID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Guid.</para>
    /// </summary>
    public partial class GuidString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Guid");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the GuidString class.
        /// </summary>
        public GuidString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the GuidString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public GuidString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<GuidString>(deep);
    }

    /// <summary>
    /// <para>Institution.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Institution.</para>
    /// </summary>
    public partial class Institution : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Institution");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Institution class.
        /// </summary>
        public Institution() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Institution class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Institution(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Institution>(deep);
    }

    /// <summary>
    /// <para>Internet Site Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:InternetSiteTitle.</para>
    /// </summary>
    public partial class InternetSiteTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "InternetSiteTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the InternetSiteTitle class.
        /// </summary>
        public InternetSiteTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the InternetSiteTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public InternetSiteTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<InternetSiteTitle>(deep);
    }

    /// <summary>
    /// <para>Issue.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Issue.</para>
    /// </summary>
    public partial class Issue : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Issue");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Issue class.
        /// </summary>
        public Issue() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Issue class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Issue(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Issue>(deep);
    }

    /// <summary>
    /// <para>Journal Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:JournalName.</para>
    /// </summary>
    public partial class JournalName : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "JournalName");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the JournalName class.
        /// </summary>
        public JournalName() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the JournalName class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public JournalName(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<JournalName>(deep);
    }

    /// <summary>
    /// <para>Locale ID.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:LCID.</para>
    /// </summary>
    public partial class LcId : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "LCID");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the LcId class.
        /// </summary>
        public LcId() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LcId class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public LcId(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<LcId>(deep);
    }

    /// <summary>
    /// <para>Medium.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Medium.</para>
    /// </summary>
    public partial class Medium : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Medium");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Medium class.
        /// </summary>
        public Medium() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Medium class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Medium(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Medium>(deep);
    }

    /// <summary>
    /// <para>Month.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Month.</para>
    /// </summary>
    public partial class Month : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Month");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Month class.
        /// </summary>
        public Month() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Month class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Month(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Month>(deep);
    }

    /// <summary>
    /// <para>Month Accessed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:MonthAccessed.</para>
    /// </summary>
    public partial class MonthAccessed : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "MonthAccessed");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the MonthAccessed class.
        /// </summary>
        public MonthAccessed() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the MonthAccessed class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public MonthAccessed(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<MonthAccessed>(deep);
    }

    /// <summary>
    /// <para>Number of Volumes.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:NumberVolumes.</para>
    /// </summary>
    public partial class NumberVolumes : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "NumberVolumes");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the NumberVolumes class.
        /// </summary>
        public NumberVolumes() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NumberVolumes class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public NumberVolumes(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NumberVolumes>(deep);
    }

    /// <summary>
    /// <para>Pages.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Pages.</para>
    /// </summary>
    public partial class Pages : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Pages");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Pages class.
        /// </summary>
        public Pages() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Pages class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Pages(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Pages>(deep);
    }

    /// <summary>
    /// <para>Patent Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:PatentNumber.</para>
    /// </summary>
    public partial class PatentNumber : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "PatentNumber");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the PatentNumber class.
        /// </summary>
        public PatentNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatentNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PatentNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatentNumber>(deep);
    }

    /// <summary>
    /// <para>Periodical Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:PeriodicalTitle.</para>
    /// </summary>
    public partial class PeriodicalTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "PeriodicalTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the PeriodicalTitle class.
        /// </summary>
        public PeriodicalTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PeriodicalTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PeriodicalTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PeriodicalTitle>(deep);
    }

    /// <summary>
    /// <para>Production Company.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ProductionCompany.</para>
    /// </summary>
    public partial class ProductionCompany : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ProductionCompany");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ProductionCompany class.
        /// </summary>
        public ProductionCompany() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProductionCompany class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ProductionCompany(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProductionCompany>(deep);
    }

    /// <summary>
    /// <para>Publication Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:PublicationTitle.</para>
    /// </summary>
    public partial class PublicationTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "PublicationTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the PublicationTitle class.
        /// </summary>
        public PublicationTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PublicationTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PublicationTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PublicationTitle>(deep);
    }

    /// <summary>
    /// <para>Publisher.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Publisher.</para>
    /// </summary>
    public partial class Publisher : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Publisher");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Publisher class.
        /// </summary>
        public Publisher() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Publisher class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Publisher(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Publisher>(deep);
    }

    /// <summary>
    /// <para>Recording Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:RecordingNumber.</para>
    /// </summary>
    public partial class RecordingNumber : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "RecordingNumber");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the RecordingNumber class.
        /// </summary>
        public RecordingNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RecordingNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public RecordingNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<RecordingNumber>(deep);
    }

    /// <summary>
    /// <para>Reference Order.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:RefOrder.</para>
    /// </summary>
    public partial class ReferenceOrder : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "RefOrder");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ReferenceOrder class.
        /// </summary>
        public ReferenceOrder() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ReferenceOrder class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ReferenceOrder(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ReferenceOrder>(deep);
    }

    /// <summary>
    /// <para>Reporter.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Reporter.</para>
    /// </summary>
    public partial class Reporter : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Reporter");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Reporter class.
        /// </summary>
        public Reporter() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Reporter class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Reporter(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Reporter>(deep);
    }

    /// <summary>
    /// <para>Short Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ShortTitle.</para>
    /// </summary>
    public partial class ShortTitle : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ShortTitle");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ShortTitle class.
        /// </summary>
        public ShortTitle() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ShortTitle class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ShortTitle(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ShortTitle>(deep);
    }

    /// <summary>
    /// <para>Standard Number.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:StandardNumber.</para>
    /// </summary>
    public partial class StandardNumber : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "StandardNumber");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the StandardNumber class.
        /// </summary>
        public StandardNumber() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StandardNumber class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public StandardNumber(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StandardNumber>(deep);
    }

    /// <summary>
    /// <para>State or Province.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:StateProvince.</para>
    /// </summary>
    public partial class StateProvince : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "StateProvince");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the StateProvince class.
        /// </summary>
        public StateProvince() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StateProvince class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public StateProvince(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<StateProvince>(deep);
    }

    /// <summary>
    /// <para>Station.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Station.</para>
    /// </summary>
    public partial class Station : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Station");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Station class.
        /// </summary>
        public Station() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Station class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Station(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Station>(deep);
    }

    /// <summary>
    /// <para>Tag.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Tag.</para>
    /// </summary>
    public partial class Tag : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Tag");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        public Tag() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Tag class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Tag(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Tag>(deep);
    }

    /// <summary>
    /// <para>Theater.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Theater.</para>
    /// </summary>
    public partial class Theater : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Theater");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Theater class.
        /// </summary>
        public Theater() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Theater class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Theater(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Theater>(deep);
    }

    /// <summary>
    /// <para>Thesis Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ThesisType.</para>
    /// </summary>
    public partial class ThesisType : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ThesisType");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ThesisType class.
        /// </summary>
        public ThesisType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ThesisType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public ThesisType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ThesisType>(deep);
    }

    /// <summary>
    /// <para>Title.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Title.</para>
    /// </summary>
    public partial class Title : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Title");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Title class.
        /// </summary>
        public Title() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Title class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Title(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Title>(deep);
    }

    /// <summary>
    /// <para>Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Type.</para>
    /// </summary>
    public partial class PatentType : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Type");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the PatentType class.
        /// </summary>
        public PatentType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the PatentType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public PatentType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<PatentType>(deep);
    }

    /// <summary>
    /// <para>URL.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:URL.</para>
    /// </summary>
    public partial class UrlString : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "URL");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the UrlString class.
        /// </summary>
        public UrlString() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the UrlString class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public UrlString(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<UrlString>(deep);
    }

    /// <summary>
    /// <para>Version.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Version.</para>
    /// </summary>
    public partial class Version : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Version");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Version class.
        /// </summary>
        public Version() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Version class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Version(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Version>(deep);
    }

    /// <summary>
    /// <para>Volume.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Volume.</para>
    /// </summary>
    public partial class Volume : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Volume");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Volume class.
        /// </summary>
        public Volume() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Volume class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Volume(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Volume>(deep);
    }

    /// <summary>
    /// <para>Year.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Year.</para>
    /// </summary>
    public partial class Year : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Year");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Year class.
        /// </summary>
        public Year() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Year class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public Year(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Year>(deep);
    }

    /// <summary>
    /// <para>Year Accessed.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:YearAccessed.</para>
    /// </summary>
    public partial class YearAccessed : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "YearAccessed");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_String255");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the YearAccessed class.
        /// </summary>
        public YearAccessed() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the YearAccessed class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public YearAccessed(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new StringValue { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator(new StringValidator() { MinLength = (0L), MaxLength = (255L) });
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<YearAccessed>(deep);
    }

    /// <summary>
    /// <para>Name List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:NameList.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Person" /> <c>&lt;b:Person></c></description></item>
    /// </list>
    /// </remarks>
    public partial class NameList : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "NameList");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameListType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the NameList class.
        /// </summary>
        public NameList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NameList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public NameList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public NameList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Person.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Person());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.Person.ElementType, 1, 0)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<NameList>(deep);
    }

    /// <summary>
    /// <para>Artist.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Artist.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Artist : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Artist");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Artist class.
        /// </summary>
        public Artist() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Artist class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Artist(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Artist class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Artist(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Artist class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Artist(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Artist>(deep);
    }

    /// <summary>
    /// <para>Book Author.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:BookAuthor.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class BookAuthor : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "BookAuthor");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the BookAuthor class.
        /// </summary>
        public BookAuthor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookAuthor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BookAuthor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookAuthor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public BookAuthor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the BookAuthor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public BookAuthor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<BookAuthor>(deep);
    }

    /// <summary>
    /// <para>Compiler.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Compiler.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Compiler : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Compiler");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Compiler class.
        /// </summary>
        public Compiler() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compiler class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compiler(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compiler class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Compiler(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Compiler class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Compiler(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Compiler>(deep);
    }

    /// <summary>
    /// <para>Composer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Composer.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Composer : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Composer");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Composer class.
        /// </summary>
        public Composer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Composer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Composer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Composer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Composer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Composer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Composer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Composer>(deep);
    }

    /// <summary>
    /// <para>Conductor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Conductor.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Conductor : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Conductor");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Conductor class.
        /// </summary>
        public Conductor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Conductor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Conductor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Conductor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Conductor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Conductor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Conductor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Conductor>(deep);
    }

    /// <summary>
    /// <para>Counsel.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Counsel.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Counsel : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Counsel");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Counsel class.
        /// </summary>
        public Counsel() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Counsel class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Counsel(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Counsel class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Counsel(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Counsel class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Counsel(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Counsel>(deep);
    }

    /// <summary>
    /// <para>Director.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Director.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Director : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Director");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Director class.
        /// </summary>
        public Director() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Director class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Director(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Director class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Director(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Director class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Director(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Director>(deep);
    }

    /// <summary>
    /// <para>Editor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Editor.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Editor : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Editor");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Editor class.
        /// </summary>
        public Editor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Editor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Editor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Editor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Editor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Editor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Editor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Editor>(deep);
    }

    /// <summary>
    /// <para>Interviewee.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Interviewee.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Interviewee : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Interviewee");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Interviewee class.
        /// </summary>
        public Interviewee() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewee class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewee(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewee class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewee(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewee class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Interviewee(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Interviewee>(deep);
    }

    /// <summary>
    /// <para>Interviewer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Interviewer.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Interviewer : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Interviewer");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Interviewer class.
        /// </summary>
        public Interviewer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Interviewer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Interviewer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Interviewer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Interviewer>(deep);
    }

    /// <summary>
    /// <para>Inventor.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Inventor.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Inventor : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Inventor");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Inventor class.
        /// </summary>
        public Inventor() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Inventor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Inventor(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Inventor class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Inventor(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Inventor class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Inventor(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Inventor>(deep);
    }

    /// <summary>
    /// <para>Producer Name.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:ProducerName.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class ProducerName : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ProducerName");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the ProducerName class.
        /// </summary>
        public ProducerName() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProducerName class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ProducerName(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProducerName class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public ProducerName(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the ProducerName class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public ProducerName(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<ProducerName>(deep);
    }

    /// <summary>
    /// <para>Translator.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Translator.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Translator : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Translator");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Translator class.
        /// </summary>
        public Translator() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Translator class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Translator(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Translator class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Translator(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Translator class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Translator(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Translator>(deep);
    }

    /// <summary>
    /// <para>Writer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Writer.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Writer : NameType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Writer");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Writer class.
        /// </summary>
        public Writer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Writer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Writer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Writer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Writer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Writer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Writer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1)
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Writer>(deep);
    }

    /// <summary>
    /// <para>Defines the NameType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    /// </list>
    /// </remarks>
    public abstract partial class NameType : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the NameType class.
        /// </summary>
        protected NameType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected NameType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.NameList());
        }

        /// <summary>
        /// <para>Name List.</para>
        /// <para>Represents the following element tag in the schema: b:NameList.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.NameList? NameList
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.NameList.ElementType) as DocumentFormat.OpenXml.Bibliography.NameList;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.NameList.ElementType);
        }
    }

    /// <summary>
    /// <para>Author.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Author.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Corporate" /> <c>&lt;b:Corporate></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Author : NameOrCorporateType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Author");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameOrCorporateType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Author class.
        /// </summary>
        public Author() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Author class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Author(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Author class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Author(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Author class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Author(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Corporate.ElementType, 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Author>(deep);
    }

    /// <summary>
    /// <para>Performer.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Performer.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Corporate" /> <c>&lt;b:Corporate></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Performer : NameOrCorporateType
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Performer");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameOrCorporateType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Performer class.
        /// </summary>
        public Performer() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Performer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Performer(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Performer class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Performer(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Performer class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Performer(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 1)
                {
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Corporate.ElementType, 1, 1)
                }
            };
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Performer>(deep);
    }

    /// <summary>
    /// <para>Defines the NameOrCorporateType Class.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is :.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NameList" /> <c>&lt;b:NameList></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Corporate" /> <c>&lt;b:Corporate></c></description></item>
    /// </list>
    /// </remarks>
    public abstract partial class NameOrCorporateType : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new(string.Empty, string.Empty);
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_NameOrCorporateType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class.
        /// </summary>
        protected NameOrCorporateType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameOrCorporateType(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        protected NameOrCorporateType(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the NameOrCorporateType class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        protected NameOrCorporateType(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.NameList.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.NameList());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Corporate.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Corporate());
        }

        /// <summary>
        /// <para>NameList.</para>
        /// <para>Represents the following element tag in the schema: b:NameList.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.NameList? NameList
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.NameList.ElementType) as DocumentFormat.OpenXml.Bibliography.NameList;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.NameList.ElementType);
        }

        /// <summary>
        /// <para>Corporate Author.</para>
        /// <para>Represents the following element tag in the schema: b:Corporate.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Corporate? Corporate
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Corporate.ElementType) as DocumentFormat.OpenXml.Bibliography.Corporate;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Corporate.ElementType);
        }
    }

    /// <summary>
    /// <para>Contributors List.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Author.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Author" /> <c>&lt;b:Author></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Performer" /> <c>&lt;b:Performer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Artist" /> <c>&lt;b:Artist></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.BookAuthor" /> <c>&lt;b:BookAuthor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Compiler" /> <c>&lt;b:Compiler></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Composer" /> <c>&lt;b:Composer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Conductor" /> <c>&lt;b:Conductor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Counsel" /> <c>&lt;b:Counsel></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Director" /> <c>&lt;b:Director></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Editor" /> <c>&lt;b:Editor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Interviewee" /> <c>&lt;b:Interviewee></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Interviewer" /> <c>&lt;b:Interviewer></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Inventor" /> <c>&lt;b:Inventor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ProducerName" /> <c>&lt;b:ProducerName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Translator" /> <c>&lt;b:Translator></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Writer" /> <c>&lt;b:Writer></c></description></item>
    /// </list>
    /// </remarks>
    public partial class AuthorList : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Author");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_AuthorType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the AuthorList class.
        /// </summary>
        public AuthorList() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the AuthorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AuthorList(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AuthorList class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public AuthorList(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the AuthorList class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public AuthorList(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Author.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Author());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Performer.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Performer());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Artist.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Artist());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.BookAuthor.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.BookAuthor());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Compiler.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Compiler());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Composer.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Composer());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Conductor.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Conductor());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Counsel.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Counsel());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Director.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Director());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Editor.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Editor());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Interviewee.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Interviewee());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Interviewer.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Interviewer());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Inventor.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Inventor());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ProducerName.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ProducerName());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Translator.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Translator());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Writer.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Writer());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Artist.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Author.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.BookAuthor.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Compiler.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Composer.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Conductor.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Counsel.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Director.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Editor.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Interviewee.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Interviewer.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Inventor.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Performer.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ProducerName.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Translator.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Writer.ElementType, 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>Artist.</para>
        /// <para>Represents the following element tag in the schema: b:Artist.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Artist? Artist
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Artist.ElementType) as DocumentFormat.OpenXml.Bibliography.Artist;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Artist.ElementType);
        }

        /// <summary>
        /// <para>Author.</para>
        /// <para>Represents the following element tag in the schema: b:Author.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Author? Author
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Author.ElementType) as DocumentFormat.OpenXml.Bibliography.Author;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Author.ElementType);
        }

        /// <summary>
        /// <para>Book Author.</para>
        /// <para>Represents the following element tag in the schema: b:BookAuthor.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.BookAuthor? BookAuthor
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.BookAuthor.ElementType) as DocumentFormat.OpenXml.Bibliography.BookAuthor;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.BookAuthor.ElementType);
        }

        /// <summary>
        /// <para>Compiler.</para>
        /// <para>Represents the following element tag in the schema: b:Compiler.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Compiler? Compiler
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Compiler.ElementType) as DocumentFormat.OpenXml.Bibliography.Compiler;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Compiler.ElementType);
        }

        /// <summary>
        /// <para>Composer.</para>
        /// <para>Represents the following element tag in the schema: b:Composer.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Composer? Composer
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Composer.ElementType) as DocumentFormat.OpenXml.Bibliography.Composer;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Composer.ElementType);
        }

        /// <summary>
        /// <para>Conductor.</para>
        /// <para>Represents the following element tag in the schema: b:Conductor.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Conductor? Conductor
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Conductor.ElementType) as DocumentFormat.OpenXml.Bibliography.Conductor;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Conductor.ElementType);
        }

        /// <summary>
        /// <para>Counsel.</para>
        /// <para>Represents the following element tag in the schema: b:Counsel.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Counsel? Counsel
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Counsel.ElementType) as DocumentFormat.OpenXml.Bibliography.Counsel;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Counsel.ElementType);
        }

        /// <summary>
        /// <para>Director.</para>
        /// <para>Represents the following element tag in the schema: b:Director.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Director? Director
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Director.ElementType) as DocumentFormat.OpenXml.Bibliography.Director;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Director.ElementType);
        }

        /// <summary>
        /// <para>Editor.</para>
        /// <para>Represents the following element tag in the schema: b:Editor.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Editor? Editor
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Editor.ElementType) as DocumentFormat.OpenXml.Bibliography.Editor;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Editor.ElementType);
        }

        /// <summary>
        /// <para>Interviewee.</para>
        /// <para>Represents the following element tag in the schema: b:Interviewee.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Interviewee? Interviewee
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Interviewee.ElementType) as DocumentFormat.OpenXml.Bibliography.Interviewee;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Interviewee.ElementType);
        }

        /// <summary>
        /// <para>Interviewer.</para>
        /// <para>Represents the following element tag in the schema: b:Interviewer.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Interviewer? Interviewer
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Interviewer.ElementType) as DocumentFormat.OpenXml.Bibliography.Interviewer;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Interviewer.ElementType);
        }

        /// <summary>
        /// <para>Inventor.</para>
        /// <para>Represents the following element tag in the schema: b:Inventor.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Inventor? Inventor
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Inventor.ElementType) as DocumentFormat.OpenXml.Bibliography.Inventor;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Inventor.ElementType);
        }

        /// <summary>
        /// <para>Performer.</para>
        /// <para>Represents the following element tag in the schema: b:Performer.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Performer? Performer
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Performer.ElementType) as DocumentFormat.OpenXml.Bibliography.Performer;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Performer.ElementType);
        }

        /// <summary>
        /// <para>Producer Name.</para>
        /// <para>Represents the following element tag in the schema: b:ProducerName.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ProducerName? ProducerName
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ProducerName.ElementType) as DocumentFormat.OpenXml.Bibliography.ProducerName;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ProducerName.ElementType);
        }

        /// <summary>
        /// <para>Translator.</para>
        /// <para>Represents the following element tag in the schema: b:Translator.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Translator? Translator
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Translator.ElementType) as DocumentFormat.OpenXml.Bibliography.Translator;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Translator.ElementType);
        }

        /// <summary>
        /// <para>Writer.</para>
        /// <para>Represents the following element tag in the schema: b:Writer.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Writer? Writer
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Writer.ElementType) as DocumentFormat.OpenXml.Bibliography.Writer;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Writer.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<AuthorList>(deep);
    }

    /// <summary>
    /// <para>Source Type.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:SourceType.</para>
    /// </summary>
    public partial class SourceType : OpenXmlLeafTextElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "SourceType");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "ST_SourceType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the SourceType class.
        /// </summary>
        public SourceType() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the SourceType class with the specified text content.
        /// </summary>
        /// <param name="text">Specifies the text content of the element.</param>
        public SourceType(string text) : base(text)
        {
        }

        internal override OpenXmlSimpleType InnerTextToValue(string text)
        {
            return new EnumValue<DocumentFormat.OpenXml.Bibliography.DataSourceValues> { InnerText = text };
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.AddValidator<EnumValue<DocumentFormat.OpenXml.Bibliography.DataSourceValues>>(EnumValidator.Instance);
            builder.SetSchema(ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<SourceType>(deep);
    }

    /// <summary>
    /// <para>Source.</para>
    /// <para>This class is available in Office 2007 and above.</para>
    /// <para>When the object is serialized out as xml, it's qualified name is b:Source.</para>
    /// </summary>
    /// <remarks>
    /// <para>The following table lists the possible child types:</para>
    /// <list type="bullet">
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.AuthorList" /> <c>&lt;b:Author></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.SourceType" /> <c>&lt;b:SourceType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber" /> <c>&lt;b:AbbreviatedCaseNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.AlbumTitle" /> <c>&lt;b:AlbumTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.BookTitle" /> <c>&lt;b:BookTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Broadcaster" /> <c>&lt;b:Broadcaster></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.BroadcastTitle" /> <c>&lt;b:BroadcastTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.CaseNumber" /> <c>&lt;b:CaseNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ChapterNumber" /> <c>&lt;b:ChapterNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.City" /> <c>&lt;b:City></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Comments" /> <c>&lt;b:Comments></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ConferenceName" /> <c>&lt;b:ConferenceName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.CountryRegion" /> <c>&lt;b:CountryRegion></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Court" /> <c>&lt;b:Court></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Day" /> <c>&lt;b:Day></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.DayAccessed" /> <c>&lt;b:DayAccessed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Department" /> <c>&lt;b:Department></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Distributor" /> <c>&lt;b:Distributor></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Edition" /> <c>&lt;b:Edition></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.GuidString" /> <c>&lt;b:Guid></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Institution" /> <c>&lt;b:Institution></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.InternetSiteTitle" /> <c>&lt;b:InternetSiteTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Issue" /> <c>&lt;b:Issue></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.JournalName" /> <c>&lt;b:JournalName></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.LcId" /> <c>&lt;b:LCID></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Medium" /> <c>&lt;b:Medium></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Month" /> <c>&lt;b:Month></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.MonthAccessed" /> <c>&lt;b:MonthAccessed></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.NumberVolumes" /> <c>&lt;b:NumberVolumes></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Pages" /> <c>&lt;b:Pages></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.PatentNumber" /> <c>&lt;b:PatentNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.PeriodicalTitle" /> <c>&lt;b:PeriodicalTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ProductionCompany" /> <c>&lt;b:ProductionCompany></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.PublicationTitle" /> <c>&lt;b:PublicationTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Publisher" /> <c>&lt;b:Publisher></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.RecordingNumber" /> <c>&lt;b:RecordingNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ReferenceOrder" /> <c>&lt;b:RefOrder></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Reporter" /> <c>&lt;b:Reporter></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ShortTitle" /> <c>&lt;b:ShortTitle></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.StandardNumber" /> <c>&lt;b:StandardNumber></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.StateProvince" /> <c>&lt;b:StateProvince></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Station" /> <c>&lt;b:Station></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Tag" /> <c>&lt;b:Tag></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Theater" /> <c>&lt;b:Theater></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.ThesisType" /> <c>&lt;b:ThesisType></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Title" /> <c>&lt;b:Title></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.PatentType" /> <c>&lt;b:Type></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.UrlString" /> <c>&lt;b:URL></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Version" /> <c>&lt;b:Version></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Volume" /> <c>&lt;b:Volume></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.Year" /> <c>&lt;b:Year></c></description></item>
    ///   <item><description><see cref="DocumentFormat.OpenXml.Bibliography.YearAccessed" /> <c>&lt;b:YearAccessed></c></description></item>
    /// </list>
    /// </remarks>
    public partial class Source : OpenXmlCompositeElement
    {
        #pragma warning disable CS0109
        internal static readonly new OpenXmlQualifiedName ElementQName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "Source");
        internal static readonly new OpenXmlQualifiedName ElementTypeName = new("http://schemas.openxmlformats.org/officeDocument/2006/bibliography", "CT_SourceType");
        internal static readonly new OpenXmlSchemaType ElementType = new(ElementQName, ElementTypeName);
        #pragma warning restore CS0109

        /// <summary>
        /// Initializes a new instance of the Source class.
        /// </summary>
        public Source() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Source class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Source(IEnumerable<OpenXmlElement> childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Source class with the specified child elements.
        /// </summary>
        /// <param name="childElements">Specifies the child elements.</param>
        public Source(params OpenXmlElement[] childElements) : base(childElements)
        {
        }

        /// <summary>
        /// Initializes a new instance of the Source class from outer XML.
        /// </summary>
        /// <param name="outerXml">Specifies the outer XML of the element.</param>
        public Source(string outerXml) : base(outerXml)
        {
        }

        internal override void ConfigureMetadata(ElementMetadata.Builder builder)
        {
            base.ConfigureMetadata(builder);
            builder.SetSchema(ElementType);
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.AuthorList.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.AuthorList());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.SourceType.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.SourceType());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.AlbumTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.AlbumTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.BookTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.BookTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Broadcaster.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Broadcaster());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.BroadcastTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.BroadcastTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.CaseNumber.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.CaseNumber());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ChapterNumber.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ChapterNumber());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.City.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.City());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Comments.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Comments());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ConferenceName.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ConferenceName());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.CountryRegion.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.CountryRegion());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Court.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Court());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Day.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Day());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.DayAccessed.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.DayAccessed());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Department.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Department());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Distributor.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Distributor());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Edition.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Edition());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.GuidString.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.GuidString());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Institution.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Institution());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.InternetSiteTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.InternetSiteTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Issue.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Issue());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.JournalName.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.JournalName());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.LcId.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.LcId());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Medium.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Medium());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Month.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Month());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.MonthAccessed.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.MonthAccessed());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.NumberVolumes.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.NumberVolumes());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Pages.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Pages());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.PatentNumber.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.PatentNumber());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.PeriodicalTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.PeriodicalTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ProductionCompany.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ProductionCompany());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.PublicationTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.PublicationTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Publisher.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Publisher());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.RecordingNumber.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.RecordingNumber());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ReferenceOrder.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ReferenceOrder());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Reporter.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Reporter());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ShortTitle.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ShortTitle());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.StandardNumber.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.StandardNumber());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.StateProvince.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.StateProvince());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Station.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Station());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Tag.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Tag());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Theater.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Theater());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.ThesisType.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.ThesisType());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Title.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Title());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.PatentType.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.PatentType());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.UrlString.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.UrlString());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Version.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Version());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Volume.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Volume());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.Year.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.Year());
            builder.AddChild(DocumentFormat.OpenXml.Bibliography.YearAccessed.ElementType, static () => new DocumentFormat.OpenXml.Bibliography.YearAccessed());
            builder.Particle = new CompositeParticle.Builder(ParticleType.Sequence, 1, 1)
            {
                new CompositeParticle.Builder(ParticleType.Choice, 0, 0)
                {
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.AlbumTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.AuthorList.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.BookTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Broadcaster.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.BroadcastTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.CaseNumber.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ChapterNumber.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.City.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Comments.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ConferenceName.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.CountryRegion.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Court.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Day.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.DayAccessed.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Department.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Distributor.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Edition.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.GuidString.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Institution.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.InternetSiteTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Issue.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.JournalName.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.LcId.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Medium.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Month.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.MonthAccessed.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.NumberVolumes.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Pages.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.PatentNumber.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.PeriodicalTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ProductionCompany.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.PublicationTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Publisher.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.RecordingNumber.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ReferenceOrder.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Reporter.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.SourceType.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ShortTitle.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.StandardNumber.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.StateProvince.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Station.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Tag.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Theater.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.ThesisType.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Title.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.PatentType.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.UrlString.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Version.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Volume.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.Year.ElementType, 1, 1),
                    new ElementParticle(DocumentFormat.OpenXml.Bibliography.YearAccessed.ElementType, 1, 1)
                }
            };
        }

        /// <summary>
        /// <para>Abbreviated Case Number.</para>
        /// <para>Represents the following element tag in the schema: b:AbbreviatedCaseNumber.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber? AbbreviatedCaseNumber
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber.ElementType) as DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.AbbreviatedCaseNumber.ElementType);
        }

        /// <summary>
        /// <para>Album Title.</para>
        /// <para>Represents the following element tag in the schema: b:AlbumTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.AlbumTitle? AlbumTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.AlbumTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.AlbumTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.AlbumTitle.ElementType);
        }

        /// <summary>
        /// <para>Contributors List.</para>
        /// <para>Represents the following element tag in the schema: b:Author.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.AuthorList? AuthorList
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.AuthorList.ElementType) as DocumentFormat.OpenXml.Bibliography.AuthorList;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.AuthorList.ElementType);
        }

        /// <summary>
        /// <para>Book Title.</para>
        /// <para>Represents the following element tag in the schema: b:BookTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.BookTitle? BookTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.BookTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.BookTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.BookTitle.ElementType);
        }

        /// <summary>
        /// <para>Broadcaster.</para>
        /// <para>Represents the following element tag in the schema: b:Broadcaster.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Broadcaster? Broadcaster
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Broadcaster.ElementType) as DocumentFormat.OpenXml.Bibliography.Broadcaster;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Broadcaster.ElementType);
        }

        /// <summary>
        /// <para>Broadcast Title.</para>
        /// <para>Represents the following element tag in the schema: b:BroadcastTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.BroadcastTitle? BroadcastTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.BroadcastTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.BroadcastTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.BroadcastTitle.ElementType);
        }

        /// <summary>
        /// <para>Case Number.</para>
        /// <para>Represents the following element tag in the schema: b:CaseNumber.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.CaseNumber? CaseNumber
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.CaseNumber.ElementType) as DocumentFormat.OpenXml.Bibliography.CaseNumber;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.CaseNumber.ElementType);
        }

        /// <summary>
        /// <para>Chapter Number.</para>
        /// <para>Represents the following element tag in the schema: b:ChapterNumber.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ChapterNumber? ChapterNumber
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ChapterNumber.ElementType) as DocumentFormat.OpenXml.Bibliography.ChapterNumber;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ChapterNumber.ElementType);
        }

        /// <summary>
        /// <para>City.</para>
        /// <para>Represents the following element tag in the schema: b:City.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.City? City
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.City.ElementType) as DocumentFormat.OpenXml.Bibliography.City;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.City.ElementType);
        }

        /// <summary>
        /// <para>Comments.</para>
        /// <para>Represents the following element tag in the schema: b:Comments.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Comments? Comments
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Comments.ElementType) as DocumentFormat.OpenXml.Bibliography.Comments;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Comments.ElementType);
        }

        /// <summary>
        /// <para>Conference or Proceedings Name.</para>
        /// <para>Represents the following element tag in the schema: b:ConferenceName.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ConferenceName? ConferenceName
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ConferenceName.ElementType) as DocumentFormat.OpenXml.Bibliography.ConferenceName;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ConferenceName.ElementType);
        }

        /// <summary>
        /// <para>Country or Region.</para>
        /// <para>Represents the following element tag in the schema: b:CountryRegion.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.CountryRegion? CountryRegion
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.CountryRegion.ElementType) as DocumentFormat.OpenXml.Bibliography.CountryRegion;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.CountryRegion.ElementType);
        }

        /// <summary>
        /// <para>Court.</para>
        /// <para>Represents the following element tag in the schema: b:Court.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Court? Court
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Court.ElementType) as DocumentFormat.OpenXml.Bibliography.Court;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Court.ElementType);
        }

        /// <summary>
        /// <para>Day.</para>
        /// <para>Represents the following element tag in the schema: b:Day.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Day? Day
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Day.ElementType) as DocumentFormat.OpenXml.Bibliography.Day;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Day.ElementType);
        }

        /// <summary>
        /// <para>Day Accessed.</para>
        /// <para>Represents the following element tag in the schema: b:DayAccessed.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.DayAccessed? DayAccessed
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.DayAccessed.ElementType) as DocumentFormat.OpenXml.Bibliography.DayAccessed;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.DayAccessed.ElementType);
        }

        /// <summary>
        /// <para>Department.</para>
        /// <para>Represents the following element tag in the schema: b:Department.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Department? Department
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Department.ElementType) as DocumentFormat.OpenXml.Bibliography.Department;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Department.ElementType);
        }

        /// <summary>
        /// <para>Distributor.</para>
        /// <para>Represents the following element tag in the schema: b:Distributor.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Distributor? Distributor
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Distributor.ElementType) as DocumentFormat.OpenXml.Bibliography.Distributor;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Distributor.ElementType);
        }

        /// <summary>
        /// <para>Editor.</para>
        /// <para>Represents the following element tag in the schema: b:Edition.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Edition? Edition
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Edition.ElementType) as DocumentFormat.OpenXml.Bibliography.Edition;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Edition.ElementType);
        }

        /// <summary>
        /// <para>GUID.</para>
        /// <para>Represents the following element tag in the schema: b:Guid.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.GuidString? GuidString
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.GuidString.ElementType) as DocumentFormat.OpenXml.Bibliography.GuidString;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.GuidString.ElementType);
        }

        /// <summary>
        /// <para>Institution.</para>
        /// <para>Represents the following element tag in the schema: b:Institution.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Institution? Institution
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Institution.ElementType) as DocumentFormat.OpenXml.Bibliography.Institution;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Institution.ElementType);
        }

        /// <summary>
        /// <para>Internet Site Title.</para>
        /// <para>Represents the following element tag in the schema: b:InternetSiteTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.InternetSiteTitle? InternetSiteTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.InternetSiteTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.InternetSiteTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.InternetSiteTitle.ElementType);
        }

        /// <summary>
        /// <para>Issue.</para>
        /// <para>Represents the following element tag in the schema: b:Issue.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Issue? Issue
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Issue.ElementType) as DocumentFormat.OpenXml.Bibliography.Issue;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Issue.ElementType);
        }

        /// <summary>
        /// <para>Journal Name.</para>
        /// <para>Represents the following element tag in the schema: b:JournalName.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.JournalName? JournalName
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.JournalName.ElementType) as DocumentFormat.OpenXml.Bibliography.JournalName;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.JournalName.ElementType);
        }

        /// <summary>
        /// <para>Locale ID.</para>
        /// <para>Represents the following element tag in the schema: b:LCID.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.LcId? LcId
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.LcId.ElementType) as DocumentFormat.OpenXml.Bibliography.LcId;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.LcId.ElementType);
        }

        /// <summary>
        /// <para>Medium.</para>
        /// <para>Represents the following element tag in the schema: b:Medium.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Medium? Medium
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Medium.ElementType) as DocumentFormat.OpenXml.Bibliography.Medium;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Medium.ElementType);
        }

        /// <summary>
        /// <para>Month.</para>
        /// <para>Represents the following element tag in the schema: b:Month.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Month? Month
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Month.ElementType) as DocumentFormat.OpenXml.Bibliography.Month;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Month.ElementType);
        }

        /// <summary>
        /// <para>Month Accessed.</para>
        /// <para>Represents the following element tag in the schema: b:MonthAccessed.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.MonthAccessed? MonthAccessed
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.MonthAccessed.ElementType) as DocumentFormat.OpenXml.Bibliography.MonthAccessed;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.MonthAccessed.ElementType);
        }

        /// <summary>
        /// <para>Number of Volumes.</para>
        /// <para>Represents the following element tag in the schema: b:NumberVolumes.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.NumberVolumes? NumberVolumes
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.NumberVolumes.ElementType) as DocumentFormat.OpenXml.Bibliography.NumberVolumes;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.NumberVolumes.ElementType);
        }

        /// <summary>
        /// <para>Pages.</para>
        /// <para>Represents the following element tag in the schema: b:Pages.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Pages? Pages
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Pages.ElementType) as DocumentFormat.OpenXml.Bibliography.Pages;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Pages.ElementType);
        }

        /// <summary>
        /// <para>Patent Number.</para>
        /// <para>Represents the following element tag in the schema: b:PatentNumber.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.PatentNumber? PatentNumber
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.PatentNumber.ElementType) as DocumentFormat.OpenXml.Bibliography.PatentNumber;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.PatentNumber.ElementType);
        }

        /// <summary>
        /// <para>Periodical Title.</para>
        /// <para>Represents the following element tag in the schema: b:PeriodicalTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.PeriodicalTitle? PeriodicalTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.PeriodicalTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.PeriodicalTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.PeriodicalTitle.ElementType);
        }

        /// <summary>
        /// <para>Production Company.</para>
        /// <para>Represents the following element tag in the schema: b:ProductionCompany.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ProductionCompany? ProductionCompany
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ProductionCompany.ElementType) as DocumentFormat.OpenXml.Bibliography.ProductionCompany;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ProductionCompany.ElementType);
        }

        /// <summary>
        /// <para>Publication Title.</para>
        /// <para>Represents the following element tag in the schema: b:PublicationTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.PublicationTitle? PublicationTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.PublicationTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.PublicationTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.PublicationTitle.ElementType);
        }

        /// <summary>
        /// <para>Publisher.</para>
        /// <para>Represents the following element tag in the schema: b:Publisher.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Publisher? Publisher
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Publisher.ElementType) as DocumentFormat.OpenXml.Bibliography.Publisher;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Publisher.ElementType);
        }

        /// <summary>
        /// <para>Recording Number.</para>
        /// <para>Represents the following element tag in the schema: b:RecordingNumber.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.RecordingNumber? RecordingNumber
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.RecordingNumber.ElementType) as DocumentFormat.OpenXml.Bibliography.RecordingNumber;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.RecordingNumber.ElementType);
        }

        /// <summary>
        /// <para>Reference Order.</para>
        /// <para>Represents the following element tag in the schema: b:RefOrder.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ReferenceOrder? ReferenceOrder
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ReferenceOrder.ElementType) as DocumentFormat.OpenXml.Bibliography.ReferenceOrder;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ReferenceOrder.ElementType);
        }

        /// <summary>
        /// <para>Reporter.</para>
        /// <para>Represents the following element tag in the schema: b:Reporter.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Reporter? Reporter
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Reporter.ElementType) as DocumentFormat.OpenXml.Bibliography.Reporter;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Reporter.ElementType);
        }

        /// <summary>
        /// <para>Source Type.</para>
        /// <para>Represents the following element tag in the schema: b:SourceType.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.SourceType? SourceType
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.SourceType.ElementType) as DocumentFormat.OpenXml.Bibliography.SourceType;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.SourceType.ElementType);
        }

        /// <summary>
        /// <para>Short Title.</para>
        /// <para>Represents the following element tag in the schema: b:ShortTitle.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ShortTitle? ShortTitle
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ShortTitle.ElementType) as DocumentFormat.OpenXml.Bibliography.ShortTitle;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ShortTitle.ElementType);
        }

        /// <summary>
        /// <para>Standard Number.</para>
        /// <para>Represents the following element tag in the schema: b:StandardNumber.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.StandardNumber? StandardNumber
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.StandardNumber.ElementType) as DocumentFormat.OpenXml.Bibliography.StandardNumber;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.StandardNumber.ElementType);
        }

        /// <summary>
        /// <para>State or Province.</para>
        /// <para>Represents the following element tag in the schema: b:StateProvince.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.StateProvince? StateProvince
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.StateProvince.ElementType) as DocumentFormat.OpenXml.Bibliography.StateProvince;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.StateProvince.ElementType);
        }

        /// <summary>
        /// <para>Station.</para>
        /// <para>Represents the following element tag in the schema: b:Station.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Station? Station
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Station.ElementType) as DocumentFormat.OpenXml.Bibliography.Station;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Station.ElementType);
        }

        /// <summary>
        /// <para>Tag.</para>
        /// <para>Represents the following element tag in the schema: b:Tag.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Tag? Tag
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Tag.ElementType) as DocumentFormat.OpenXml.Bibliography.Tag;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Tag.ElementType);
        }

        /// <summary>
        /// <para>Theater.</para>
        /// <para>Represents the following element tag in the schema: b:Theater.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Theater? Theater
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Theater.ElementType) as DocumentFormat.OpenXml.Bibliography.Theater;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Theater.ElementType);
        }

        /// <summary>
        /// <para>Thesis Type.</para>
        /// <para>Represents the following element tag in the schema: b:ThesisType.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.ThesisType? ThesisType
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.ThesisType.ElementType) as DocumentFormat.OpenXml.Bibliography.ThesisType;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.ThesisType.ElementType);
        }

        /// <summary>
        /// <para>Title.</para>
        /// <para>Represents the following element tag in the schema: b:Title.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Title? Title
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Title.ElementType) as DocumentFormat.OpenXml.Bibliography.Title;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Title.ElementType);
        }

        /// <summary>
        /// <para>Type.</para>
        /// <para>Represents the following element tag in the schema: b:Type.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.PatentType? PatentType
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.PatentType.ElementType) as DocumentFormat.OpenXml.Bibliography.PatentType;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.PatentType.ElementType);
        }

        /// <summary>
        /// <para>URL.</para>
        /// <para>Represents the following element tag in the schema: b:URL.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.UrlString? UrlString
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.UrlString.ElementType) as DocumentFormat.OpenXml.Bibliography.UrlString;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.UrlString.ElementType);
        }

        /// <summary>
        /// <para>Version.</para>
        /// <para>Represents the following element tag in the schema: b:Version.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Version? Version
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Version.ElementType) as DocumentFormat.OpenXml.Bibliography.Version;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Version.ElementType);
        }

        /// <summary>
        /// <para>Volume.</para>
        /// <para>Represents the following element tag in the schema: b:Volume.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Volume? Volume
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Volume.ElementType) as DocumentFormat.OpenXml.Bibliography.Volume;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Volume.ElementType);
        }

        /// <summary>
        /// <para>Year.</para>
        /// <para>Represents the following element tag in the schema: b:Year.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.Year? Year
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.Year.ElementType) as DocumentFormat.OpenXml.Bibliography.Year;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.Year.ElementType);
        }

        /// <summary>
        /// <para>Year Accessed.</para>
        /// <para>Represents the following element tag in the schema: b:YearAccessed.</para>
        /// </summary>
        /// <remarks>
        /// xmlns:b = http://schemas.openxmlformats.org/officeDocument/2006/bibliography
        /// </remarks>
        public DocumentFormat.OpenXml.Bibliography.YearAccessed? YearAccessed
        {
            get => GetElement(DocumentFormat.OpenXml.Bibliography.YearAccessed.ElementType) as DocumentFormat.OpenXml.Bibliography.YearAccessed;
            set => SetElement(value, DocumentFormat.OpenXml.Bibliography.YearAccessed.ElementType);
        }

        /// <inheritdoc/>
        public override OpenXmlElement CloneNode(bool deep) => CloneImp<Source>(deep);
    }

    /// <summary>
    /// Bibliographic Data Source Types
    /// </summary>
    public readonly record struct DataSourceValues : IEnumValue, IEnumValueFactory<DataSourceValues>
    {
        private readonly string? _value;
        /// <summary>
        /// Creates a new DataSourceValues enum instance
        /// </summary>
        public DataSourceValues(string value) => _value = value;
        DataSourceValues IEnumValueFactory<DataSourceValues>.Create(string name) => new(name);
        bool IEnumValue.IsValid => InternalValue switch
        {
            "ArticleInAPeriodical" => true,
            "Book" => true,
            "BookSection" => true,
            "JournalArticle" => true,
            "ConferenceProceedings" => true,
            "Report" => true,
            "SoundRecording" => true,
            "Performance" => true,
            "Art" => true,
            "DocumentFromInternetSite" => true,
            "InternetSite" => true,
            "Film" => true,
            "Interview" => true,
            "Patent" => true,
            "ElectronicSource" => true,
            "Case" => true,
            "Misc" => true,
            _ => false
        };
        string IEnumValue.Value => InternalValue;
        private string InternalValue => _value ?? "ArticleInAPeriodical";
        FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;
        /// <summary>
        /// Article in a Periodical.
        /// <para>When the item is serialized out as xml, its value is "ArticleInAPeriodical".</para>
        /// </summary>
        public static DataSourceValues ArticleInAPeriodical => new("ArticleInAPeriodical");
        /// <summary>
        /// Book.
        /// <para>When the item is serialized out as xml, its value is "Book".</para>
        /// </summary>
        public static DataSourceValues Book => new("Book");
        /// <summary>
        /// Book Section.
        /// <para>When the item is serialized out as xml, its value is "BookSection".</para>
        /// </summary>
        public static DataSourceValues BookSection => new("BookSection");
        /// <summary>
        /// Journal Article.
        /// <para>When the item is serialized out as xml, its value is "JournalArticle".</para>
        /// </summary>
        public static DataSourceValues JournalArticle => new("JournalArticle");
        /// <summary>
        /// Conference Proceedings.
        /// <para>When the item is serialized out as xml, its value is "ConferenceProceedings".</para>
        /// </summary>
        public static DataSourceValues ConferenceProceedings => new("ConferenceProceedings");
        /// <summary>
        /// Reporter.
        /// <para>When the item is serialized out as xml, its value is "Report".</para>
        /// </summary>
        public static DataSourceValues Report => new("Report");
        /// <summary>
        /// Sound Recording.
        /// <para>When the item is serialized out as xml, its value is "SoundRecording".</para>
        /// </summary>
        public static DataSourceValues SoundRecording => new("SoundRecording");
        /// <summary>
        /// Performance.
        /// <para>When the item is serialized out as xml, its value is "Performance".</para>
        /// </summary>
        public static DataSourceValues Performance => new("Performance");
        /// <summary>
        /// Art.
        /// <para>When the item is serialized out as xml, its value is "Art".</para>
        /// </summary>
        public static DataSourceValues Art => new("Art");
        /// <summary>
        /// Document from Internet Site.
        /// <para>When the item is serialized out as xml, its value is "DocumentFromInternetSite".</para>
        /// </summary>
        public static DataSourceValues DocumentFromInternetSite => new("DocumentFromInternetSite");
        /// <summary>
        /// Internet Site.
        /// <para>When the item is serialized out as xml, its value is "InternetSite".</para>
        /// </summary>
        public static DataSourceValues InternetSite => new("InternetSite");
        /// <summary>
        /// Film.
        /// <para>When the item is serialized out as xml, its value is "Film".</para>
        /// </summary>
        public static DataSourceValues Film => new("Film");
        /// <summary>
        /// Interview.
        /// <para>When the item is serialized out as xml, its value is "Interview".</para>
        /// </summary>
        public static DataSourceValues Interview => new("Interview");
        /// <summary>
        /// Patent.
        /// <para>When the item is serialized out as xml, its value is "Patent".</para>
        /// </summary>
        public static DataSourceValues Patent => new("Patent");
        /// <summary>
        /// Electronic Source.
        /// <para>When the item is serialized out as xml, its value is "ElectronicSource".</para>
        /// </summary>
        public static DataSourceValues ElectronicSource => new("ElectronicSource");
        /// <summary>
        /// Case.
        /// <para>When the item is serialized out as xml, its value is "Case".</para>
        /// </summary>
        public static DataSourceValues Case => new("Case");
        /// <summary>
        /// Miscellaneous.
        /// <para>When the item is serialized out as xml, its value is "Misc".</para>
        /// </summary>
        public static DataSourceValues Miscellaneous => new("Misc");
    
    }
}
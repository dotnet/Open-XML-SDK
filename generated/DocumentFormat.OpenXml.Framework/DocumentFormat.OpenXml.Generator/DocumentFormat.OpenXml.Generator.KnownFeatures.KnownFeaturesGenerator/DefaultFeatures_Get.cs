// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#nullable enable

using System.Threading;

namespace DocumentFormat.OpenXml.Features;

internal partial class DefaultFeatures
{
    private global::DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver? _OpenXmlNamespaceResolver;
    private global::DocumentFormat.OpenXml.Features.IElementMetadataFactoryFeature? _ElementMetadataFactoryFeature;

    public partial T? Get<T>()
    {
        if (typeof(T) == typeof(global::DocumentFormat.OpenXml.Features.IOpenXmlNamespaceResolver))
        {
            if (_OpenXmlNamespaceResolver is null)
            {
                Interlocked.CompareExchange(ref _OpenXmlNamespaceResolver, new global::DocumentFormat.OpenXml.Features.OpenXmlNamespaceResolver(), null);
            }

            return (T)_OpenXmlNamespaceResolver;
        }

        if (typeof(T) == typeof(global::DocumentFormat.OpenXml.Features.IElementMetadataFactoryFeature))
        {
            if (_ElementMetadataFactoryFeature is null)
            {
                Interlocked.CompareExchange(ref _ElementMetadataFactoryFeature, new global::DocumentFormat.OpenXml.Framework.Metadata.ElementMetadataFactoryFeature(), null);
            }

            return (T)_ElementMetadataFactoryFeature;
        }

        return default;
    }
}
